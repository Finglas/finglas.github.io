<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shaun Finglas - 2016</title><link href="https://blog.shaunfinglas.co.uk/" rel="alternate"></link><link href="https://blog.shaunfinglas.co.uk/feeds/2016.atom.xml" rel="self"></link><id>https://blog.shaunfinglas.co.uk/</id><updated>2016-11-01T00:00:00+01:00</updated><entry><title>DDD - Events</title><link href="https://blog.shaunfinglas.co.uk/2016/11/ddd-events.html" rel="alternate"></link><published>2016-11-01T00:00:00+01:00</published><updated>2016-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-11-01:/2016/11/ddd-events.html</id><summary type="html">&lt;p&gt;The act of something happening is one of the most crucial aspects of implementing Domain Driven Design (DDD). I missed the importance of domain events when first exploring DDD.&lt;/p&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;Most requirements come in the form &lt;q&gt;when something happens, do this&lt;/q&gt;. &lt;em&gt;Something&lt;/em&gt; in this case would be an action, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The act of something happening is one of the most crucial aspects of implementing Domain Driven Design (DDD). I missed the importance of domain events when first exploring DDD.&lt;/p&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;Most requirements come in the form &lt;q&gt;when something happens, do this&lt;/q&gt;. &lt;em&gt;Something&lt;/em&gt; in this case would be an action, and &lt;em&gt;this&lt;/em&gt; would be the result taken afterwards. Most domain events can be discovered when requirements use this sort of language.&lt;/p&gt;
&lt;p&gt;Another important consideration is that most requirements are evolutionary. They are often added as the feature is developed. What may start off as a single piece of behaviour, may evolve into something much more complex. Events allow this evolution in a decoupled manner.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;When a blog post is published, update the authors statistics&lt;/q&gt;. In code this may have a signature similar to:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/514772dbb07895410be283fa71067b97.js"&gt;&lt;/script&gt;

&lt;p&gt;The publish method is responsible for the publishing of the post. This entity holds responsibility for the pre-conditions and post conditions of such action. Also the method takes a domain service that will update the authors statistics as this is not the responsibility of the &lt;code&gt;Post&lt;/code&gt; entity itself.&lt;/p&gt;
&lt;p&gt;A new requirement may be to automatically send out a tweet with the post title and description. Without events this could be added in a similar manner.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/ad891cd9cb64cae26f18470bd15b7e6e.js"&gt;&lt;/script&gt;

&lt;p&gt;Again the service will do the right thing once invoked, in this case send a tweet out. As you can see we could repeat this sort of enhancement over and over. While this does indeed complete the functionality that the business requires, the solution is far from elegant. A much better solution is to rely upon domain events.&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;script src="https://gist.github.com/Finglas/8b5bd981aa9e0ba33ae041122a6a448b.js"&gt;&lt;/script&gt;

&lt;p&gt;The difference here is the publish method does nothing other than its internal logic. However it does publish (raise) an event to indicate a post has been published. Subscribers (listeners) to this event can then perform their corresponding actions.&lt;/p&gt;
&lt;p&gt;Using the previous example two subscribers would be configured to send tweets and update author statistics. Each of these subscribers (handlers) would run in process by default, so their internal implementation should be as simple as possible. In other words record the request, and process this in the background. &lt;a href="http://udidahan.com/2009/06/14/domain-events-salvation/"&gt;The code to raise the event is relatively simple&lt;/a&gt;, and can simply forward to any registered subscribers based upon a type. Any failure should not cause the publish to fail. Alternatively external subscribers could also handle this event, though this implementation would require the use of resilient and durable storage such as message queues or databases.&lt;/p&gt;
&lt;p&gt;Ultimately domain events allow for extremely loosely coupled code, that is open for extension. Each handler can be developed and tested in isolation. The use of composition means that new features should become easy additions, with low risk.&lt;/p&gt;
&lt;p&gt;One aspect that may stand out is that the use of this pattern uses a static class to publish events. While in most cases this would be poor for testing, this is not the case here. For tests prior to each step executing you can simply clear any registered handlers and configure what is required. If no handlers are configured, then nothing occurs. Also test handlers that simply report that fact a message has been raised are more than adequate.&lt;/p&gt;
&lt;h3&gt;Downsides&lt;/h3&gt;
&lt;p&gt;While this refactored example is loosely coupled, and open for extension, the intent of what happens after a publish is somewhat lost. Before it was clearer to see what the &lt;code&gt;Publish&lt;/code&gt; method would do. This is a trade off, though the pros outweigh the cons here. Most IDE's have a way of showing you the use of all types, so we could easily see any handlers that consume the &lt;code&gt;PostPublishedEvent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even with IDE/editor support, the loosely coupled nature of Domain Events can be tricky to debug at runtime. For example I once accidentally configured a game engine to handle events triggered from player movement. This meant that each frame of the game executed the collision detection algorithm twice, instead of once. Without a clear audit of what handlers are being executed upon what events, the use of domain events can be tricky to debug.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Domain Events are a key area of DDD.&lt;/li&gt;
&lt;li&gt;Use events to write loosely coupled code.&lt;/li&gt;
&lt;li&gt;Ensure you have a method of auditing with handlers respond to which events.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category></entry><entry><title>POODR Highlights Part 2</title><link href="https://blog.shaunfinglas.co.uk/2016/11/poodr-highlights-part-2.html" rel="alternate"></link><published>2016-11-01T00:00:00+01:00</published><updated>2016-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-11-01:/2016/11/poodr-highlights-part-2.html</id><summary type="html">&lt;p&gt;Two other stand out topics from POODR were the use of tests and
inheritance. The first set of &lt;a href="https://blog.shaunfinglas.co.uk/2016/10/poodr-highlights-part-1.html"&gt;higlights covered dependencies and
arguments&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Tests&lt;/h4&gt;
&lt;p&gt;A conclusion that I agree with is that in general “most programmers
write too many tests.”. A great quote in the book sees “tests (as) the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two other stand out topics from POODR were the use of tests and
inheritance. The first set of &lt;a href="https://blog.shaunfinglas.co.uk/2016/10/poodr-highlights-part-1.html"&gt;higlights covered dependencies and
arguments&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Tests&lt;/h4&gt;
&lt;p&gt;A conclusion that I agree with is that in general “most programmers
write too many tests.”. A great quote in the book sees “tests (as) the
canary in the coal mine; when the design is bad, testing is hard”. Sadly
too many poor tests are often written. Examples such as property or
construction tests, framework tests or tests that are coupled to the
implementation are all common problems. Instead we should aim to get
better and more value out of our tests by writing fewer of them, but of
higher quality. In short test everything once and only in the proper
place. A first step is to simply focus on the ROI that tests give, and
focus on the high risk areas.&lt;/p&gt;
&lt;p&gt;The test categories are broken down into two core types of tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incoming Public Messages (public API)&lt;/li&gt;
&lt;li&gt;Outgoing Public Messages (To public API of another object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State based tests should be used for incoming public messages. While
verification based tests should be used for outgoing public messages as
the state is tested on the receiver, elsewhere. The &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;distinction between
commands and
queries&lt;/a&gt;
is also highlighted. In summary incoming messages should be tested for
the state they return. Outgoing commands should be tested to ensure they
get sent. Outgoing query messages should not be tested, merely stubbed.&lt;/p&gt;
&lt;p&gt;These testing rules are nothing new, but the summary and importance of
following these guidelines is nicely summarized within the chapter
covering testing principles.&lt;/p&gt;
&lt;h4&gt;Inheritance&lt;/h4&gt;
&lt;p&gt;Inheritance is widely abused and misunderstood. Either inheritance is
the solution for all problems, or you're advised to never use
inheritance. POODR takes a more pragmatic approach. Inheritance is a
tool that can sometimes provide an excellent solution, however you are
&lt;a href="https://blog.shaunfinglas.co.uk/2015/06/dry-vs-coupling-in-production-code.html"&gt;better off duplicating
code&lt;/a&gt;
and &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;defer such
decisions&lt;/a&gt;
until you know more.&lt;/p&gt;
&lt;p&gt;The wrong abstraction is harder to work with than duplicated code as
duplication can easily be removed. A bad abstraction that is used in
many places is much harder however. The application of the &lt;a href="http://wiki.c2.com/?RuleOfThree"&gt;Rule of
Three&lt;/a&gt; can help here.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tests are hard - write less but focus on the quality.&lt;/li&gt;
&lt;li&gt;Minimize the number of tests you write by using boundaries via
    incoming/outgoing messages.&lt;/li&gt;
&lt;li&gt;Inheritance is not all bad.&lt;/li&gt;
&lt;li&gt;Defer or hold back using inheritance until you understand the
    problem.&lt;/li&gt;
&lt;/ul&gt;</content><category term="highlight"></category></entry><entry><title>Constant Object Anti Pattern</title><link href="https://blog.shaunfinglas.co.uk/2016/10/constant-object-anti-pattern.html" rel="alternate"></link><published>2016-10-01T00:00:00+02:00</published><updated>2016-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-10-01:/2016/10/constant-object-anti-pattern.html</id><summary type="html">&lt;p&gt;Most constants are used to remove magic numbers or variables that lack
context. A classic example would be code littered with the number 7.
What does this refer to exactly? If this was replaced with DaysInWeek or
similar, much clarity is provided. You can determine that code
performing offsets would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most constants are used to remove magic numbers or variables that lack
context. A classic example would be code littered with the number 7.
What does this refer to exactly? If this was replaced with DaysInWeek or
similar, much clarity is provided. You can determine that code
performing offsets would be adding days, rather than a mysterious number
seven.&lt;/p&gt;
&lt;p&gt;Sadly a common pattern which uses constants is the use of a single
constant file or object.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/5a54e173296d81dcbdbfb8016f162150.js"&gt;&lt;/script&gt;

&lt;p&gt;The beauty of constants is clarity, and the obvious fact such variables
are fixed. When a constant container is used, constants are simply
lumped together. These can grow in size and often become a dumping
ground for all values within the application.&lt;/p&gt;
&lt;p&gt;A disadvantage of this pattern is the actual value is hidden. While a
friendly variable name is great, there will come a time where you will
want to know the actual value. This forces you to navigate, if only to
peek at the value within the constant object. A solution is to simple
perform a refactor to move the variable closer to use. If this is within
a single method, let the constant live within the method. If a class,
let the constant live at a field level. Finally if the constant is used
across multiple classes, find a shared home and rely on a well thought
out namespace.&lt;/p&gt;
&lt;p&gt;A similar issue regarding constants is the use of configuration files or
similar to set the values. While the const keyword is dropped in this
case, the object performs the same role. A public key, followed by a
value that is used. &lt;a href="https://blog.shaunfinglas.co.uk/2016/04/x-of-configuration-is-never-used.html"&gt;The anti pattern in this case is treating all
values as requiring
configuration&lt;/a&gt;.
Unless you need to change such values at runtime or based on deployment
models, inline constants are much preferred. Literal values, mainly
strings can often be left inline with limited downsides also. For
example, a fixed, relative file path is much better left inline. If you
are worried about lack of context, then the use of named arguments can
help.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/16d8dd7c759a182b4eafb132d7f8fd78.js"&gt;&lt;/script&gt;

&lt;h2&gt;Lessons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keep constants local to methods, or classes.&lt;/li&gt;
&lt;li&gt;Avoid constant objects or files as these will become bloated and
    lack context.&lt;/li&gt;
&lt;li&gt;Only introduce configuration for aspects that need or will change.
    Defer second guessing.&lt;/li&gt;
&lt;li&gt;Use named arguments to add context for inline variables.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category><category term="programming"></category></entry><entry><title>POODR Highlights Part 1</title><link href="https://blog.shaunfinglas.co.uk/2016/10/poodr-highlights-part-1.html" rel="alternate"></link><published>2016-10-01T00:00:00+02:00</published><updated>2016-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-10-01:/2016/10/poodr-highlights-part-1.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.poodr.com/"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt; or
POODR is clearly a book about Ruby development, however the odd aspect
is much of the concepts apply to other languages. In fact I've taken
these ideas and used them both before and after reading the book in
other dynamic languages and even static …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.poodr.com/"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt; or
POODR is clearly a book about Ruby development, however the odd aspect
is much of the concepts apply to other languages. In fact I've taken
these ideas and used them both before and after reading the book in
other dynamic languages and even static languages such as C#. In
summary the book is well worth a read, even if you don't do Ruby
development full-time.&lt;/p&gt;
&lt;p&gt;A few of the highlights for me will be spread out across the following
posts.&lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;The author takes a firm stance on dependencies. Anything that cannot be
controlled by the class itself should be protected from change. In other
words a message sent to &lt;code&gt;self/this&lt;/code&gt; is preferred than directly
interacting with a dependency.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/086ca41a77d1623a999a9dcf8ddc97ac.js"&gt;&lt;/script&gt;

&lt;p&gt;I've followed this pattern in the past, but the seeing the
justifications for the benefit of this has made me realise the
importance of such a practice. In the first example the publish method
directly knows about the twitter feed it must interact with. In the
second example the class sends a message to itself, while the class
internally will still know how to interact with the dependency this is
hidden. The private method has this responsibility.&lt;/p&gt;
&lt;p&gt;With a single use you could argue there is not much difference, but the
&lt;code&gt;PostPublished&lt;/code&gt; method is a nice seam for both testing and changes. We
could easily add assertions or make changes within the &lt;code&gt;PostPublished&lt;/code&gt;
method without fear of changing anything else. Finally if the
&lt;code&gt;PostPublished&lt;/code&gt; method is used in multiple places this abstraction pays
for itself straight away.&lt;/p&gt;
&lt;h3&gt;Arguments&lt;/h3&gt;
&lt;p&gt;Arguments are another key area that can change. Just like dependencies,
the book focuses on the idea that making small changes up front can lead
to flexible code that can handle change in the future. While you could
argue that the order of arguments changing in the future may never
happen, using named arguments has a great side effect on readability.&lt;/p&gt;
&lt;p&gt;In static languages your IDE will most likely have a automated method of
adding these in, so the C# example below can easily add named arguments
with the press of a keyboard shortcut.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/8787b97afbfef6c4835ee3b3138f1025.js"&gt;&lt;/script&gt;

&lt;p&gt;Named arguments provide increased readability with very little effort.
Tests often benefit from the use of named arguments as you can remove
the need for temporary variables, and instead in-line them to the
location of use. While the third example is more “wordy”, they can
safely be re-ordered without fear of compilation or runtime errors.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Wrap dependencies even if they are only used once. A message to
    &lt;code&gt;self/this&lt;/code&gt; is preferred. Easier to change and provides seams for
    future work.&lt;/li&gt;
&lt;li&gt;Use named arguments for improved readability and the ability to
    reduce temporary variables. Named variables can be dropped if there
    is only one argument or the variable is well named.&lt;/li&gt;
&lt;/ul&gt;</content><category term="highlight"></category><category term="code"></category><category term="programming"></category></entry><entry><title>The New Guy</title><link href="https://blog.shaunfinglas.co.uk/2016/10/the-new-guy.html" rel="alternate"></link><published>2016-10-01T00:00:00+02:00</published><updated>2016-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-10-01:/2016/10/the-new-guy.html</id><summary type="html">&lt;p&gt;Everyone is new at some point. No matter your experience level. You're
either new to the team or new to the business. Being the “new person” is
both a blessing and a curse.&lt;/p&gt;
&lt;h3&gt;You're New&lt;/h3&gt;
&lt;p&gt;When you're new you come with no baggage. You're full of questions and
curiosity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Everyone is new at some point. No matter your experience level. You're
either new to the team or new to the business. Being the “new person” is
both a blessing and a curse.&lt;/p&gt;
&lt;h3&gt;You're New&lt;/h3&gt;
&lt;p&gt;When you're new you come with no baggage. You're full of questions and
curiosity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do we do it this way?&lt;/li&gt;
&lt;li&gt;Isn't there a better way of doing this?&lt;/li&gt;
&lt;li&gt;Have you considered this instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all great questions for new starters to ask, and for teams to
hear.&lt;/p&gt;
&lt;h3&gt;You Have a New Team Member&lt;/h3&gt;
&lt;p&gt;When you have a new team member you gain someone with a fresh
perspective. They're full of questions and curiosity. Rather than
history, they'll be open to new and fresh challenges. A new member can
ask you to question current practices. It is very easy to overlook
problem areas only until someone with a fresh outlook arrives.&lt;/p&gt;
&lt;h3&gt;How to be New&lt;/h3&gt;
&lt;p&gt;There are two roles a new team member must play.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning&lt;/li&gt;
&lt;li&gt;Challenging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The learning phase should involve questions, shadowing and pairing. The
goal is to learn about the system, the architecture and the business.&lt;/p&gt;
&lt;p&gt;The second phase should be to challenge and question the status quo.
Provide better solutions, or ask for justifications and explanations.
This is both win-win for the team and the new member. They'll learn and
the team will gain a fresh insight into their successes and failures.&lt;/p&gt;
&lt;p&gt;The key part of being a new team member is balance within these areas.
Too much learning and no challenging will benefit no one. Likewise
kicking up a fuss over every detail is not going to end well.&lt;/p&gt;
&lt;h3&gt;New Starter Balance&lt;/h3&gt;
&lt;p&gt;A past mistake I've made is swaying towards learning the system, versus
challenges areas that were clearly wrong or needed improving. This is a
tough area, as you don't want to rock the boat, but at the same time
some rocking is required. The key is to balance this.&lt;/p&gt;
&lt;p&gt;Advice to my past self would to tackle areas that you can have an impact
in. For example a neglected process or area. By picking your battles in
this manner you can slowly build your brand within the team, further
allowing you to take on the more controversial challenges. For example
if you've been around for a while, and proven yourself you'll have an
easier time suggesting and implementing change.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Remember the &lt;a href="http://johnstepper.com/2013/10/26/the-five-monkeys-experiment-with-a-new-lesson/"&gt;Monkey and Banana
    Analogy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Balance between learning and challenging when a new starter.&lt;/li&gt;
&lt;li&gt;Start slowly when a new starter, stack up small wins over time
    instead of a big bang approach.&lt;/li&gt;
&lt;li&gt;Embrace new starters, use them to test your processes and
    documentation.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category></entry><entry><title>New and Shiny Things</title><link href="https://blog.shaunfinglas.co.uk/2016/09/new-and-shiny-things.html" rel="alternate"></link><published>2016-09-01T00:00:00+02:00</published><updated>2016-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-09-01:/2016/09/new-and-shiny-things.html</id><summary type="html">&lt;p&gt;There is risk with upgrading anything, be it language, framework,
library, OS or third parties.&lt;/p&gt;
&lt;p&gt;In the past I was rather gung-ho about upgrading. New version out? We
need it. In fact, this need is often a want. The new version often seems
better. Developers seem addicted to the latest …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is risk with upgrading anything, be it language, framework,
library, OS or third parties.&lt;/p&gt;
&lt;p&gt;In the past I was rather gung-ho about upgrading. New version out? We
need it. In fact, this need is often a want. The new version often seems
better. Developers seem addicted to the latest and greatest.&lt;/p&gt;
&lt;p&gt;One of the best, but also one of the worst problems with software
development is weekly there is something new to use or try. Keeping pace
is impossible.&lt;/p&gt;
&lt;h4&gt;Internet Echo Chamber Effect&lt;/h4&gt;
&lt;p&gt;If you look at a news article on the release of something, you feel as
if you are the only person not using it. Everyone is is using it, we
need to as well.&lt;/p&gt;
&lt;p&gt;In fact this is quite the opposite case. A site about the latest web
framework will seem as if everyone is using the framework apart from
yourself. This is known as the &lt;a href="https://en.wikipedia.org/wiki/Echo_chamber_%28media%29"&gt;Internet Echo Chamber
Effect&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Wait for a Patch&lt;/h4&gt;
&lt;p&gt;Wise advice I received and saw others follow was the minor or patch
adoption. If version 2 comes out, wait for 2.1. Let others find the
issues and wait for the version to stabilize. If you really must use
version 2, use it in a low risk way. Personal projects or in house
solutions make sense. You can keep pace but reduce risk in this manner.&lt;/p&gt;
&lt;h4&gt;Boring but Stable&lt;/h4&gt;
&lt;p&gt;Another approach is to take widely used, stable solutions. Avoiding
anything new or cutting edge except for personal projects or internal
projects.&lt;/p&gt;
&lt;p&gt;If your job is to write software to sell widgets, focus solely on that,
what you use behind the scenes really doesn't matter. As long as you can
delivery value and aid the sale of widgets you're on track for success.&lt;/p&gt;
&lt;p&gt;A similar alternative is to use boring solutions for anything that has
high risk. While using newer, more exciting solutions for low risk
projects. Again risk is managed and reduced. If the new, cutting edge
solution becomes the norm, eventually you can adopt this in the future.&lt;/p&gt;
&lt;p&gt;A younger, less experienced self would not find this advice at all
appealing. After all if the tests pass why can't you upgrade to the
latest and greatest? The main issue is risk, which will be the subject
of a future post. Every single change, be it a single line of code has
risk.&lt;/p&gt;
&lt;p&gt;The one exception to this advice is security concerns. If a security
release is available you should aim to upgrade as soon as possible.
Usually such releases form minor releases, meaning risk is low and
matches the delayed upgrade path above.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Any change has risk.&lt;/li&gt;
&lt;li&gt;Reduce risk when handling new technology.&lt;/li&gt;
&lt;li&gt;Either use stable versions or boring solutions.&lt;/li&gt;
&lt;li&gt;Play and test new technology on the side, in low risk scenarios.&lt;/li&gt;
&lt;li&gt;What technology you use to build something actually doesn't matter
    in most cases.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category></entry><entry><title>Past Mistakes - ORMs and Bounded Contexts</title><link href="https://blog.shaunfinglas.co.uk/2016/08/past-mistakes-orms-and-bounded-contexts.html" rel="alternate"></link><published>2016-08-01T00:00:00+02:00</published><updated>2016-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-08-01:/2016/08/past-mistakes-orms-and-bounded-contexts.html</id><summary type="html">&lt;p&gt;Sticking with the theme of documenting past mistakes, it's worth
expanding a real life scenario where I was unaware of the use of bounded
contexts and fully understanding the tools you use.&lt;/p&gt;
&lt;h4&gt;Ignoring a Bounded Context&lt;/h4&gt;
&lt;p&gt;A fellow developer set upon a quest to rid numerous projects of
duplicated records …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sticking with the theme of documenting past mistakes, it's worth
expanding a real life scenario where I was unaware of the use of bounded
contexts and fully understanding the tools you use.&lt;/p&gt;
&lt;h4&gt;Ignoring a Bounded Context&lt;/h4&gt;
&lt;p&gt;A fellow developer set upon a quest to rid numerous projects of
duplicated records, which was effectively the active record pattern.
This was a huge under taking split across hundreds of thousands of lines
of code, over numerous separate projects. Close to completing the task I
assisted and finally the shared library containing a single record for
each type was complete. Each project now referenced the shared copy.
This was versioned as each build was completed.&lt;/p&gt;
&lt;p&gt;For a while this worked with no problems. It certainly felt nice to see
the reduction in duplicated code. Sadly sometime later myself and
another developer made a seemingly innocent change. In terms of
relation, the change was as far removed from the production error that
we had just been alerted to was. There was no link. It was a different
project, in a different path, on a different model. The only commonality
was the fact the issue only occurred after the previous deploy.&lt;/p&gt;
&lt;h4&gt;ORMs and Changes&lt;/h4&gt;
&lt;p&gt;Several minutes of panic later, the problem was spotted. While the model
we had changed had no direct relation, indirectly there was. As each
record was loaded by the ORM in question, links and dependencies where
also loaded or checked. So were the children's links and dependencies.
Finally this would hit the newly changed record. Due to the database
changing ahead of the library, numerous other projects now had a runtime
error. As we naively believed we were only working within a single
project, we deployed the changes within the one project. As the library
was shared, all other projects were now vulnerable.&lt;/p&gt;
&lt;p&gt;This lack of &lt;a href="https://blog.shaunfinglas.co.uk/2016/06/ddd-bounded-contexts.html"&gt;bounded
context&lt;/a&gt;,
and focusing on &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/dry-vs-coupling-in-production-code.html"&gt;removal of
duplication&lt;/a&gt;
was not the only lesson here. This issue painfully highlighted the need
and importance to know exactly what your tools are doing, especially
when they are hidden behind the scenes. In fact, my use of ORMs other
than micro-ORMs is next to non existent at present.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use bounded contexts.&lt;/li&gt;
&lt;li&gt;Favour loose coupling, over reduced duplication.&lt;/li&gt;
&lt;li&gt;Anything shared must be deployed and tested as a single unit,
    otherwise remove the shared component.&lt;/li&gt;
&lt;li&gt;ORMs (or other tools) should be understand and respected.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category><category term="past-mistakes-series"></category></entry><entry><title>Test Your Live System using Live Service Tests</title><link href="https://blog.shaunfinglas.co.uk/2016/08/test-your-live-system-using-live.html" rel="alternate"></link><published>2016-08-01T00:00:00+02:00</published><updated>2016-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-08-01:/2016/08/test-your-live-system-using-live.html</id><summary type="html">&lt;p&gt;Traditionally there are three categories of functional tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Unit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is often refereed to as the testing pyramid. Unit tests form the
bulk of your suite, followed by a smaller subset of integration tests.
Acceptance tests that cover features should be the tip of your testing
strategy, few …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Traditionally there are three categories of functional tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Unit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is often refereed to as the testing pyramid. Unit tests form the
bulk of your suite, followed by a smaller subset of integration tests.
Acceptance tests that cover features should be the tip of your testing
strategy, few in number. These are great but there is a missing suite of
tests - live service tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Live Service Tests&lt;/li&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Unit&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Live Service Tests.&lt;/h4&gt;
&lt;p&gt;The role of live service tests (LST) is to test the live system against
the production environment and configuration. LST would be fewer in
number than acceptance tests. Unlike acceptance tests, these should run
constantly. Once a run has completed, kick of a new test run. This will
require a dedicated machine or piece of infrastructure, but the value
provided is well worth it.&lt;/p&gt;
&lt;p&gt;LST should focus on journeys instead of functionality or features. In
contrast to acceptance tests a user journey would be the core purpose of
the system. For example, a LST suite to cover this blog would ensure the
home page loads, an individual post can be loaded, and the archive is
accessible. The rest of the site such as comments or social media
interactions could be broken, but the core purpose of the system is
working. Readers can read and browse the blog. If at any time the tests
detect a failure in the core journey there is a big problem.&lt;/p&gt;
&lt;h4&gt;Why&lt;/h4&gt;
&lt;p&gt;LST offer the fastest feedback possible due to the fact they are
constantly running. It is far more desirable to detect a problem before
your users do. Naturally LST offer great protection after deploys.
Deployment of new code is one of the times you are more likely to
encounter issues, so a suite of tests triggered after a deployment is a
natural fit. LST also protect against unplanned events. In my
experience, exceeding disk space, DNS failure, third party issues and
more have all be detected.&lt;/p&gt;
&lt;h4&gt;How To&lt;/h4&gt;
&lt;p&gt;Adding another suite of tests may sound like increased effort but the
cost associated with LST is rather low. Sometimes acceptance tests can
be run as LST, meaning no extra effort. Care must be taken here if the
tests perform anything destructive or anything that interacts with third
parties.&lt;/p&gt;
&lt;p&gt;Alternatively writing LST is simpler than standard acceptance tests. The
same tooling can be used such as Selenium, NUnit and so forth. As the
tests themselves focus on journeys rather than functionality, the tests
are often less complex to write.&lt;/p&gt;
&lt;p&gt;The only difficulty LST introduce is the fact they are executing against
the live system. Consider interactions with a third party. Using a real
account on the real system may be problematic. One way to get around
this issue is to embed test functionality within the system itself. For
example you could set up a test account which the tests use. Instead of
executing against the third party system, the dummy account is used.
Likewise most third parties have test accounts which can be setup and
used instead.&lt;/p&gt;
&lt;p&gt;LST are a nice compliant to a diagnostic dashboard. If your dash is
reporting no issues, and your tests are green, you can be confident the
system is operating in a &lt;em&gt;good enough&lt;/em&gt; state.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Functional tests are not enough.&lt;/li&gt;
&lt;li&gt;Use live service tests to test the real production system.&lt;/li&gt;
&lt;li&gt;Run live service tests constantly for the earliest feedback
    possible.&lt;/li&gt;
&lt;li&gt;Alter production code to introduce test functionality.&lt;/li&gt;
&lt;li&gt;Make use of test accounts and anything else that third parties may
    offer.&lt;/li&gt;
&lt;/ul&gt;</content><category term="testing"></category></entry><entry><title>Why You Should Do Code Katas</title><link href="https://blog.shaunfinglas.co.uk/2016/08/why-you-should-do-code-katas.html" rel="alternate"></link><published>2016-08-01T00:00:00+02:00</published><updated>2016-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-08-01:/2016/08/why-you-should-do-code-katas.html</id><summary type="html">&lt;p&gt;&lt;a href="http://codekata.com/"&gt;Code katas&lt;/a&gt; are simple exercises that are meant
to be repeated. They are great for learning a new language or tool. The
goal is to learn something, not to complete them. In fact, if you don't
finish a kata that is perfectly normal as long as you take something
away …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://codekata.com/"&gt;Code katas&lt;/a&gt; are simple exercises that are meant
to be repeated. They are great for learning a new language or tool. The
goal is to learn something, not to complete them. In fact, if you don't
finish a kata that is perfectly normal as long as you take something
away. The beauty of code katas is they are small enough to be repeated
and possibly completed within small time slots.&lt;/p&gt;
&lt;h4&gt;Takeaways&lt;/h4&gt;
&lt;p&gt;Beginner or expert there will be something you can learn or take away.
Beginners should take away language skills, tooling tricks and more.
This is furthered when pair programming.&lt;/p&gt;
&lt;p&gt;Experts should be inclined to try new solutions rather than rinse
repeat. Instead of solving the problem in the manner you do 9-5, try
something completely new. Solving a kata ten times the same way is a
waste. Instead solve it once, ten different ways. In short, experiment
in code katas, not your production code.&lt;/p&gt;
&lt;h4&gt;Going Further&lt;/h4&gt;
&lt;p&gt;Sadly a small minority seem such simple exercises as below them. No one
is above doing a kata. Constant improvement or training is essential
regardless of level. Katas alone are not enough to support personal
development. Experience, reading and practical development are all still
required. However when code katas are combined they are an excellent
aid.&lt;/p&gt;</content><category term="programming"></category><category term="retro"></category></entry><entry><title>Notes on Building and Deploying Software</title><link href="https://blog.shaunfinglas.co.uk/2016/07/notes-on-building-and-deploying-software.html" rel="alternate"></link><published>2016-07-10T15:18:00+02:00</published><updated>2016-07-10T15:18:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-10:/2016/07/notes-on-building-and-deploying-software.html</id><summary type="html">&lt;h4&gt;Builds and Deploys&lt;/h4&gt;
&lt;p&gt;Ideally a build and deploy should be a single step, included within the
check out of the repository. Additionally the build should include and
install pre-requisites if missing. You can safely assume the target OS
is at least configured, but any missing packages should be installed as …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Builds and Deploys&lt;/h4&gt;
&lt;p&gt;Ideally a build and deploy should be a single step, included within the
check out of the repository. Additionally the build should include and
install pre-requisites if missing. You can safely assume the target OS
is at least configured, but any missing packages should be installed as
needed.&lt;/p&gt;
&lt;p&gt;The core steps regardless of platform or technology follow a common
pattern. A number of these steps can be performed asynchronously. For
example, it is possible to run a suite of tests in parallel, rather than
individually. This can save massive amounts of time. As a first approach
perform all steps synchronously, only adjusting once stable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
Compile/Lint - *Sync*

&lt;/li&gt;
&lt;li&gt;
Run Unit Tests - *Async*

&lt;/li&gt;
&lt;li&gt;
Deploy - *Async*

&lt;/li&gt;
-   Warm up (cache hits, web server)
-   Data (run migrations)
-   Configuration
-   Host Environment

&lt;li&gt;
Run Integration/Acceptance Tests - *Async*

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This whole process should be executed regardless of environment. A local
developer machine only differs to production in terms of topology. If
you cannot execute the exact same process that you are performing upon
commit, you can never be sure the commit will work. CI tooling should
act as nothing more than an aggregation of stats and artefacts that are
generated by invoking the build/deploy script.&lt;/p&gt;
&lt;h4&gt;Components&lt;/h4&gt;
&lt;p&gt;A working software application can be decomposed into four components.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executable code - your application.&lt;/li&gt;
&lt;li&gt;Configuration - connection strings or credentials.&lt;/li&gt;
&lt;li&gt;Host environment - target deployment machine.&lt;/li&gt;
&lt;li&gt;Data - required data for use, or persistent stores such as
    databases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If any of these change, trigger the feedback process as they can all
change the behaviour of the application.&lt;/p&gt;
&lt;h4&gt;Automation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Aim to automate everything, but do it gradually over time. Aim for
    the bottlenecks to begin with if the task of automating the
    deployment pipeline is daunting.&lt;/li&gt;
&lt;li&gt;Keep everything in source control. Never allow your CI tool to
    control your pipeline.&lt;/li&gt;
&lt;li&gt;Don't check passwords or credentials into source control.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Speed is Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Too long and people wont commit often.&lt;/li&gt;
&lt;li&gt;Under thirty seconds is ideal. Faster is better.&lt;/li&gt;
&lt;li&gt;Fail the build if the time exceeds a set threshold. You can use
    &lt;a href="https://blog.shaunfinglas.co.uk/2014/11/ratcheting.html"&gt;ratcheting&lt;/a&gt;
    to reduce this over time.&lt;/li&gt;
&lt;li&gt;Monitor tests regularly and try to speed the slowest ones up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Build and Deploy Etiquette&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Don't check in on a broken build, unless you are fixing it.&lt;/li&gt;
&lt;li&gt;Perform an update prior to commit and run the whole build/deploy
    process.&lt;/li&gt;
&lt;li&gt;Never go home on a broken build, and ideally don't check in just
    before leaving.&lt;/li&gt;
&lt;li&gt;Never deploy on Friday's or whenever there will be few developers
    around on hand, such as holiday periods.&lt;/li&gt;
&lt;li&gt;Always be ready to revert to the previous version. If the fix takes
    longer than just simply reverting the changes, don't try and fix the
    build. Just revert.&lt;/li&gt;
&lt;li&gt;Fail the build for architectural breaches such as a module
    referencing a module it shouldn't.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/02/warnings-as-errors.html"&gt;Fail the build for
    warnings&lt;/a&gt;
    or code style breaches. Warnings can hide serious problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Infrastructure&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Lock down production environments.&lt;/li&gt;
&lt;li&gt;Treat test environments equally, these should also be locked down
    from manual changes.&lt;/li&gt;
&lt;li&gt;If you cannot create your infrastructure from scratch via an
    automated process to begin with, implement access control so that
    any changes must be requested and logged.&lt;/li&gt;
&lt;li&gt;Any changes should be back filled and tested. Use some form of audit
    or access control to manage these steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Data&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use migrations to manage data. Have a version table that stores the
    schema version. Use migrations to roll forwards or roll back
    incrementally.&lt;/li&gt;
&lt;li&gt;Each migration should have an "up" and a "down" step. For example,
    up adds a table, down removes it. Run these both before committing
    to make sure they work.&lt;/li&gt;
&lt;li&gt;Migrations allow you to decouple the deployment of your application
    from the deployment of your database.&lt;/li&gt;
&lt;li&gt;The use of views or stored procedures can add a layer of abstraction
    between applications and databases. This allows changes to the
    underlying DB to have a smaller, limited effect.&lt;/li&gt;
&lt;/ul&gt;</content><category term="deployment"></category></entry><entry><title>Ten Lessons from Rewriting Software</title><link href="https://blog.shaunfinglas.co.uk/2016/06/ten-lessons-from-rewriting-software.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-01:/2016/06/ten-lessons-from-rewriting-software.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;h4&gt;It Will Take A Lot Longer Than Estimated&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Its navie to actually think this but if a system has been in
    production for say five years, expecting to reproduce it in five
    weeks is not possible. You may be able to get 80% of the core
    functionality done, but the …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;h4&gt;It Will Take A Lot Longer Than Estimated&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Its navie to actually think this but if a system has been in
    production for say five years, expecting to reproduce it in five
    weeks is not possible. You may be able to get 80% of the core
    functionality done, but the remaining 20% that was added to,
    iterated and stabilized over the remaining five years is what
    will destroy any form of schedule.&lt;/li&gt;
&lt;li&gt;If your estimate exceeds three months, you need to reasses what
    you are doing by breaking down the work, or changing plan. The
    bigger the estimate, the bigger the risk.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Deploy Incrementally Via CI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If you aren't deploying to a live environment as soon as
    possible, any future releases are destined to be failures,
    troublesome or just plain difficult.&lt;/li&gt;
&lt;li&gt;Soft releases and feature toggles should be used to aid constant
    releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Morale Will Drop The Longer It Goes On&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Probably the biggest and most surprising realization is the drop
    in personal and team morale.&lt;/li&gt;
&lt;li&gt;If you miss a "deadline" or keep failing to ship, then morale
    will tank.&lt;/li&gt;
&lt;li&gt;While software is never complete, a rewrite has a definitive
    target. If this target continues to move, team morale will move
    too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Users Will Probably Hate It Anyway&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Predominantly the UI, but your users will complain about change.&lt;/li&gt;
&lt;li&gt;Big sweeping changes often receive the most hate. A website I
    frequent had a major change both in visuals and the underlying
    technology used. While there was warning, you were left to your
    own to figure out where features were. This caused a great deal
    of frustration and negative feedback.&lt;/li&gt;
&lt;li&gt;Small, incremental changes allow your users to keep pace.&lt;/li&gt;
&lt;li&gt;Alternatively some tutorial or hint system can help reduce user
    pain.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Do What The Legacy System Does&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;As many of the original developers will likely have moved on, no
    one is really sure what the legacy system does.&lt;/li&gt;
&lt;li&gt;Even with the source code available, it is likely going to be
    hard to figure out the intent, afterall that's one of the
    reasons for the rewrite.&lt;/li&gt;
&lt;li&gt;If you are not careful you will end up simply reimplementing the
    same legacy in a new language or framework. Always weigh up
    preserving existing behaviour versus introducing technical debt.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Be Cheap And Quick - Use Stubs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When implementing the new system, &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;don't build a
    thing&lt;/a&gt;.
    At least at first.&lt;/li&gt;
&lt;li&gt;Use stubs to build the simplest, dumbest thing you can to get
    feedback.&lt;/li&gt;
&lt;li&gt;Without fully integrating the system in an end to end manner
    you'll end up throwing away a great deal of code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Feedback, Feedback, Feedback&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Early and fast feedback is essential.&lt;/li&gt;
&lt;li&gt;With a working end to end system gather as much as you can from
    any stakeholders.&lt;/li&gt;
&lt;li&gt;Chances are as you begin you'll naturally incur some additions,
    removals or modifications.&lt;/li&gt;
&lt;li&gt;Waiting months or longer for feedback is a guaranteed path to
    failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Thin Vertical Slices Over Fat Technology Splits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Avoid the temptation to have a UI team, a backend team and a
    data team and so on.&lt;/li&gt;
&lt;li&gt;Splitting at technology boundaries leads to systems that do not
    integrate well, or worse fail to handle the required use cases.&lt;/li&gt;
&lt;li&gt;Your first iteration should consist of all parts of the
    technology stack, in the thinnest manner possible. Combine this
    with early feedback and the fast development speed of stubs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Strangle Existing Legacy Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When rewriting in increments or by logical sections the
    &lt;a href="http://martinfowler.com/bliki/StranglerApplication.html"&gt;technique of
    strangulation&lt;/a&gt;
    is useful.&lt;/li&gt;
&lt;li&gt;Instead of releasing the new code as a standalone piece,
    integrate the new code into the existing legacy code base.&lt;/li&gt;
&lt;li&gt;This may be tricky at first however over time the legacy system
    will form nothing but an empty shell that integrates with the
    new system.&lt;/li&gt;
&lt;li&gt;The beauty of this approach is early feedback, and a guarantee
    that the new system behaves as intended.&lt;/li&gt;
&lt;li&gt;The final step would be to replace the legacy shell with the new
    modern interface or frontend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Refactor Where Possible&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Deciding to refactor or rewrite is never easy. Refactoring
    should be the default approach in many cases.&lt;/li&gt;
&lt;li&gt;Old languages or unsupported frameworks are good reasons to
    adopt a rewrite, but this varies case by case.&lt;/li&gt;
&lt;li&gt;If business agility is suffering such rewrites can be beneficial
    when using some of the techniques above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="retro"></category></entry><entry><title>Anaemic Domain Models and Code Smells</title><link href="https://blog.shaunfinglas.co.uk/2016/07/anaemic-domain-models-and-code-smells.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-01:/2016/07/anaemic-domain-models-and-code-smells.html</id><summary type="html">&lt;p&gt;An anaemic domain model (ADM) is considered a code smell in many cases.
An ADM is present when you have a entity representing your domain, but
void of any behaviour. Any logic is separate and operated upon in
isolation. Such domain models can be thought of as simple property bags …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An anaemic domain model (ADM) is considered a code smell in many cases.
An ADM is present when you have a entity representing your domain, but
void of any behaviour. Any logic is separate and operated upon in
isolation. Such domain models can be thought of as simple property bags,
plain old language objects or DTO's.&lt;/p&gt;
&lt;h4&gt;Code Smells&lt;/h4&gt;
&lt;p&gt;With an ADM your behaviour ends up split across many domain services
instead of being grouped with the data it operates upon.&lt;/p&gt;
&lt;p&gt;As the domain and your understanding evolves, the problem an ADM
introduces can get worse as more and more domain services are added.&lt;/p&gt;
&lt;p&gt;A complex domain or one that evolves will end up paying a price.
Converting to and from what looks like a domain model, only to perform
domain logic separately is quite redundant. Why not ditch the domain
model altogether? If you have a simple problem, a simple solution such
as a transaction script may very well do the job.&lt;/p&gt;
&lt;h4&gt;Simple Problems - Simple Solutions&lt;/h4&gt;
&lt;p&gt;Sometimes you don't have a complex domain. Input, basic logic, then some
form of CRUD is incredibly common. Due to this it is easy to see why
anaemic models exist.&lt;/p&gt;
&lt;p&gt;Rather than the cost associated with attempting to model the domain,
choose easier solutions such as transaction scripts, table gateways or
similar.&lt;/p&gt;
&lt;p&gt;The big argument for anaemic domain models is following the SRP. Adding
behaviour to domain models does not violate SRP. There is no reason why
such additions cannot be formed from composition or delegation. Likewise
the internal representation can be private. On the flip side domain
services operating under the disguise of SRP lack cohesion, despite
&lt;em&gt;doing one thing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The good news is that the ADM is very easy to extend and refactor at a
later point. &lt;a href="https://vimeo.com/43598193"&gt;Moving to a richer domain model is not
difficult&lt;/a&gt;, though the process may take
time.&lt;/p&gt;
&lt;h4&gt;Refactoring from an ADM&lt;/h4&gt;
&lt;p&gt;Simply push behaviour onto entities, one method at a time. As you do
this, services will begin to dissolve. All of this can be done when
supported by a good suite of tests.&lt;/p&gt;
&lt;p&gt;An &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;equally simple step is to being introducing value
types&lt;/a&gt;.
Over time these will act as code magnets pulling any related behaviour
towards them.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In most cases an ADM is a code smell.&lt;/li&gt;
&lt;li&gt;There may be easier solutions than a anaemic model that mimics your
    domain.&lt;/li&gt;
&lt;li&gt;The ADM is not a good example of SRP.&lt;/li&gt;
&lt;li&gt;Refactoring towards a rich domain model is easy and achievable at
    any stage.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category></entry><entry><title>I Need to Stop Misusing Divs</title><link href="https://blog.shaunfinglas.co.uk/2016/07/i-need-to-stop-misusing-divs.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-01:/2016/07/i-need-to-stop-misusing-divs.html</id><summary type="html">&lt;p&gt;I a certainly not a skilled or expert front end developer. While I'm
more than capable of creating pages I lack any design magic to make them
look half decent. Despite this one area where improvement can be made is
in my markup itself.&lt;/p&gt;
&lt;p&gt;Over the past few months I've …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I a certainly not a skilled or expert front end developer. While I'm
more than capable of creating pages I lack any design magic to make them
look half decent. Despite this one area where improvement can be made is
in my markup itself.&lt;/p&gt;
&lt;p&gt;Over the past few months I've spent most of my time getting to grips
with recent additions and changes in the HTML5 and CSS3 space. During
this one area stood out, my misuse of the division element or
&amp;lt;div&amp;gt;.&lt;/p&gt;
&lt;p&gt;Before the addition of the newer elements pages nested with div after
div was normal. However this is no longer the case. From this point
onwards I will be ensuring that every time I introduce a div element I
question whether a more appropriate element should be used.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The HTML div element (or HTML Document Division Element) is the
generic container for flow content, which does not inherently
represent anything. It can be used to group elements for styling
purposes (using the class or id attributes), or because they share
attribute values, such as lang. It should be used only when no other
semantic element (such as article or nav) is appropriate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Semantic Meaning&lt;/h4&gt;
&lt;p&gt;Two huge side effects that are often overlooked when ignoring semantic
markup is device compatibility with screen readers or other input
methods and future proofing content.&lt;/p&gt;
&lt;p&gt;Many people wrongly assume that all users are either keyboard/mouse or
mobile (touch) users. By using semantic elements, users of other input
methods get a much smoother experience. It is possible to jump to
navigation or content without having to page through dozens of unrelated
sections added only for stylistic purposes. Having used such devices
first hand, the joy such simple changes make are outstanding.&lt;/p&gt;
&lt;p&gt;Using semantic elements also helps future proof content. Screen scraping
and other technologies can be simplified massively if content is
correctly marked up. The thought that pages of content written now will
still be used and accessible decades from now is incredible.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;p&gt;The lesson here is an easy one. Every time you write a generic division
element, stop and ask yourself is there an element with more semantic
meaning that will do the same job?&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>UI Composition Techniques for Services</title><link href="https://blog.shaunfinglas.co.uk/2016/07/ui-composition-techniques-for-services.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-01:/2016/07/ui-composition-techniques-for-services.html</id><summary type="html">&lt;p&gt;When using services be it SOA, microservices or some other hybrid
approach, at some point you will need to display an aggregation of data
onto a UI. This simple task can actually involve some complexity and
hidden pitfalls.&lt;/p&gt;
&lt;p&gt;As an example, this blog could be powered by three independent services …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When using services be it SOA, microservices or some other hybrid
approach, at some point you will need to display an aggregation of data
onto a UI. This simple task can actually involve some complexity and
hidden pitfalls.&lt;/p&gt;
&lt;p&gt;As an example, this blog could be powered by three independent services.
A comment service, a post service and a archive service. Displaying this
content on the page could involve a few different approaches both with
pros and cons. Each vary in terms of benefits and complexity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service Composition&lt;/li&gt;
&lt;li&gt;Server Side Composition&lt;/li&gt;
&lt;li&gt;Backends For Frontends&lt;/li&gt;
&lt;li&gt;Frontend UI Composition&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Service Composition&lt;/h4&gt;
&lt;p&gt;Composition within independent services should be avoided at all costs.
In these cases service A invokes service B which invokes service C,
which has a dependency on A and so on. The problems such composition
introduce defeats any benefits that a service based approach brings. In
short &lt;a href="https://blog.shaunfinglas.co.uk/2014/07/soa-done-badly-vs-soa-done-right.html"&gt;composing data in this manner will lead to
problems&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Server Side Composition&lt;/h4&gt;
&lt;p&gt;Invoke each service behind a single request and perform composition on
the server. Return the results of the aggregation which can then be
processed by the UI. In most cases a &lt;em&gt;request&lt;/em&gt; will be a request over
HTTP.&lt;/p&gt;
&lt;h5&gt;Pros&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Single request to fetch all data.&lt;/li&gt;
&lt;li&gt;Single server side place to change if UI requirements change.&lt;/li&gt;
&lt;li&gt;Forms an anti corruption layer in front of the independent services.
    Client specific changes do not leak down into the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Cons&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Coupling is moved to the server side. Harder/slower to change
    compared to HTML/JS/UI layer.&lt;/li&gt;
&lt;li&gt;Handling failures must be considered more so than client side
    composition.&lt;/li&gt;
&lt;li&gt;Timeouts or lack of responses must be considered using asynchronous
    techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Where Does The UI Live?&lt;/h5&gt;
&lt;p&gt;Due to the nature of having to serve up data for the UI layer to
consume, it makes sense to purely store the UI components within the
host application. In this case the whole host application will use the
same UI techniques.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Backends For Frontends (BFFs)&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://samnewman.io/patterns/architectural/bff/"&gt;An alternative which builds upon server side
composition&lt;/a&gt; is server
side composition but performed individually based on the UI required. In
other words, a set of server side applications for each host are
created.&lt;/p&gt;
&lt;p&gt;As UI clients can differ drastically a single server side composition
technique may not be sufficient. Mobile devices may require a slimmed
down version of data, while desktop dashboards may prefer large
quantities. Additionally it is quite common to find certain clients
asking for additional fields or requirements specific to their client
implementation. In these cases BFFs make a great deal of sense.&lt;/p&gt;
&lt;h5&gt;Pros&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Same pros as server side composition.&lt;/li&gt;
&lt;li&gt;BFFs allow full control of server side composition tailored to the
    clients.&lt;/li&gt;
&lt;li&gt;Specialized BFFs reduce change and prevent independent services
    handling UI specific edge cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Cons&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Same cons as server side composition.&lt;/li&gt;
&lt;li&gt;More moving parts, though BFFs should be owned by the client
    themselves for true autonomy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Where Does The UI Live?&lt;/h5&gt;
&lt;p&gt;The same guidance as server side composition stands. Where the actual
BFF lives depends on how it is used. If the mobile client is expected to
have multiple implementations then a standalone service would be
required. Alternatively if only a single mobile platform is targeted,
then the service could live within the host application itself.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Frontend Composition&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://udidahan.com/2012/06/23/ui-composition-techniques-for-correct-service-boundaries/"&gt;Invoke each service and display its data independently via the
client&lt;/a&gt;.
The host application will include the front end of each service by
conforming to a common standard such as Javascript or other UI
components. The use of IDs and client side identifiers will be required
to ensure all services are linked in some manner.&lt;/p&gt;
&lt;h5&gt;Pros&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Failure tolerant by default, if a single request fails the others
    carry on processing.&lt;/li&gt;
&lt;li&gt;JS/UI layers make asynchronous calls easy, composition is a natural
    fit.&lt;/li&gt;
&lt;li&gt;Weakest form of coupling is in the UI layer - easier and cheaper to
    change.&lt;/li&gt;
&lt;li&gt;Flexible as you can create &lt;em&gt;mash ups&lt;/em&gt; that would otherwise violate
    service boundaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Cons&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Multiple requests to fetch content (four HTTP requests using the
    blog example above).&lt;/li&gt;
&lt;li&gt;Aggregation may be complex. You may need to use more than just plain
    Javascript or face complex, coupled JS.&lt;/li&gt;
&lt;li&gt;Depending on where the UI layer is stored, you may be coupled at the
    UI level due to the same framework or approaches needed across each
    service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Where Does The UI Live?&lt;/h5&gt;
&lt;p&gt;Storing the UI within each service is ideal on paper, but in practice
has some limitations. Each service can vary and iterate at its own pace
which is fantastic as long as the integration of the service remains
unchanged. Unfortunately the downside is that each service is actually
independent in terms of the UI. This means that versioning the front end
component becomes an issue. Likewise there is nothing stopping different
services using different libraries or frameworks. If the UI component
requires any server side additions this becomes even harder. For example
a host application written in one language will be incompatible with
other services if they differ. The final issue relates to storing UI
components outside of host application frameworks. Many frameworks
simply make this either impossible or very difficult to achieve.&lt;/p&gt;
&lt;p&gt;Using the host application to store the UI components side steps the
disadvantages and issues above. While you are at the mercy of the host
application to integrate each component, this is not a show stopper.
Chances are most applications have multiple views, so a single UI
component would never be reusable across applications. Additionally the
use of thin vertical slices should mean that even though the UI
component is physically separate from the service, there is no reason
why the two cannot be worked on in conjunction.&lt;/p&gt;
&lt;p&gt;A final factor to consider is that there is no reason why a hybrid
approach cannot be taken. Each service should store its own UI
component, but also allow host applications the ability to integrate.
This UI component can act as a form of dog fooding as well as providing
an excellent development and test bed. It is far easier to work and test
a small widget with an automated test than it is to exercise this within
the context of a full blown application.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Avoid the use of internal service composition - remote calls to
    third parties being the obvious exception to this rule.&lt;/li&gt;
&lt;li&gt;There is no best approach overall, the chosen solution will vary
    based on application.&lt;/li&gt;
&lt;li&gt;Server side composition has benefits, but client side UI composition
    opens up new possibilities.&lt;/li&gt;
&lt;li&gt;Client side composition seems more complicated but in reality it is
    merely different, though does require some up front planning.&lt;/li&gt;
&lt;li&gt;Default to using the services directly, only introducing a BFF if
    client requirements differ or client requirements are being forced
    upon the independent services.&lt;/li&gt;
&lt;/ul&gt;</content><category term="microservices"></category><category term="SOA"></category></entry><entry><title>DDD - Bounded Contexts</title><link href="https://blog.shaunfinglas.co.uk/2016/06/ddd-bounded-contexts.html" rel="alternate"></link><published>2016-06-14T07:25:00+02:00</published><updated>2016-06-14T07:25:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-06-14:/2016/06/ddd-bounded-contexts.html</id><summary type="html">&lt;p&gt;A single domain can grow large when applying Domain Driven Design. It
can become very hard to contain a single model when using ubiquitous
language to model the domain. Classic examples prevalent in many domains
would be &lt;code&gt;Customer&lt;/code&gt; or &lt;code&gt;User&lt;/code&gt; models. A bounded context allows you to
break down a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A single domain can grow large when applying Domain Driven Design. It
can become very hard to contain a single model when using ubiquitous
language to model the domain. Classic examples prevalent in many domains
would be &lt;code&gt;Customer&lt;/code&gt; or &lt;code&gt;User&lt;/code&gt; models. A bounded context allows you to
break down a large domain into smaller, independent contexts.&lt;/p&gt;
&lt;p&gt;In different contexts a customer may be something completely different,
depending on who you ask and how you use the model. For example, take
three bounded contexts within a typical domain that allows customer
administration, customer notifications and general reporting.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;h5&gt;Notification Context&lt;/h5&gt;
&lt;p&gt;A customer is their account id, social media accounts, email and any
marketing preferences. Anything that would be required to uniquely
identify a customer, and send a notification.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    + Id
    + Email
    + Marketing Preferences
    + Social
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Reporting Context&lt;/h5&gt;
&lt;p&gt;When reporting customers are nothing more than statistics. A unique
customer ID is more than enough just for aggregation and statistic
collection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    + Id
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Account Context&lt;/h5&gt;
&lt;p&gt;Allowing the customer to administer their account would require anything
personally related to the customer to be modelled.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    + Id
    + First Name
    + Last Name
    + Address
    + Email
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Despite the common elements such as Id and email, the other elements are
specific to the context in which the customer is used. One of the
biggest mistakes I've made by ignoring a bounded context is to see &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/dry-vs-coupling-in-production-code.html"&gt;a
common model and try to apply this
everywhere&lt;/a&gt;.
This leads to less code, but increases coupling. A single small change
in one context can cause a rippling effect. In fact the best solution is
to have a customer model per context.&lt;/p&gt;
&lt;p&gt;The result of this approach is you will end up with at least three
models using the example above. While structural duplication increases,
coupling decreases. Each context can change and evolve at its own pace.
This is a good thing. No business logic here is being duplicated, only
the model. As each context operates in its own speciality, there should
never be a case where this is problematic.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Structural duplication outside of bounded context is not a bad
    thing.&lt;/li&gt;
&lt;li&gt;Resist the urge to use a base class for common attributes. This is
    especially true if you use an ORM or anything that will couple you
    further when these models are used.&lt;/li&gt;
&lt;li&gt;Ending up with multiple models per bounded context is likely going
    to happen, embrace it.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category></entry><entry><title>Given When Then Scenarios vs Test Fixtures</title><link href="https://blog.shaunfinglas.co.uk/2016/06/given-when-then-scenarios-vs-test.html" rel="alternate"></link><published>2016-06-01T00:00:00+02:00</published><updated>2016-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-06-01:/2016/06/given-when-then-scenarios-vs-test.html</id><summary type="html">&lt;p&gt;There are two common ways of writing automated tests which apply from
unit to acceptance tests. These are typically known as test fixtures and
Given-When-Then scenarios.&lt;/p&gt;
&lt;h4&gt;Test Fixture&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Traditional method of writing tests.&lt;/li&gt;
&lt;li&gt;The common JUnit/NUnit approach. Other languages have very similar
    concepts.&lt;/li&gt;
&lt;li&gt;Single test fixture with multiple tests …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;There are two common ways of writing automated tests which apply from
unit to acceptance tests. These are typically known as test fixtures and
Given-When-Then scenarios.&lt;/p&gt;
&lt;h4&gt;Test Fixture&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Traditional method of writing tests.&lt;/li&gt;
&lt;li&gt;The common JUnit/NUnit approach. Other languages have very similar
    concepts.&lt;/li&gt;
&lt;li&gt;Single test fixture with multiple tests.&lt;/li&gt;
&lt;li&gt;Test fixture is usually named after the subject under test.&lt;/li&gt;
&lt;li&gt;Can grow large with many test cases.&lt;/li&gt;
&lt;li&gt;Works well with data driven tests.&lt;/li&gt;
&lt;li&gt;Suited to &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;solitary
    tests&lt;/a&gt;
    such as integration tests where GWT syntax would be verbose or hard
    to include.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/7748cf098415494c99ecaa0777eacacd.js"&gt;&lt;/script&gt;

&lt;h4&gt;Given-When-Then&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Behaviour driven approach (BDD style).&lt;/li&gt;
&lt;li&gt;Made popular by tools such as RSpec.&lt;/li&gt;
&lt;li&gt;Single test fixture per behaviour.&lt;/li&gt;
&lt;li&gt;Test fixtures named after the functionality being tested.&lt;/li&gt;
&lt;li&gt;Often nested within other test fixtures.&lt;/li&gt;
&lt;li&gt;Smaller test fixtures but more verbose due to fixture per
    functionality.&lt;/li&gt;
&lt;li&gt;Easy to see why a test failed due to naming convention - assertion
    message is optional.&lt;/li&gt;
&lt;li&gt;Suited to &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;sociable
    tests&lt;/a&gt;
    where the focus is on behaviour.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Given&lt;/code&gt; forms the pre-condition of the test.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;When&lt;/code&gt; performs the action.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Then&lt;/code&gt; includes one or more related assertions.&lt;/li&gt;
&lt;li&gt;GWT can be difficult to name in some cases, often more thought and
    discussion can be required around good naming conventions.&lt;/li&gt;
&lt;li&gt;Can act as useful documentation on how the code is meant to
    function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/8d5b8fbc789acbe829d06312559a5d3a.js"&gt;&lt;/script&gt;

&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;No single way of writing automated tests is better.&lt;/li&gt;
&lt;li&gt;Favour single test fixtures for integration tests.&lt;/li&gt;
&lt;li&gt;The core of your tests can use GWT style.&lt;/li&gt;
&lt;li&gt;Mix and match where appropriate however.&lt;/li&gt;
&lt;li&gt;Your choice of tooling and language may influence your approach.&lt;/li&gt;
&lt;/ul&gt;</content><category term="testing"></category><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Foreign Key Constraints and Microservices</title><link href="https://blog.shaunfinglas.co.uk/2016/05/foreign-key-constraints-and.html" rel="alternate"></link><published>2016-05-01T00:00:00+02:00</published><updated>2016-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-05-01:/2016/05/foreign-key-constraints-and.html</id><summary type="html">&lt;p&gt;Database constraints when used in relational databases are great. They
ensure data integrity at the lowest level. No one would argue against
using them in practice. Essentially constraints can be thought of as
assertions against your database. Rules such as requirement, default
values and foreign key constraints double check your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Database constraints when used in relational databases are great. They
ensure data integrity at the lowest level. No one would argue against
using them in practice. Essentially constraints can be thought of as
assertions against your database. Rules such as requirement, default
values and foreign key constraints double check your use of the
database. This ensures your application is interacting in a sane manner.
Databases often out live applications therefore constraints also ensure
integrity long after the application has been replaced or modified.&lt;/p&gt;
&lt;h4&gt;Distributed Systems&lt;/h4&gt;
&lt;p&gt;Distributed systems change how foreign key constraints should be
considered. As distributed systems own their data, each piece of data
that is mastered by a single service should ensure integrity via foreign
key constraints. However outside of this boundary the use of foreign
keys should be avoided. This sounds disturbing at first. Especially
given the traditional approach of a single system backed by a single
database.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Consider a blog post service that provides a selection of posts. The
service would be responsible for everything related to blog posts, but
nothing more. The comments for the site are a separate service, yet
there is clearly a link between posts and comments. For example, in
order to display both posts and comments a link is needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- tblPosts (blog database)
    + Id
    + Title
    + Date
    + Body
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each post would store data related to the blog post itself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- tblComments (comment database)
    + Id
    + PostId
    + AuthorId
    + Message
    + Date
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The comment service would include a reference to each post that the
comment is linked to. In this case both &lt;code&gt;PostId&lt;/code&gt; and &lt;code&gt;AuthorId&lt;/code&gt; would
not use foreign key integrity as other services master this data.&lt;/p&gt;
&lt;p&gt;If this was a single database both &lt;code&gt;PostId&lt;/code&gt; and &lt;code&gt;AuthorId&lt;/code&gt; could enforce
integrity, however as each service is independent this is not possible.
With physically separate databases this lack of link is quite obvious.
Working around this in application code would introduce subtle bugs, and
temporal coupling. Such solutions are best avoided.&lt;/p&gt;
&lt;h4&gt;Check Formats&lt;/h4&gt;
&lt;p&gt;When using the comment service, this approach leaves you with very
little work to do other than simple format checks. The format of a
&lt;code&gt;PostId&lt;/code&gt; and &lt;code&gt;AuthorId&lt;/code&gt; should be known, so the comment service can
validate at this level. The core benefit is both the blog post service
and comment service are highly decoupled. The comments could be changed
to another service altogether, even a 3rd party provider, yet other
services would remain unaware.&lt;/p&gt;
&lt;h4&gt;Valid Format, Invalid Data&lt;/h4&gt;
&lt;p&gt;Format checks will only provide so much value. There is nothing stopping
a valid request for a blog post that does not exist. In cases such as
this there are a few options. One is to provide a compensating action.
Periodically delete any comments that do not have corresponding blog
posts. An alternative would be to rely upon events. Only insert comments
when a blog post is added, likewise when the service publishes the fact
a post has been removed, any associated comments could be deleted.&lt;/p&gt;
&lt;h4&gt;Many Services, Single Database&lt;/h4&gt;
&lt;p&gt;Confusion and resistance around the use of foreign keys is often found
when transitioning from a single database, to a single database operated
upon by multiple systems. Teams adopting microservices find themselves
in this dilemma usually when a large, legacy database is involved. In
these scenarios existing constraints may need to be removed, or
modified. Another technique is to have the independent services add
dummy data in order to pass database constraints. While this is far from
ideal, this pragmatic solution can work well while databases are being
separated.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use foreign key constraints when using a single database via a
    single application.&lt;/li&gt;
&lt;li&gt;Modify, replace or drop constraints when multiple services are
    writing to a single database.&lt;/li&gt;
&lt;li&gt;Independent services should own their own data. Only enforce
    integrity within service boundaries.&lt;/li&gt;
&lt;li&gt;Outside of service boundaries, use format checks to prevent errors.&lt;/li&gt;
&lt;li&gt;Rely on compensating actions or events for data management.&lt;/li&gt;
&lt;/ul&gt;</content><category term="microservices"></category><category term="distributed-systems"></category></entry><entry><title>Past Mistakes - Out of Process Commands</title><link href="https://blog.shaunfinglas.co.uk/2016/05/past-mistakes-out-of-process-commands.html" rel="alternate"></link><published>2016-05-01T00:00:00+02:00</published><updated>2016-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-05-01:/2016/05/past-mistakes-out-of-process-commands.html</id><summary type="html">&lt;p&gt;Some of the best lessons you can learn are from failure. I figured a
series on mistakes I've made in the past would highlight where I went
wrong and more importantly what to remember going forward. These real
life examples vary from my early days of programming all the way …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some of the best lessons you can learn are from failure. I figured a
series on mistakes I've made in the past would highlight where I went
wrong and more importantly what to remember going forward. These real
life examples vary from my early days of programming all the way up
until present day.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I once wrote a feature that sent email to users on their behalf. On
localhost this was fine. Fast, stable and good enough to get the job
done.&lt;/p&gt;
&lt;p&gt;Despite early successes, under load in a live environment, things were
different. Sometimes the process would out right fail, requiring the
user to retry. Other times it would be slow to process. This meant the
users browser would hang while the email was being sent.&lt;/p&gt;
&lt;p&gt;It was hard to replicate these problems. The actual code itself was
pretty simple, there was nothing to optimize it seemed.&lt;/p&gt;
&lt;h4&gt;Mistakes&lt;/h4&gt;
&lt;p&gt;The core mistake was performing an operation out of process from within
the life cycle of a HTTP request.&lt;/p&gt;
&lt;p&gt;When sending the email was slow, the HTTP response was slow as the
thread was blocked. This was blindingly obvious after the fact.&lt;/p&gt;
&lt;p&gt;Frustratingly actually demonstrating or testing this feature was hard.
Locally the server was nearby so latency was less. This started to
introduce other red herrings such as was the server misconfigured?&lt;/p&gt;
&lt;h4&gt;What to do Instead&lt;/h4&gt;
&lt;p&gt;After the user has requested an email, record this fact and simply
display a success message. Do this as quickly and simply as possible.
While the message states an email has been sent this is not strictly
true.&lt;/p&gt;
&lt;p&gt;Instead the act of requesting the email is recorded. Ideally via a
message queue or other durable storage solution. A separate service then
monitors this queue and periodically sends out emails.&lt;/p&gt;
&lt;p&gt;Users will not care if an email lands a few seconds or minutes after the
fact. Additionally if anything goes wrong during this process no data is
lost. The user will get their email eventually. Most e-commerce sites
work in this exact manner.&lt;/p&gt;
&lt;p&gt;This approach works great when commands from users cannot and should not
fail. Examples such as processing payments or key user interactions
would be excellent candidates.&lt;/p&gt;
&lt;p&gt;Unfortunately not all out of process requests can be avoided. HTTP
queries to retrieve data being one example. This cannot be faked. In
these cases minimize the number and rely on other techniques, such as
HTTP's excellent caching policies to reduce the affect on the system.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Never perform commands that cannot fail out of process from within
    the same HTTP transaction.&lt;/li&gt;
&lt;li&gt;Fear all out of process calls - they are costly, prone to failure
    and can cause chaos with your systems performance. Reduce and
    replace where possible.&lt;/li&gt;
&lt;li&gt;When commands that should not fail are required, use a message queue
    to record the command prior to processing them.&lt;/li&gt;
&lt;li&gt;Rely on HTTP caching policies to reduce the effect of queries that
    cannot be avoided.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category><category term="past-mistakes-series"></category></entry><entry><title>You Rarely Need Custom Exceptions</title><link href="https://blog.shaunfinglas.co.uk/2016/05/you-rarely-need-custom-exceptions.html" rel="alternate"></link><published>2016-05-01T00:00:00+02:00</published><updated>2016-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-05-01:/2016/05/you-rarely-need-custom-exceptions.html</id><summary type="html">&lt;p&gt;Implementing custom exceptions usually gives a hint as to why you rarely
need custom implementations. They are often nothing more than sub
classes where the only difference is the type name and containing
message.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/b7341379033d951aa88d2b7ed28aaba5.js"&gt;&lt;/script&gt;

&lt;p&gt;In this C# example there is a lot of code for &lt;em&gt;nothing&lt;/em&gt;. When checking
logs or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Implementing custom exceptions usually gives a hint as to why you rarely
need custom implementations. They are often nothing more than sub
classes where the only difference is the type name and containing
message.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/b7341379033d951aa88d2b7ed28aaba5.js"&gt;&lt;/script&gt;

&lt;p&gt;In this C# example there is a lot of code for &lt;em&gt;nothing&lt;/em&gt;. When checking
logs or handling bugs you will read the message and the stack trace. The
first line containing a bespoke name rarely matters. Within the code
throwing the exception very little context is gained from the type of
exception - instead most of the details will be present within the error
message.&lt;/p&gt;
&lt;p&gt;Each custom exception you introduce adds overhead from source lines of
code (SLOC) to compilation and execution.&lt;/p&gt;
&lt;h4&gt;Alternative&lt;/h4&gt;
&lt;p&gt;Simply do not create custom exceptions except in the rarest of
occasions. Instead rely on the standard library of the language you are
using.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/o9pEzgHorH0"&gt;Take Python as an example&lt;/a&gt; [Video].
\~200,000 lines of code yet only \~165 exceptions. This works out at
about one exception for \~1200 lines of code.&lt;/p&gt;
&lt;p&gt;If battle hardened and widely used standard libraries need only a
fraction of the amount of custom exceptions, what makes your tiny CRUD
app so special that it needs a namespace dedicated to handfuls of
bespoke implementations?&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Rather than throwing NoBlogPostsFoundException use a
&lt;a href="https://msdn.microsoft.com/en-us/library/system.web.httpexception%28v=vs.110%29.aspx"&gt;HttpException&lt;/a&gt;
with a useful message. Instead of BlogPostConfigurationException use
&lt;a href="https://msdn.microsoft.com/en-us/library/system.configuration.configurationerrorsexception%28v=vs.110%29.aspx"&gt;ConfigurationErrorsException&lt;/a&gt;.
Trying to add a comment to a post that is not published? Use an
&lt;a href="https://msdn.microsoft.com/en-us/library/system.invalidoperationexception%28v=vs.110%29.aspx"&gt;InvalidOperationException&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The downside to this suggestion is knowledge. You need to know what
exception to use and more importantly where to find it. Consulting
documentation or simple digging around will often yield what you need.
As a rule try and default to reusing an exception over creating a new
one.&lt;/p&gt;
&lt;p&gt;The benefit of this approach is less code, and the removal of
placeholder classes where the only thing that differs is the message. To
ensure nothing is lost in communicating intent, care must be taken to
ensure the message is useful, concise and clear.&lt;/p&gt;
&lt;h4&gt;Custom Exceptions&lt;/h4&gt;
&lt;p&gt;There are two exceptions (see what I did there) to this rule.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you explicitly need to handle a certain scenario and you cannot
    allow other unhandled exceptions to trigger that code path. In this
    case a custom exception may be valid. As usual question whether an
    exception is necessary at all, it may be possible to control this
    with an explicit code path.&lt;/li&gt;
&lt;li&gt;When the exception has some form of behaviour. This tends to be
    common with frameworks where when an exception of type X changes the
    flow but also carries out some action such as building up an error
    response.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In these cases this behaviour belonging with the exception makes sense.
Generally most code bases treat exceptions equally. In other words any
exception triggers a failure path, meaning the type of the exception
does not matter in most cases.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Reuse exceptions from the standard library, chances are there is one
    fit for the job already.&lt;/li&gt;
&lt;li&gt;Only introduce custom exceptions if the scenario is exceptional and
    needs to be handled uniquely.&lt;/li&gt;
&lt;li&gt;Put effort into ensuring the message of an exception is useful -
    messages and the stack trace are the most important elements.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Your Job Isn't to Write Code</title><link href="https://blog.shaunfinglas.co.uk/2016/05/your-job-isnt-to-write-code.html" rel="alternate"></link><published>2016-05-01T00:00:00+02:00</published><updated>2016-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-05-01:/2016/05/your-job-isnt-to-write-code.html</id><summary type="html">&lt;p&gt;Solving problems is the role of software developers first and foremost.
The most interesting aspect is that in many cases it is possible to
perform this role without writing a single line of code.&lt;/p&gt;
&lt;h4&gt;Low Tech&lt;/h4&gt;
&lt;p&gt;I once worked with a digital dashboard which monitored applications. One
of the yet …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Solving problems is the role of software developers first and foremost.
The most interesting aspect is that in many cases it is possible to
perform this role without writing a single line of code.&lt;/p&gt;
&lt;h4&gt;Low Tech&lt;/h4&gt;
&lt;p&gt;I once worked with a digital dashboard which monitored applications. One
of the yet to be implemented features was a key to highlight which each
chart related to. During this period many employees would ask which
graph related to which feature. The solution was a few weeks a way so as
a temporary fix I stuck a post it note to the screen. This was by no
means the solution, but it was good enough for the time being. The
questions went away and eventually the dash was updated to include a
digital version. Total lines of code? Zero.&lt;/p&gt;
&lt;h4&gt;Problem Solving without a Computer&lt;/h4&gt;
&lt;p&gt;A common experience that many developers encounter is solving a problem
while not actually at the computer, programming. In fact this technique
of simply taking a break such as going for a walk can yield some
impressive results. One of my fondest memories of this trick was using
shampoo in the shower to walk through a buggy A* implementation using
the bathroom tiles. After returning to the task sometime after, the
stupid mistake stood out. Lines of code to figure out the fix? Zero.&lt;/p&gt;
&lt;h4&gt;Deferral&lt;/h4&gt;
&lt;p&gt;Just the other week I began furiously updating an existing application
to change how a core feature worked. The solution was not going to be
quick, but it seemed like a good idea. About halfway in I reverted the
changes. After further thought it turns out there was a much better
solution. One that would not introduce risk to the current project's
goals. Total lines of code? Minus one hundred, give or take.&lt;/p&gt;
&lt;h4&gt;Goals over Code&lt;/h4&gt;
&lt;p&gt;This lack of code is not a bad thing. In all three examples the goal was
complete. You can solve problems with a single line, or thousands, it
actually does not matter. If you switch your thinking to focus on
completing goals or hitting targets, you are still rewarded with a
feeling of accomplishment. The slack time you gain can simply be
redirected to other areas or personal improvement.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;p&gt;Many wise developers have said this before. The role of a software
developer is to solve problems, not write code. This is not new,
unfortunately a younger, naive version of myself ignored this advice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus on solving business/customer problems, not writing code.&lt;/li&gt;
&lt;li&gt;Sometimes you'll write one line of code, others thousands.&lt;/li&gt;
&lt;li&gt;Not all solutions require code to complete.&lt;/li&gt;
&lt;li&gt;Focus on hitting goals, not the feeling of productivity writing code
    can give.&lt;/li&gt;
&lt;/ul&gt;</content><category term="developers"></category><category term="retro"></category></entry><entry><title>Legacy Code is Just Code</title><link href="https://blog.shaunfinglas.co.uk/2016/04/legacy-code-is-just-code.html" rel="alternate"></link><published>2016-04-19T16:23:00+02:00</published><updated>2016-04-19T16:23:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-19:/2016/04/legacy-code-is-just-code.html</id><summary type="html">&lt;p&gt;Try and define legacy code. &lt;a href="https://www.amazon.co.uk/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/275-5610177-1468962"&gt;Working Effectively With Legacy
Code&lt;/a&gt;
states it is simply code with no tests. This is an almost perfect
definition, however it is quite easy to have code that is covered by
automated tests, yet is still considered to be legacy. Poor quality, or
missing test …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Try and define legacy code. &lt;a href="https://www.amazon.co.uk/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/275-5610177-1468962"&gt;Working Effectively With Legacy
Code&lt;/a&gt;
states it is simply code with no tests. This is an almost perfect
definition, however it is quite easy to have code that is covered by
automated tests, yet is still considered to be legacy. Poor quality, or
missing test cases can provide a false sense of security.&lt;/p&gt;
&lt;h4&gt;Legacy in the Real World&lt;/h4&gt;
&lt;p&gt;Legacy code is scary to change or work with. Typically it is stuck using
an old language or framework which is too expensive to upgrade. Most
notable legacy code is often considered old. Developers or teams that no
longer exist wrote it and have long since moved on. Hence legacy code is
often ignored or over looked by the wise. To be blunt, most developers
consider legacy code to be crap.&lt;/p&gt;
&lt;h4&gt;Just Code&lt;/h4&gt;
&lt;p&gt;In the end legacy code is just code. It should be treated and given the
same amount of respect as your new and shiny solution. In fact legacy
code is more than that, it's proven. Unlike clean code you have
stagnating in your repository, legacy code has lived and breathed in
production. It may be far from ideal, but it works and it does the job.
Learn from it and refactor where possible. In cases where refactoring is
not possible, use specific techniques for dealing with legacy code
(exapanded in future posts).&lt;/p&gt;
&lt;p&gt;In reality software developers leave features in their place, not code.
Much of the code I have written can/should/will be replaced but the
features live on.&lt;/p&gt;
&lt;p&gt;The lesson here is to simply treat all code as equal regardless of its
status - legacy or not.&lt;/p&gt;</content><category term="programming"></category><category term="retro"></category></entry><entry><title>Dependency Injection for Common Global Dependencies</title><link href="https://blog.shaunfinglas.co.uk/2016/04/dependency-injection-for-common-global.html" rel="alternate"></link><published>2016-04-13T07:09:00+02:00</published><updated>2016-04-13T07:09:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-13:/2016/04/dependency-injection-for-common-global.html</id><summary type="html">&lt;p&gt;The use of &lt;a href="https://blog.shaunfinglas.co.uk/2016/03/singletons-and-singleton-lifestyle.html"&gt;singletons can often be replaced by simply adjusting scoping
of
objects&lt;/a&gt;.
The vast majority of dependencies fit this pattern, with a few
exceptions such as DateTime instances, or logging.&lt;/p&gt;
&lt;p&gt;Sometimes you just need these dependencies everywhere. You can find
yourself passing these dependencies down into the deep …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The use of &lt;a href="https://blog.shaunfinglas.co.uk/2016/03/singletons-and-singleton-lifestyle.html"&gt;singletons can often be replaced by simply adjusting scoping
of
objects&lt;/a&gt;.
The vast majority of dependencies fit this pattern, with a few
exceptions such as DateTime instances, or logging.&lt;/p&gt;
&lt;p&gt;Sometimes you just need these dependencies everywhere. You can find
yourself passing these dependencies down into the deep depths of your
code base. Such changes are often dangerous, time consuming and
undesirable.&lt;/p&gt;
&lt;h4&gt;DateTime&lt;/h4&gt;
&lt;p&gt;For a while the use of some date/time abstraction was my default
approach to handling dates and times. This fake clock or calendar
instance when combined with DI at the lowest level does actually work.
However if we stop and think about the abstraction it is clearly
unnecessary in many cases. Unless your domain is dealing with date and
times explicitly, you don't really need an abstraction. In other words,
other than the system where the code is running when or why would you
provide a different implementation?&lt;/p&gt;
&lt;p&gt;The approach taken as part of the &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;example within the Dependency
Elimination
Principle&lt;/a&gt;
is my current solution to date/times and DI. This is still dependency
injection, except the value is provided, not the method of obtaining the
value. This is essentially one of the benefits of functional
programming.&lt;/p&gt;
&lt;h4&gt;Logging&lt;/h4&gt;
&lt;p&gt;All systems need some form of logging. Commonly either the standard
library or a highly rated logging framework is used. The general advice
has been to use the logging component directly, rather than providing
your own abstraction. Most frameworks already provide interfaces or base
classes that make this easy to achieve.&lt;/p&gt;
&lt;p&gt;Even so logging suffers the same issue as date/times when it comes to
DI. You often need the logging component everywhere, whether it is
simply to pass on to other services.&lt;/p&gt;
&lt;p&gt;Logging and DI generally do not go well together. Instead simple use the
logging instance directly. A good logging framework would be fast, so
any automated tests will not notice the difference. Likewise whether
logging is configured or not, this should not cause tests to fail. In
summary, not every object has to be provided via dependency injection.
Loggers being a prime example.&lt;/p&gt;
&lt;p&gt;Due to this directly using a logging instance is the preferred approach.
Do not rely on DI. However &lt;a href="https://msdn.microsoft.com/en-us/library/dn440729%28v=pandp.60%29.aspx"&gt;semantic or structured
logging&lt;/a&gt;
does change this suggestion as the use of a domain explicit interface
can provide benefits. Semantic logging will be expanded in a future
post.&lt;/p&gt;
&lt;h4&gt;Others&lt;/h4&gt;
&lt;p&gt;Date/Time and Logging are the two most common global dependencies. The
majority of all other dependencies can and probably should be satisfied
by traditional DI where possible. As always each dependency should be
validated prior to introduction. It may be possible to either &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;eliminate
or replace the component in
question&lt;/a&gt;.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Singleton's and the Singleton Lifestyle</title><link href="https://blog.shaunfinglas.co.uk/2016/03/singletons-and-singleton-lifestyle.html" rel="alternate"></link><published>2016-04-01T00:00:00+02:00</published><updated>2016-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-01:/2016/03/singletons-and-singleton-lifestyle.html</id><summary type="html">&lt;p&gt;&lt;a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/"&gt;The death of testability and the lack of
isolation&lt;/a&gt;
make the singleton pattern a relic of times gone by. Rarely have I had a
real need to code a singleton since my first year of university. Most
decisions to use a singleton boil down to scoping issues.&lt;/p&gt;
&lt;h4&gt;Singleton&lt;/h4&gt;
&lt;p&gt;Assume a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/"&gt;The death of testability and the lack of
isolation&lt;/a&gt;
make the singleton pattern a relic of times gone by. Rarely have I had a
real need to code a singleton since my first year of university. Most
decisions to use a singleton boil down to scoping issues.&lt;/p&gt;
&lt;h4&gt;Singleton&lt;/h4&gt;
&lt;p&gt;Assume a game requires a single instance of a rendering component. In
this example configuring and initialising the renderer may be expensive.
We only want to do this once.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/931913cda1df6d3a5eb2.js"&gt;&lt;/script&gt;

&lt;p&gt;While this singleton renderer solves the problem of instantiating more
than once it suffers from the fact there is only ever one instance. If
we want multiple renderers such as a console debugger we are out of
luck. Testability is also lost. If we wish to exercise the Game, we need
to provide and use a real rendering component.&lt;/p&gt;
&lt;h4&gt;Static Classes&lt;/h4&gt;
&lt;p&gt;Or class instances give you the same advantages and disadvantages of
singletons. You only have one instance and you can access it easily. One
big difference is that unlike singletons you cannot provide static
instances as arguments. In practice this is rarely a problem given you
have easy access to the instance anyway. You should treat static classes
as suspiciously as singletons. However static classes are not bad. &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/static-code.html"&gt;They
do have uses&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/1ad58d37ba4d4d55a01b.js"&gt;&lt;/script&gt;

&lt;p&gt;The renderer is now a static class. The same disadvantage as the
singleton remains. We are always stuck with a single instance.&lt;/p&gt;
&lt;h4&gt;Singleton Lifestyle&lt;/h4&gt;
&lt;p&gt;When using DI you need to consider lifestyle. Singleton lifestyle is one
of the most useful. Do not be confused with the Singleton pattern.
Despite the name, singleton lifestyle is purely a scoping issue.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/457a3b37b2c9cb16e960.js"&gt;&lt;/script&gt;

&lt;p&gt;By adjusting the scoping of the renderer, the game can now be provided
with a single instance. Any component from the game down is unaware of
this fact, they simple interact with a rendering component. If we were
to provide a composite of rendering components the game would be
unaware. This change of scope provides the benefits of a singleton. One
area that has been lost is the lazy initialisation of the renderer which
may or may not be an issue.&lt;/p&gt;
&lt;p&gt;DI does not solve all problems however. &lt;a href="https://blog.shaunfinglas.co.uk/2016/04/dependency-injection-for-common-global.html"&gt;Sometimes dependencies are
global&lt;/a&gt;.
The likes of date/time or logging spring to mind. In these cases
&lt;a href="https://blog.shaunfinglas.co.uk/2016/04/dependency-injection-for-common-global.html"&gt;alternative solutions
exist&lt;/a&gt;.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Project Setup Tax</title><link href="https://blog.shaunfinglas.co.uk/2016/04/project-setup-tax.html" rel="alternate"></link><published>2016-04-01T00:00:00+02:00</published><updated>2016-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-01:/2016/04/project-setup-tax.html</id><summary type="html">&lt;p&gt;With microservices gaining popularity, one consideration prior to
adoption is new project setup. In fact this statement holds true for any
new project that you decide to create.&lt;/p&gt;
&lt;p&gt;Each new project requires at a minimum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source control - somewhere to actually store the code.&lt;/li&gt;
&lt;li&gt;A project base - API, executable, library, application …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;With microservices gaining popularity, one consideration prior to
adoption is new project setup. In fact this statement holds true for any
new project that you decide to create.&lt;/p&gt;
&lt;p&gt;Each new project requires at a minimum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source control - somewhere to actually store the code.&lt;/li&gt;
&lt;li&gt;A project base - API, executable, library, application etc.&lt;/li&gt;
&lt;li&gt;Users, accounts and permissions.&lt;/li&gt;
&lt;li&gt;Build configuration - in order to compile, package and run tests.&lt;/li&gt;
&lt;li&gt;Deployment and installation - to a production like environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember this is all before you write a single line of code.&lt;/p&gt;
&lt;p&gt;Automating as much of this away does help. Templates, conventions,
containers or similar can assist. Still nothing is free. This all
requires maintenance regardless of how you choose to optimize the
creation of a new project.&lt;/p&gt;
&lt;p&gt;When weighing up decisions about a separate project, always factor in
the project setup tax. In my experience this tends to take longer than
expected. Often it is very easy to forget various project conventions,
configuration options or security concerns.&lt;/p&gt;
&lt;p&gt;The lesson here is to never underestimate the time and effort required
in starting a new project. Always allocate more time. Better yet,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/06/do-you-really-need-microservice.html"&gt;question if the introduction of a new project is even
required&lt;/a&gt;.&lt;/p&gt;</content><category term="microservices"></category><category term="retro"></category></entry><entry><title>X% of Configuration is Never Used</title><link href="https://blog.shaunfinglas.co.uk/2016/04/x-of-configuration-is-never-used.html" rel="alternate"></link><published>2016-04-01T00:00:00+02:00</published><updated>2016-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-01:/2016/04/x-of-configuration-is-never-used.html</id><summary type="html">&lt;p&gt;Code configuration is essentially for the likes of URLs, credentials or
other per deployable settings. Sadly configuration seems to fall into
examples where there is simply too much configuration, or the system has
so many configuration points the actual code becomes far too complex for
its own good.&lt;/p&gt;
&lt;h4&gt;Too Much …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;Code configuration is essentially for the likes of URLs, credentials or
other per deployable settings. Sadly configuration seems to fall into
examples where there is simply too much configuration, or the system has
so many configuration points the actual code becomes far too complex for
its own good.&lt;/p&gt;
&lt;h4&gt;Too Much Config&lt;/h4&gt;
&lt;p&gt;I once worked on a system with in excess of six hundred different
configuration points. In reality all but a handful of these would ever
actually need changing. Most configuration is added to enable &lt;em&gt;anyone&lt;/em&gt;
to make the change. Ironically if these configuration points do need
changing, developers need to do it. The business or non technical
individuals will never change settings. In this scenario you would need
to actually test all six hundred different combinations of
configuration. 1 on, 599 off, 2 on, 598 off and so on - this is not
ideal nor realistic.&lt;/p&gt;
&lt;h4&gt;Configurable Systems are Complex&lt;/h4&gt;
&lt;p&gt;One of the earliest project mistakes I can remember involved creating a
system that could be configured by &lt;em&gt;anyone&lt;/em&gt;. A simple task became a
several day exploration in failure. Each quarter a minor change to a
static ASP page was required. This involved a date and some minor
alterations to some financial wording for legal requirements. Instead of
simply making the change I started building a custom CMS. A form
overlayed the content allowing anyone to make the change and generate
the page. It worked a treat technically, except it never saw the light
of day. The business would not use it. Numerous individuals required
approval before the change could be put live; security, legal, branding
and several more. Also using the form still required some implicit
knowledge of HTML. At the end of this we threw the prototype away and I
made the change in a matter of minutes. My mistake here was building a
solution that was not required.&lt;/p&gt;
&lt;h4&gt;Implementation&lt;/h4&gt;
&lt;p&gt;When it comes to implementing configuration a common mistake is to rely
upon the method of obtaining the value, rather than the value itself.
Additionally the use of some form of abstraction is often mistakenly
used such as IConfiguration.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;The solution is to instead provide the configuration value, not the
means of obtaining
it&lt;/a&gt;.
This can be done either via a constructor or directly to the method.
This allows the configuration to be provided in different manners such
as from a DB or file, with no code changes apart from the composition
root. Such solutions are easily testable and open to modification.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/98f6e56488563d92fb2b54266fe5f3c4.js"&gt;&lt;/script&gt;

&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Only add configuration for values that will certainly change between
    deployable units such as credentials or URLs.&lt;/li&gt;
&lt;li&gt;Leave everything else where it belongs, either in the source file
    next to a class, in a method or whatever is easiest. If it needs to
    change, just make the change when the time comes. Chances are it
    will never come.&lt;/li&gt;
&lt;li&gt;If a configuration value is changed, run your automated tests (or a
    subset) against the deployable unit.&lt;/li&gt;
&lt;li&gt;A configuration change should be treated as a code change.&lt;/li&gt;
&lt;li&gt;The business will never change your configuration - that's a
    technical task.&lt;/li&gt;
&lt;li&gt;Provide configurations values, not the means of obtaining them.&lt;/li&gt;
&lt;li&gt;Rely upon convention over configuration as much as possible.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="code-quality"></category></entry><entry><title>Pulling the Plug on Date Time Parsing</title><link href="https://blog.shaunfinglas.co.uk/2016/03/pulling-plug-on-date-time-parsing.html" rel="alternate"></link><published>2016-03-30T06:49:00+02:00</published><updated>2016-03-30T06:49:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-03-30:/2016/03/pulling-plug-on-date-time-parsing.html</id><summary type="html">&lt;p&gt;Date/time logic is hard. Throw in time zones along with daylight saving
and it's even harder. Recently a suite of tests that had happily been
running for months started failing. There were no code changes and all
the tests were somehow related to date/time ranges.&lt;/p&gt;
&lt;p&gt;Despite this the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Date/time logic is hard. Throw in time zones along with daylight saving
and it's even harder. Recently a suite of tests that had happily been
running for months started failing. There were no code changes and all
the tests were somehow related to date/time ranges.&lt;/p&gt;
&lt;p&gt;Despite this the production code was functioning as expected. It turns
out the API was explicitly setting the locale to use &lt;code&gt;en-GB&lt;/code&gt;. However
the suite of tests were not.&lt;/p&gt;
&lt;p&gt;The fix was simple. Prior to the test fixtures executing, explicitly set
the locale. In order to test this assumption and see the tests pass, a
temporary change on the development machine was required.&lt;/p&gt;
&lt;p&gt;The locale was set on the development machine to another region. In this
case setting to &lt;code&gt;en-US&lt;/code&gt; was enough to cause the tests to fail. After the
code change the tests passed. Any locale can be used as long as the date
format differs.&lt;/p&gt;
&lt;p&gt;This idea is pretty easy, and is very close to my technique of &lt;a href="https://blog.shaunfinglas.co.uk/2012/05/achieving-more-isolated-unit-testing.html"&gt;pulling
the plug on automated
tests&lt;/a&gt;.
The test suite can now be run on any machine, even those incorrectly
configured and we can be sure the tests will still pass.&lt;/p&gt;
&lt;p&gt;Going forward for any date/time tests I will make an active decision to
temporarily change my regional settings. With more codebases utilizing
the cloud, relying on implicit configuration should be avoided where
possible. In fact I would bet a large sum of money that many codebases
out there would fail this temporary locale change. Give it a go - pull
the plug.&lt;/p&gt;</content><category term="testing"></category><category term="programming"></category><category term="unit-testing"></category></entry><entry><title>Best of Breed</title><link href="https://blog.shaunfinglas.co.uk/2016/03/best-of-breed.html" rel="alternate"></link><published>2016-03-01T00:00:00+01:00</published><updated>2016-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-03-01:/2016/03/best-of-breed.html</id><summary type="html">&lt;p&gt;Spikes are one of the best ways to aid the design of software. In some
cases spike solutions can open more questions than they solve. The use
of a technique known as &lt;em&gt;Best of Breed&lt;/em&gt; can assist when this arises.&lt;/p&gt;
&lt;p&gt;Rather than producing a single spike, produce several. Either
individually …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Spikes are one of the best ways to aid the design of software. In some
cases spike solutions can open more questions than they solve. The use
of a technique known as &lt;em&gt;Best of Breed&lt;/em&gt; can assist when this arises.&lt;/p&gt;
&lt;p&gt;Rather than producing a single spike, produce several. Either
individually or with other developers working on a spike each. Each
solution can then be compared and contrasted. The best parts of each
solution can then be combined. Best of Breed is named for its likeness
to genetics where the best genes win out for future generations as part
of the process of evolution.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Spike solution A has an excellent way to handle future requirements due
to the open and closed approach taken. Solution B solves the data access
problem in an elegant manner. Both solutions have good components.
Simply combine the solutions into a single approach. This results in
code that contains extensibility and good data access patterns.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Neither standalone solution would have been as good as this hybrid
    or best of breed.&lt;/li&gt;
&lt;li&gt;Multiple developers have intimate knowledge of the code thanks to
    collective code ownership.&lt;/li&gt;
&lt;li&gt;Allows experimentation - go wild with multiple solutions trying out
    techniques or ideas you would not normally experiment with. Safe in
    the knowledge there is more than one solution to any problem.&lt;/li&gt;
&lt;li&gt;Provides a learning platform. It's always good to see how and why
    others solve problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best of Breed provides benefits above and beyond traditional spike
solutions. With more than one developer the addition of multiple spikes
can be developed in parallel. For individuals the construction of
further solutions should be evaluated on a case by case basis. Single
developers may prefer to evolve a single spike during various phases.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The term &lt;em&gt;Best of Breed&lt;/em&gt; was introduced to myself by &lt;a href="https://twitter.com/BlueReZZ"&gt;Paul
Shannon&lt;/a&gt;.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Eating your own Dog Food</title><link href="https://blog.shaunfinglas.co.uk/2016/03/eating-your-own-dog-food.html" rel="alternate"></link><published>2016-03-01T00:00:00+01:00</published><updated>2016-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-03-01:/2016/03/eating-your-own-dog-food.html</id><summary type="html">&lt;p&gt;Also known as &lt;em&gt;dog fooding&lt;/em&gt;. It's an odd term, &lt;a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food#Origin_of_the_term"&gt;with roots dating back
to 70's adverts and the even more
bizarre&lt;/a&gt;.
In software development the idea is simple. Use the software you produce
to make it better. This can be taken to the extreme with examples such
as Notepad++ being …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Also known as &lt;em&gt;dog fooding&lt;/em&gt;. It's an odd term, &lt;a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food#Origin_of_the_term"&gt;with roots dating back
to 70's adverts and the even more
bizarre&lt;/a&gt;.
In software development the idea is simple. Use the software you produce
to make it better. This can be taken to the extreme with examples such
as Notepad++ being built with Notepad++, or the Github team using Github
internally. These examples mean the product is as good as it can be from
real life use.&lt;/p&gt;
&lt;h4&gt;API's&lt;/h4&gt;
&lt;p&gt;Dog fooding works great for APIs. When the boundary of a system is an
API building a fake test UI is a wise move. This integration acts as if
you were the user. If you can solve the basic uses cases that your
integrators need you can be confident the API is fit for purpose.
Integration highlights problems and areas for improvement. Building a
test UI is a very easy step to carry out which is also useful for
demonstrating and documenting the API to others.&lt;/p&gt;
&lt;p&gt;The danger of not eating your own dog food when producing APIs is
detachment from what your users will be trying to do, versus what you
implement. In many cases this means that while your API may be fully
compliant with the latest standards, framework and technology, it is not
actually fit for purpose. Naturally this will incur overhead when the
users raise issues that need resolving, often late in the day.&lt;/p&gt;
&lt;h4&gt;Libraries&lt;/h4&gt;
&lt;p&gt;It is often tempting to extract a library for a common task. As always
&lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;try to fight this urge until at least the third
time&lt;/a&gt;.
As well as this try to use the library yourself before releasing. If you
can use this library in at least three places you very well may have a
successful piece of software. If the answer to this question is no, the
library may not be as useful as you think.&lt;/p&gt;
&lt;p&gt;Libraries that have not been built using dog fooding are often clunky,
unintuitive and frustrating to use. Every developer could name numerous
examples that would fit this criteria, but the opposite is also true.
The use of dog fooding tends to force libraries into the later.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Write Assertions First</title><link href="https://blog.shaunfinglas.co.uk/2016/03/write-assertions-first.html" rel="alternate"></link><published>2016-03-01T00:00:00+01:00</published><updated>2016-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-03-01:/2016/03/write-assertions-first.html</id><summary type="html">&lt;p&gt;Writing a test as part of the TDD process is simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many individuals recommend the process be reversed. Write assertions
first. Then write the steps to perform the action. Followed by the
required setup to complete the action.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Simplicity&lt;/h4&gt;
&lt;p&gt;You will write just enough …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Writing a test as part of the TDD process is simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many individuals recommend the process be reversed. Write assertions
first. Then write the steps to perform the action. Followed by the
required setup to complete the action.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Simplicity&lt;/h4&gt;
&lt;p&gt;You will write just enough of the test to do the job. Its not far from
doing TDD on the test itself. Using staticily compiled languages you
would see compile time errors while performing this step. As you are
writing the test in reverse this is normal and expected. Most text
editors or IDE's can ease this process.&lt;/p&gt;
&lt;p&gt;Implement just enough of the test to do your job. The opposite of this
is large, copy/paste tests that require lines of setup code that can
safely be removed or reduced.&lt;/p&gt;
&lt;h4&gt;Meaning&lt;/h4&gt;
&lt;p&gt;You end up naming variables with more meaning. With a traditional
approach variables can lack true, descriptive names. They are often
called &lt;code&gt;result&lt;/code&gt; or similar. By working in reverse you force yourself to
think of what you are asserting upon. This forces better names out in
the process. An example would be &lt;code&gt;orderTotals&lt;/code&gt; if the purpose of the
assertion was to check if the total of an order was as expected.&lt;/p&gt;
&lt;p&gt;Writing assertions first can feel awkward but the benefits of this
change are well worth the initial slowdown.&lt;/p&gt;</content><category term="testing"></category><category term="tdd"></category><category term="unit-testing"></category></entry><entry><title>Gaining Ten Extra Hours a Week</title><link href="https://blog.shaunfinglas.co.uk/2016/02/gaining-ten-extra-hours-week.html" rel="alternate"></link><published>2016-02-01T00:00:00+01:00</published><updated>2016-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-02-01:/2016/02/gaining-ten-extra-hours-week.html</id><summary type="html">&lt;p&gt;For a long time my work life balance has gone through phases. Some weeks
I would spend hours after work writing code. This would exceed to well
beyond midnight in some cases. This phase was not sustainable but it
appeared to be the norm.&lt;/p&gt;
&lt;p&gt;My other hobbies such as reading …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a long time my work life balance has gone through phases. Some weeks
I would spend hours after work writing code. This would exceed to well
beyond midnight in some cases. This phase was not sustainable but it
appeared to be the norm.&lt;/p&gt;
&lt;p&gt;My other hobbies such as reading and gaming were also neglected. These
too suffered from weeks of focus, followed by quieter periods.&lt;/p&gt;
&lt;p&gt;Over the course of a typical year this cycle would generally balance
out, but never feel comfortable. There were always areas that lacked
focus. One of my common complaints which I have shared with many other
developers is around the lack of time to do anything additional to the
day to day job. There always seemed to be a sacrifice.&lt;/p&gt;
&lt;h4&gt;Mornings&lt;/h4&gt;
&lt;p&gt;The book &lt;a href="http://www.amazon.co.uk/Soft-Skills-software-developers-manual/dp/1617292397"&gt;Soft
Skills&lt;/a&gt;
recommends taking the first hour or two out of your weekly day to focus
on important goals. This piece of advice was not going to work for me I
thought. I was not a morning person.&lt;/p&gt;
&lt;p&gt;Sometime after I discovered an article from the &lt;a href="http://www.artofmanliness.com/2010/09/07/never-let-the-sun-catch-you-sleeping-why-and-how-to-become-an-early-riser/"&gt;Art Of Manliness
(AoM)&lt;/a&gt;
which gave tips on becoming a early riser.&lt;/p&gt;
&lt;h4&gt;How To&lt;/h4&gt;
&lt;p&gt;Instead of simply waking up a whole two hours earlier than usual, AoM
offered an incremental solution. Set your alarm ten minutes earlier and
live with it for a whole week. Each week reduce by a further ten minutes
until you hit your target.&lt;/p&gt;
&lt;p&gt;This process took about three weeks to see any real benefit. While this
can be considered slow progress the act of doing so was incredibly easy.
Incrementally reducing the time also provides time for your body to
adjust, meaning it's a lot easier to stick with.&lt;/p&gt;
&lt;h4&gt;Downsides&lt;/h4&gt;
&lt;p&gt;The obvious downside here is that the two additional hours you gain in
the morning are removed from the end of the day. In other words you'll
find yourself going to sleep earlier. Having a good balance between
work, hobbies and free time means this trade off is well worth the
change.&lt;/p&gt;
&lt;p&gt;One area this technique cannot much provide benefit is with children.
Developers with children would find it difficult to use an uninterrupted
block first thing in the morning. Not being a parent myself means I
cannot provide any alternatives.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;p&gt;Like most things in life, small changes add up to big things over a long
period. Thanks to this change I nearly doubled the amount of blog posts
I wrote back in 2015 when compared to 2014. I've read more books and
watched more technical videos during this period than ever, while still
maintaining a healthy balance in other areas of my life. Give it a go,
become a morning person.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Sproc vs ORM vs Inline vs Polyglot</title><link href="https://blog.shaunfinglas.co.uk/2016/02/sproc-vs-orm-vs-inline-vs-polyglot.html" rel="alternate"></link><published>2016-02-01T00:00:00+01:00</published><updated>2016-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-02-01:/2016/02/sproc-vs-orm-vs-inline-vs-polyglot.html</id><summary type="html">&lt;p&gt;With relational databases the common data access patterns tend to fall
into three core options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct access via inline SQL&lt;/li&gt;
&lt;li&gt;Stored procedures using the standard library&lt;/li&gt;
&lt;li&gt;ORM frameworks or libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Individually these have both pros and cons, often leading to heated
debate and discussion.&lt;/p&gt;
&lt;h4&gt;Inline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Leaky abstractions.&lt;/li&gt;
&lt;li&gt;Dangerous in places …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;With relational databases the common data access patterns tend to fall
into three core options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct access via inline SQL&lt;/li&gt;
&lt;li&gt;Stored procedures using the standard library&lt;/li&gt;
&lt;li&gt;ORM frameworks or libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Individually these have both pros and cons, often leading to heated
debate and discussion.&lt;/p&gt;
&lt;h4&gt;Inline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Leaky abstractions.&lt;/li&gt;
&lt;li&gt;Dangerous in places via SQL injection.&lt;/li&gt;
&lt;li&gt;Quick and dirty solution.&lt;/li&gt;
&lt;li&gt;Non testable by default.&lt;/li&gt;
&lt;li&gt;Useful for integration testing where dynamic input is required and
    safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Stored Procedures (standard library)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Can be clunky and low level to use in places.&lt;/li&gt;
&lt;li&gt;Non testable by default.&lt;/li&gt;
&lt;li&gt;Allows the use of DB specific features internally.&lt;/li&gt;
&lt;li&gt;Easy to tune and optimize as long as interface is stable.&lt;/li&gt;
&lt;li&gt;Developers can optimise the execution of queries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ORMs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Testable by default.&lt;/li&gt;
&lt;li&gt;Complex, large and difficult to use correctly.&lt;/li&gt;
&lt;li&gt;Leaky abstractions.&lt;/li&gt;
&lt;li&gt;Optimisation is harder, especially for DB engineers.&lt;/li&gt;
&lt;li&gt;Mini or lightweight alternatives exist, with less of the downsides.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Polyglot Persistence&lt;/h4&gt;
&lt;p&gt;The actual decision of which data access method to use can be a non
issue providing a good abstraction is used. Whether you use inline SQL,
stored procedures or full blown ORMs is beside the point. &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;Instead of
abstracting the implementation detail, focus on the role the object or
function has to
play&lt;/a&gt;.
A benefit of this approach is the ability to mix and match data access
patterns. Polyglot persistence is gaining more traction where alternate
data storage solutions are more appropriate.&lt;/p&gt;
&lt;h4&gt;N+1&lt;/h4&gt;
&lt;p&gt;One common flaw that all these data access patterns can have is the &lt;a href="https://blog.shaunfinglas.co.uk/2016/02/the-n1-problem.html"&gt;N+1
problem&lt;/a&gt;.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>The N+1 Problem</title><link href="https://blog.shaunfinglas.co.uk/2016/02/the-n1-problem.html" rel="alternate"></link><published>2016-02-01T00:00:00+01:00</published><updated>2016-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-02-01:/2016/02/the-n1-problem.html</id><summary type="html">&lt;p&gt;The N+1 problem is when multiple queries are executed against a
persistent store when a reduced amount could serve the same purpose.
This degrades performance, uses more memory and can cause complexity to
be added to the code that processes the results. Most sources of the
problem come from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The N+1 problem is when multiple queries are executed against a
persistent store when a reduced amount could serve the same purpose.
This degrades performance, uses more memory and can cause complexity to
be added to the code that processes the results. Most sources of the
problem come from the poor use of ORMs or developers thinking
procedurally instead of in terms of how the underlying database
operates.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Consider a collection of posts that each contain zero or more comments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  Post
    Comment
    Comment
  Post
    Comment
    Comment
    Comment
    Comment
    Comment
  Post
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To retrieve a selection of ten posts including their comments, one
option would be to query all posts then perform a query for each
individual posts' comments. This would result in a total of eleven
queries. While this solution works it is far from ideal. Disturbingly
this solution is easily introduced when developers execute queries
against databases using loops or misconfigured ORMs.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;p&gt;Solutions to solving the N+1 problem are remarkably straightforward. In
the case of manual queries such changes are usually easy to implement.&lt;/p&gt;
&lt;h5&gt;Single Query&lt;/h5&gt;
&lt;p&gt;Use a join operation to perform a single query. This one query would
pull back all posts and their matching comments. This would be the ideal
fix for the example described above.&lt;/p&gt;
&lt;h5&gt;Query and Stitch&lt;/h5&gt;
&lt;p&gt;Sometimes there is no clear grouping or relation between sets of data.
This is often the case when normalized data needs to be denormalized
prior to retrieval. In these cases the query and stitch method can be
used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One query to grab master set.&lt;/li&gt;
&lt;li&gt;Another query to grab the related set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then simply match on a key in code. The key would be something that
groups the data and is present in both sets or is the result of
additional programming logic. Query and stitch is useful for paging or
when relational thinking and grouping does not fit. This tends to be the
case for REST APIs where data is aggregated or composed from multiple
sources, or needs further processing after retrieval.&lt;/p&gt;
&lt;p&gt;Despite two queries here, it is often possible to return separate
datasets within a single query prior to stitching the data together as a
further optimisation and simplification.&lt;/p&gt;
&lt;h5&gt;ORMs or Tooling&lt;/h5&gt;
&lt;p&gt;When ORMs are used discovering the N+1 problem is more obscured without
logging the underlying queries that are performed. Once an issue is
discovered it is usually a case of consulting documentation on what the
fix is - often configuration related. Due to this it is worth enabling
logging during development so queries can be analysed.&lt;/p&gt;</content><category term="tutorial"></category></entry><entry><title>Why you need a Developer Diary</title><link href="https://blog.shaunfinglas.co.uk/2016/02/why-you-need-developer-diary.html" rel="alternate"></link><published>2016-02-01T00:00:00+01:00</published><updated>2016-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-02-01:/2016/02/why-you-need-developer-diary.html</id><summary type="html">&lt;p&gt;After eighteen months of use, I can safely claim &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/developer-diaries.html"&gt;how useful a a
developer diary is, and why you should start using
one&lt;/a&gt; if
you don't already.&lt;/p&gt;
&lt;h4&gt;Changes&lt;/h4&gt;
&lt;p&gt;Using a single file grew too large as expected. Instead each grouping is
allocated an individual file. While some of these are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After eighteen months of use, I can safely claim &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/developer-diaries.html"&gt;how useful a a
developer diary is, and why you should start using
one&lt;/a&gt; if
you don't already.&lt;/p&gt;
&lt;h4&gt;Changes&lt;/h4&gt;
&lt;p&gt;Using a single file grew too large as expected. Instead each grouping is
allocated an individual file. While some of these are small, the ability
to navigate easily is not lost. The simplest thing to do here is just
point a browser at the directory. Navigation and searching is then built
in. Each week I actively split the main file file into separate files or
merge to existing content.&lt;/p&gt;
&lt;h4&gt;Uses&lt;/h4&gt;
&lt;p&gt;I'm increasingly finding regular needs and uses to refer back to notes.
In some cases it is quicker than searching online, simply hit the
bookmark and start typing.&lt;/p&gt;
&lt;p&gt;Adding notes works great when reading books or watching videos. All
content recorded ends up in the same location.&lt;/p&gt;
&lt;h4&gt;Do It&lt;/h4&gt;
&lt;p&gt;Keeping a developer diary is without doubt one of the most useful
changes to my development process. Encouragingly others are doing
similar things too, but &lt;a href="https://github.com/jbranchaud/til"&gt;under slightly different
names&lt;/a&gt;.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Application Validation and Domain Validation</title><link href="https://blog.shaunfinglas.co.uk/2016/01/application-validation-and-domain.html" rel="alternate"></link><published>2016-01-13T19:58:00+01:00</published><updated>2016-01-13T19:58:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-01-13:/2016/01/application-validation-and-domain.html</id><summary type="html">&lt;p&gt;There are two types of validation in an application - application
validation and domain validation. This applies whether or not you
practice DDD. One of my mistakes in the past has been confusing or
conflating these two responsibilities at the same time.&lt;/p&gt;
&lt;h4&gt;Application Validation&lt;/h4&gt;
&lt;p&gt;Application validation is anything technical or anything …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are two types of validation in an application - application
validation and domain validation. This applies whether or not you
practice DDD. One of my mistakes in the past has been confusing or
conflating these two responsibilities at the same time.&lt;/p&gt;
&lt;h4&gt;Application Validation&lt;/h4&gt;
&lt;p&gt;Application validation is anything technical or anything domain experts
would likely scratch their heads at. Examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is the input null?&lt;/li&gt;
&lt;li&gt;is the input whitespace or empty?&lt;/li&gt;
&lt;li&gt;is the input within ranges for the datatypes used?&lt;/li&gt;
&lt;li&gt;is the length of the input suitable for the DB?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Application validation should occur in your application service, along
with other technical aspects such as transactions or configuration. This
is due to different applications having different technical
requirements. For example a HTML frontend may differ to a web service,
so application validation would need to vary also.&lt;/p&gt;
&lt;p&gt;This form of validation is best performed using &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/ddd-validation.html"&gt;validation
services&lt;/a&gt;.
The use of attributes/decorators/annotations can also be used though
&lt;a href="https://blog.shaunfinglas.co.uk/2016/01/validation-is-not-cross-cutting-concern.html"&gt;the following post will explain why this is usually a bad
idea&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Domain Validation&lt;/h4&gt;
&lt;p&gt;Domain validation is concepts the business or domain experts would
understand. Examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"&lt;em&gt;employees can only take a holiday if they have not used their
    allowance&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;em&gt;estimated delivery dates should not fall on holidays&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;em&gt;users can only edit their own posts&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once inside your domain, validation should live as part of your domain
model or domain logic. If &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;value types are utilised you can safely omit
additional application
validation&lt;/a&gt;
as each object would ensure consistency.&lt;/p&gt;</content><category term="tutorial"></category></entry><entry><title>A Lotta Architecture - A Reply to "A Little Architecture"</title><link href="https://blog.shaunfinglas.co.uk/2016/01/a-lotta-architecture-reply-to-little.html" rel="alternate"></link><published>2016-01-01T00:00:00+01:00</published><updated>2016-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-01-01:/2016/01/a-lotta-architecture-reply-to-little.html</id><summary type="html">&lt;p&gt;A recent post about &lt;a href="http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html"&gt;architecture from Uncle
Bob&lt;/a&gt;
got me thinking and talking about a typical day in the life of a
developer. It's well worth a read. In fact at the time of writing this
reply there are 347 retweets and 288 likes - of which I was one of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A recent post about &lt;a href="http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html"&gt;architecture from Uncle
Bob&lt;/a&gt;
got me thinking and talking about a typical day in the life of a
developer. It's well worth a read. In fact at the time of writing this
reply there are 347 retweets and 288 likes - of which I was one of those
statistics.&lt;/p&gt;
&lt;p&gt;The advice is practical and advice that I agree with. Except this is not
the full story. While deferring architectural decisions as late as
possible is a good thing, such details actually tend to be the most
important, costly and difficult parts of an application.&lt;/p&gt;
&lt;p&gt;In the example the &lt;code&gt;BusinessRuleGateway&lt;/code&gt; allows the business logic to be
coded in pure isolation, using a stub or fake. This is fantastic and
provides numerous benefits. Sadly the actual implementation of the
gateway requires knowledge of MySql. This may be obvious but the
decision of what database to use cannot be deferred or ignored forever.&lt;/p&gt;
&lt;p&gt;Once chosen you will require intricate knowledge of how it works and is
implemented. When things go wrong and you are staring at a one hundred
line stack trace, you better hope you understand how the DB is
configured.&lt;/p&gt;
&lt;p&gt;Additionally the gateway interface demonstrates another common problem,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;leaky
abstractions&lt;/a&gt;.
This particular interface while coded without an implementation in mind,
is tightly coupled to a relational database. If we opted for a file
system or document database the use of transactions is now incorrect.&lt;/p&gt;
&lt;p&gt;From my experience such implementation details end up taking the
majority of your time and effort - see the &lt;a href="https://en.wikipedia.org/wiki/Pareto_principle"&gt;80/20
rule&lt;/a&gt;. From small to
large systems, this tends to be a common running theme.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One project was tightly coupled to the web framework. Making a code
    change required detailed knowledge of the inner workings of the page
    request/response lifecycle.&lt;/li&gt;
&lt;li&gt;Another required deep knowledge, awareness and fear of the legacy
    database schema. Code changes were easy. Plugging in a legacy
    database took horrific amounts of effort.&lt;/li&gt;
&lt;li&gt;A current project is working with an asynchronous, distributed
    system. In order to be productive a solid understanding of the
    mechanics of message queues and distributed computing is required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In some of these cases, the advice offered around abstracting
implementation details was actually used. Rarely is the problem ever
pure business logic. In a typical week I would bet a large sum of money
the majority of developers find themselves fighting with integration, or
third party dependencies, over faulty domain logic.&lt;/p&gt;
&lt;p&gt;Deferring decisions is a sign of good architecture, but the act of
deferral or hiding behind interfaces only gets you so far. The sad state
of affairs is that any implementation detail left unchecked can swallow
applications in complexity.&lt;/p&gt;</content><category term="reply"></category><category term="retro"></category><category term="architecture"></category></entry><entry><title>Getting Things Done - For Software Developers</title><link href="https://blog.shaunfinglas.co.uk/2016/01/getting-things-done-for-software.html" rel="alternate"></link><published>2016-01-01T00:00:00+01:00</published><updated>2016-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-01-01:/2016/01/getting-things-done-for-software.html</id><summary type="html">&lt;p&gt;I have been using the incredibly simple techniques within &lt;a href="http://gettingthingsdone.com/"&gt;Getting
Things Done (GTD)&lt;/a&gt; to good effect over
the last twelve months.&lt;/p&gt;
&lt;h3&gt;The System&lt;/h3&gt;
&lt;p&gt;At a high level the system consists of buckets, grouping and a task
store. The actual implementation of GTD systems is down to personal
preference. Many find …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been using the incredibly simple techniques within &lt;a href="http://gettingthingsdone.com/"&gt;Getting
Things Done (GTD)&lt;/a&gt; to good effect over
the last twelve months.&lt;/p&gt;
&lt;h3&gt;The System&lt;/h3&gt;
&lt;p&gt;At a high level the system consists of buckets, grouping and a task
store. The actual implementation of GTD systems is down to personal
preference. Many find their system changes and evolves over time.&lt;/p&gt;
&lt;h4&gt;Buckets&lt;/h4&gt;
&lt;p&gt;Have one or more &lt;em&gt;buckets&lt;/em&gt; which act as simple dumping grounds for
anything you need to do. My phone, pen and paper and post it notes are
the three core buckets I use.&lt;/p&gt;
&lt;p&gt;Buckets are where you store anything that takes more than a couple of
minutes to do. If something takes less time, just do it there and then.
Regularly empty the buckets and assign them to groupings of related
items. Example groupings include tasks around the house, work projects,
blog items, or items to buy.&lt;/p&gt;
&lt;h4&gt;Grouping&lt;/h4&gt;
&lt;p&gt;Each grouping can then be allocated a priority. Each grouping
essentially becomes a mini kanban board.&lt;/p&gt;
&lt;p&gt;Grouping is preferred to having one big todo list as different scenarios
allows the act of tackling items when the time is right. If you have
thirty minutes to spare on the computer, anything that can be done via
the PC can be worked on. Likewise if the weather is good, what tasks can
I do outside?&lt;/p&gt;
&lt;h4&gt;Trello&lt;/h4&gt;
&lt;p&gt;I use &lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt; for the storing of tasks. Trello has
the added benefit of being able to assign due dates, notes and comments.
The boards also make priorities visible. The more tasks in a column, the
more to do and potentially the more attention a certain grouping should
be given.&lt;/p&gt;
&lt;p&gt;Daily one or more emails land in my inbox after being filtered. These
are tasks that need doing within the next twenty four hours. These are
simply reminders or &lt;em&gt;tickles&lt;/em&gt; to complete a task by a set date.&lt;/p&gt;
&lt;h4&gt;Day to Day&lt;/h4&gt;
&lt;p&gt;GTD has been a great assistance not just in software development, but
day to day life in general. There is more to GTD but the core system is
very simple yet highly effective.&lt;/p&gt;
&lt;p&gt;One of the biggest benefits of GTD is the ability to clear you mind. As
everything is recorded or waiting in a bucket nothing gets forgotten.
Instead you can focus on exactly what you need to be doing at the time.&lt;/p&gt;
&lt;p&gt;In part the use of GTD is partly responsible for the growth of this blog
from 2014 to present.&lt;/p&gt;</content><category term="reading"></category><category term="retro"></category></entry><entry><title>Validation is not a Cross Cutting Concern</title><link href="https://blog.shaunfinglas.co.uk/2016/01/validation-is-not-cross-cutting-concern.html" rel="alternate"></link><published>2016-01-01T00:00:00+01:00</published><updated>2016-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-01-01:/2016/01/validation-is-not-cross-cutting-concern.html</id><summary type="html">&lt;p&gt;Attributes in C# are also known as &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;decorators in
Python&lt;/a&gt; or &lt;a href="http://docs.oracle.com/javase/tutorial/java/annotations/"&gt;annotations
in Java&lt;/a&gt;.
Other languages may have similar constructs. This post will use
&lt;em&gt;attribute&lt;/em&gt; throughout but refers to the same concept.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;While attributes prove useful for cross cutting concerns such as
authorization or logging, they can be misused. Attributes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Attributes in C# are also known as &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;decorators in
Python&lt;/a&gt; or &lt;a href="http://docs.oracle.com/javase/tutorial/java/annotations/"&gt;annotations
in Java&lt;/a&gt;.
Other languages may have similar constructs. This post will use
&lt;em&gt;attribute&lt;/em&gt; throughout but refers to the same concept.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;While attributes prove useful for cross cutting concerns such as
authorization or logging, they can be misused. Attributes should act as
metadata, providing no direct behaviour. Failing to do so will make DI,
testability and composition very difficult.&lt;/p&gt;
&lt;p&gt;These flaws are especially true for validation. Despite all input
requiring validation, the manner in which validation is performed is
dependent on the entry point to the code. &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/ddd-validation.html"&gt;Context
matters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider order information that requires a billing address and by
definition, its children to be populated. An attribute works a treat
here in this simple case.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/22749d5755b9fa3337c4.js"&gt;&lt;/script&gt;

&lt;p&gt;A problem arises if you only want the billing address validation to
activate if the billing address and delivery address differ.&lt;/p&gt;
&lt;p&gt;Complexity quickly starts to take over. With a more fully featured
example attributes can start to overwhelm the class. This example
becomes worse if the validation is required to be performed by a third
party library or service. Finding a hook to integrate becomes
troublesome.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Avoid attributes for validation in all but the simplest scenarios. Even
simple scenarios lead to some churn if you do decide to switch. My
personal preference is to now avoid attributes all together, instead
opting to use a validation service.&lt;/p&gt;
&lt;p&gt;The obvious downside to this is approach is the appearance of more code.
While this is true, composed object graphs can benefit from the ability
of reuse. Additionally in the case of attributes some degree of testing
is required. These usually fall into the category of asserting the
presence of attributes on properties which is far from ideal. The use of
validation services do not suffer this problem. Internally the
implementation can be switched, altered or refactored without fear of
breaking any tests.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/1100d60aa521a555c972.js"&gt;&lt;/script&gt;

&lt;p&gt;The RootValidator is a composite of zero or more actual validators. Each
validator can be specific to a particular task. The only requirement
being the interface must be the parent object. This is to ensure the
context is not lost when making decisions. The actual interface in this
case could be made to use generic types if required. The
&lt;a href="https://gist.github.com/Finglas/ee7de5821376ce26543b"&gt;ValidationResults&lt;/a&gt;
are a simple value type representing an aggregation of validation
failures. This could be extended or modified for further enhancements.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Composition makes it possible to provide multiple validators that
    all do one thing well.&lt;/li&gt;
&lt;li&gt;Testing is much easy as you can test each validator in isolation.&lt;/li&gt;
&lt;li&gt;Null validators provides easier higher level testing as you can
    provide a no-op validator. Removing the need to build up complex
    object graphs for other test cases.&lt;/li&gt;
&lt;li&gt;Developers can follow, debug and understand simple conditional logic
    more so than framework specific metadata.&lt;/li&gt;
&lt;li&gt;Open to extension and additions such as third party code.&lt;/li&gt;
&lt;li&gt;Services never lose context which allows easy runtime decisions to
    be made.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="tutorial"></category></entry></feed>