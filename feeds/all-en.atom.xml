<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shaun Finglas</title><link href="https://blog.shaunfinglas.co.uk/" rel="alternate"></link><link href="https://blog.shaunfinglas.co.uk/feeds/all-en.atom.xml" rel="self"></link><id>https://blog.shaunfinglas.co.uk/</id><updated>2019-12-07T00:00:00+01:00</updated><entry><title>The Boy Scout Rule is Misunderstood</title><link href="https://blog.shaunfinglas.co.uk/2019/12/the-boy-scout-rule-is-misunderstood.html" rel="alternate"></link><published>2019-12-07T00:00:00+01:00</published><updated>2019-12-07T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2019-12-07:/2019/12/the-boy-scout-rule-is-misunderstood.html</id><summary type="html">&lt;h3&gt;What is it?&lt;/h3&gt;
&lt;p&gt;During my time in the Scouts we would clear down our camp site in the same way each time. We would gather everyone in a big circle around the campfire and face outwards. The fire was the center of the camp. &lt;/p&gt;
&lt;p&gt;We would then all walk outwards …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;What is it?&lt;/h3&gt;
&lt;p&gt;During my time in the Scouts we would clear down our camp site in the same way each time. We would gather everyone in a big circle around the campfire and face outwards. The fire was the center of the camp. &lt;/p&gt;
&lt;p&gt;We would then all walk outwards away from the fire up until the edge of the campsite. This boundary would be our personal site, not the full campsite we happened to be stopping in. Along the way if we noticed anything that wasn't right we would fix it there and then. This could invovle picking up litter, closing gates, moving items out of the way and anything else. The idea was to put the area back to the way we found it. Then the next group to use the site would have the same experience as we did. Additionally this taught the younger scouts to look after their environment no matter where they are.&lt;/p&gt;
&lt;h3&gt;What is it in Software Development?&lt;/h3&gt;
&lt;p&gt;My personal experience of the "Boy Scout Rule" in software development came from the book Clean Code. This states that just like in the scouts we should aim to leave the codebase we are working with, in a better or equivalent state when we finish. &lt;/p&gt;
&lt;h3&gt;Misuse&lt;/h3&gt;
&lt;p&gt;The misuse of this rule in software development is pretty rampant from my personal experience. Often this "rule" will be used to justify big sweaping changes. Alternatively I've seen changes occur under this "rule" in areas unrelated to the code being worked upon. This would be the real world equivalent of the Scouts leaving the boundary of the campsite or tackling tasks such as felling trees.&lt;/p&gt;
&lt;p&gt;The misuse here is that the software development team is focused on one area, yet changes occur elsewhere meaning bugs or issues may be introduced. Such changes make reverts or rollbacks difficult. Not to mention adding to the noise that changes create such as peer reviews, discussions and testing.&lt;/p&gt;
&lt;p&gt;The definition of &lt;em&gt;better&lt;/em&gt; is also tricky. Refactoring can be highly subjective so when do you stop? In theory no code base is every complete, there will always be something someone would change if given the time.&lt;/p&gt;
&lt;h3&gt;Intent in Software Development&lt;/h3&gt;
&lt;p&gt;The intent of the "Boy Scout Rule" is good, however it is no rule. Don't get pressured into changes for the sake of change. All changes should be local to area you are already working in. &lt;/p&gt;
&lt;p&gt;For example if you change a method of a type, then the method itself, the type and references of the method are fair game for refactoring or other improvements. The opposite of this would be making a change on the otherside of the code base just because we can. The reason for this is every change introduces risk and has an associated cost. &lt;/p&gt;
&lt;p&gt;In other words if you are already in the area of the code, refactor as needed. Leave that part of the codebase in a better state. Overtime these small changes will add up. Such hot spots in the codebase for change will become better in terms of quality. Any area that isn't subject to change probably isn't worth worrying about even if it is has glarring issues. &lt;/p&gt;
&lt;p&gt;Increasingly as I gain more experience with software development I find the less code and the less changes made the better. I'm not claiming less lines of code is better - just small, isolated, well focus changes are. Likewise to apply a larger scale change just make lots of small changes in quick succession. These small changes should flow from local development to production.&lt;/p&gt;
&lt;p&gt;The counter point to my case is how do we handle larger changes or arhitectural changes? In this case the "Boy Scout Rule" is inapproriate. Such changes should be planned, have a value associated with them and estimated. Only then should they be completed if really needed. Often what developers wish to produce is not in sync with the business actual wants or needs.&lt;/p&gt;</content><category term="software-development"></category></entry><entry><title>Code Smell: Time Span Embedded in Variable</title><link href="https://blog.shaunfinglas.co.uk/2017/01/code-smell-time-span-embedded-in-variable.html" rel="alternate"></link><published>2017-08-08T00:00:00+02:00</published><updated>2017-08-08T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2017-08-08:/2017/01/code-smell-time-span-embedded-in-variable.html</id><summary type="html">&lt;p&gt;A common code smell that tends to go unnoticed is embedding a time span within a variable name. While developers recognize that embedding types into names is redundant they often fail to see this smell.&lt;/p&gt;
&lt;p&gt;You often need a variable to trigger on a set period, such as every fifteen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A common code smell that tends to go unnoticed is embedding a time span within a variable name. While developers recognize that embedding types into names is redundant they often fail to see this smell.&lt;/p&gt;
&lt;p&gt;You often need a variable to trigger on a set period, such as every fifteen minutes. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BlogPostFeedPollingIntervalInSeconds = 900
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, what is 900? Without the variable name this is hard to reason about. This is even harder when the value is external and replaced on deployment. Often the value will be found with a comment explaining what the figure is relative to other time periods. This is another hint that you have a time span embedded into a variable.&lt;/p&gt;
&lt;p&gt;This smell also becomes harder for more exotic or unfamiliar intervals. In other words most developers are familiar that 1 second in milliseconds is 1000, but not other common ranges or periods. Most standard libraries or lower level functions have fixed intervals which compound the problem. For example a data access libraries tend to use seconds as their highest unit of time, this may not be appropriate in some cases.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;The fix for this code smell is to use time spans. The previous example can be expressed in the following form.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BlogPostFeedPollingInterval = &amp;quot;00:15:00&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The value here is expressed in the form HH:MM:SS. Time spans can include days or levels of precision lower than a single second. Different languages may have alternative forms of specifying time spans but the principle is the same. Consult the documentation for more info. When the code reads this value the string time span will be converted. Using C# as an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var blogPostFeedPollingInterval = TimeSpan.Parse(timeSpan);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The use of time spans have a variety of benefits. Notice that the variable name has had the time component removed. This allows the value to increase or decrease without needing to change the variable name.&lt;/p&gt;
&lt;p&gt;Additionally time spans are human readably without the need to convert or do maths in your head.&lt;/p&gt;
&lt;p&gt;Time spans also offer type safety if the underlying code is doing further work with the value. This is in stark
contrast to doing numerical work with simple integers. Another example would include the ability to use higher time periods for clarity and then simply convert to the total number of minutes/seconds when required.&lt;/p&gt;
&lt;p&gt;It is worth bearing in mind that for time periods such as "12 months" or "every 3 weeks on Friday" an alternative is required. Some languages may offer this by default, others may require a third party library. This is due to the fact that a time span does not respect the calendar system. For example, over several months the number of days in each month can vary. For days, hours, minutes or seconds your standard libraries time span should be more than capable.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Don't embed time spans in variables.&lt;/li&gt;
&lt;li&gt;Whenever you include a time span in a variable name consider using a time span.&lt;/li&gt;
&lt;li&gt;Check the documentation for your language as time span formats can differ or be tricky to remember.&lt;/li&gt;
&lt;li&gt;For periods of time (every 3 months on the 1st) time spans are not appropriate by default.&lt;/li&gt;
&lt;li&gt;For business rules that must trigger on on particular dates as previously use the calendar to work this out.&lt;/li&gt;
&lt;/ul&gt;</content><category term="code"></category><category term="tutorial"></category></entry><entry><title>Testing your Composition Root</title><link href="https://blog.shaunfinglas.co.uk/2017/06/testing-your-composition-root.html" rel="alternate"></link><published>2017-06-27T00:00:00+02:00</published><updated>2017-06-27T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2017-06-27:/2017/06/testing-your-composition-root.html</id><summary type="html">&lt;p&gt;Separating configuration from your code itself is a good practice. Unfortunately this can quite be
quite complex in itself. In fact it is fair to say that in many cases the use of
&lt;a href="/2014/11/dependency-injection-di-containers.html"&gt;DI containers&lt;/a&gt; to achieve this can be overkill
for a task that should be rather basic.&lt;/p&gt;
&lt;p&gt;Recently …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Separating configuration from your code itself is a good practice. Unfortunately this can quite be
quite complex in itself. In fact it is fair to say that in many cases the use of
&lt;a href="/2014/11/dependency-injection-di-containers.html"&gt;DI containers&lt;/a&gt; to achieve this can be overkill
for a task that should be rather basic.&lt;/p&gt;
&lt;p&gt;Recently a project I've been involved with has struggled with the configuration of dependencies.
This lead to the dreaded runtime error, even though at compile time everything was seemingly
normal. This late feedback was compounded by the fact that getting the system up and running
locally is a chore, so in many cases it was CI that was detecting these issues after a deploy.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;The general practice states that your tests shouldn't need to use your production configuration.
However in this case the solution was to invoke the configuration and force it to resolve. This
test was odd in the sense that it does nothing other than successfully resolve. The fact that no
unhandled exception is thrown is good enough. Note there is only one new test here, all other unit
tests remain as-is, they are still separate from the use of the production configuration. All
this test does is ensure all wiring up and dependencies are satisfied. In cases where config
from an external file is used, that too will be exercised.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Test]&lt;/span&gt;
&lt;span class="na"&gt;public void ConfigurationTest()&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;var container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Container.Resolve();&lt;/span&gt;
&lt;span class="s"&gt;    container.Resolve&amp;lt;RootType&amp;gt;();&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual resolution aspect on line 5 is optional. There may be other ways to force resolution,
this may vary based on what library you use. In this example only one type is resolved. If your
project includes multiple entry points such as numerous controllers you may need to include these
as well.&lt;/p&gt;
&lt;p&gt;Hopefully the error that is thrown when this resolution fails is useful. Most DI libraries are
fairly good in this regard. Even so it may be worth documenting this test with the steps that
a developer would have to go through in order to fix.&lt;/p&gt;
&lt;h2&gt;Dynamic Languages&lt;/h2&gt;
&lt;p&gt;Even though DI libraries are a rare thing in dynamic languages, the use of a composition root
is still needed. Therefore I'd recommend a similar test be applied to dynamic languages to keep
the feedback loop fast.&lt;/p&gt;
&lt;h2&gt;Lessons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don't test your composition root in your current unit tests.&lt;/li&gt;
&lt;li&gt;Do include a single test that resolves your root dependencies.&lt;/li&gt;
&lt;li&gt;Include appropriate messaging to show how to fix the issue.&lt;/li&gt;
&lt;li&gt;Dynamic languages should aim to test their composition root can resolve also.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category><category term="testing"></category></entry><entry><title>Logging vs Auditing</title><link href="https://blog.shaunfinglas.co.uk/2017/05/logging-vs-auditing.html" rel="alternate"></link><published>2017-05-02T00:00:00+02:00</published><updated>2017-05-02T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2017-05-02:/2017/05/logging-vs-auditing.html</id><summary type="html">&lt;p&gt;The difference between logging and auditing is a subtle yet important
distinction.&lt;/p&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Technical in nature. Deals with technical concerns, stacktraces or
    errors.&lt;/li&gt;
&lt;li&gt;Additional levels such as DEBUG, INFO, WARN, ERROR, FATAL for
    classification.&lt;/li&gt;
&lt;li&gt;Logging can be simple such as traditional stdout statements, or more
    complex with semantic/structured logging …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The difference between logging and auditing is a subtle yet important
distinction.&lt;/p&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Technical in nature. Deals with technical concerns, stacktraces or
    errors.&lt;/li&gt;
&lt;li&gt;Additional levels such as DEBUG, INFO, WARN, ERROR, FATAL for
    classification.&lt;/li&gt;
&lt;li&gt;Logging can be simple such as traditional stdout statements, or more
    complex with semantic/structured logging.&lt;/li&gt;
&lt;li&gt;Should not cause a runtime failure if logging is defective, fail
    silently.&lt;/li&gt;
&lt;li&gt;System should work with or without logging enabled from both a
    technical and system view.&lt;/li&gt;
&lt;li&gt;No need for automated testing, simply ensure this works afterwards.
    No need for interfaces or abstractions, use the logging library
    directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The primary users of logging should be the development team when
developing and testing. Additional the team should use logging for daily
monitoring and support. Effective log monitoring can produce trends or
highlight problem areas well before users report them as issues. The use
of a good monitoring system can also remove and reduce the need for
complex and unstable system tests, this will be the subject of a future
post.&lt;/p&gt;
&lt;h3&gt;Auditing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Domain specific. Deals with domain concerns for audit trails.&lt;/li&gt;
&lt;li&gt;Always one level, though context is important. Different audit roles
    for different actions, for example, user makes a payment. User logs
    in. User performs action. All three of these examples are unique and
    should be treated as such.&lt;/li&gt;
&lt;li&gt;Auditing is important, it must occur. Should cause a runtime failure
    if auditing is defective. Never fail silently.&lt;/li&gt;
&lt;li&gt;System cannot operate at 100% if auditing is not operating.&lt;/li&gt;
&lt;li&gt;Testable and should be considered a first class feature.
    Abstractions useful to provide different implementations and to aid
    testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auditing is a feature in itself. There is no point introducing this
additional complexity unless the system requires this. Other concerns
auditing introduces include where to store the data? For how long? And
what potentially sensitive data can be stored?&lt;/p&gt;
&lt;p&gt;The key lesson here is that logging and auditing are two very distinct
concepts and should be treated as such.&lt;/p&gt;</content><category term="summary"></category></entry><entry><title>The QA Test Matrix</title><link href="https://blog.shaunfinglas.co.uk/2017/04/the-qa-test-matrix.html" rel="alternate"></link><published>2017-04-03T00:00:00+02:00</published><updated>2017-04-03T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2017-04-03:/2017/04/the-qa-test-matrix.html</id><summary type="html">&lt;p&gt;Historically teams I've worked with have taken a few varying approaches
when designing tests against acceptance criteria. One is to have the
business define the feature, while the team help define the acceptance
criteria. Ultimately the business gets the final say if they agree, and
further acceptance criteria is either …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Historically teams I've worked with have taken a few varying approaches
when designing tests against acceptance criteria. One is to have the
business define the feature, while the team help define the acceptance
criteria. Ultimately the business gets the final say if they agree, and
further acceptance criteria is either added or removed. The strength of
this approach is everyone is involved with the process so nothing is
missed or misunderstood. The biggest flaw with this style is that the
documentation produced is often verbose, using wordy Given-When-Then
scenarios. Using this plan a test plan is then created, mapping tests to
acceptance criteria.&lt;/p&gt;
&lt;p&gt;An alternative approach is have the business define both the feature and
acceptance criteria while the team come up with a corresponding test
strategy. This more technical approach allows for a separation of
testing activities and test categories. Finally the test plan is
replayed back to the business and correlated against acceptance
criteria. A negative of this approach is not everyone is involved with
the task at the same time. This means there can be some disconnect with
what the business is actually asking for. Both approaches work though
they can yield mixed results on a case by case basis.&lt;/p&gt;
&lt;h4&gt;The QA Matrix&lt;/h4&gt;
&lt;p&gt;I've recently been introduced to the concept of a testing/QA matrix,
which is a far more condensed and simplified solution. It has the
benefit of the whole team being engaged, while producing nothing more
than a simple table that can fit comfortably on a A4 page. The left hand
column includes each condition of acceptance, while the other columns
should have a mark to indicate the type of test that will cover this
functionality. An example is below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     Unit Integration Acceptance Contract Manual
COA   X
COA           X                             X
COA   X
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The beauty of this matrix is that at a glance you can see where you
testing efforts lie. If too much occurs on the right of the matrix you
may need to re-consider and question your approach. Is there a way to
limit the more expensive style of tests and still gain confidence? Other
questions can arise around test coverage and whether higher level tests
are needed.&lt;/p&gt;
&lt;p&gt;When producing this matrix the whole team including the business should
be involved. By having everyone together, decisions can be made quickly
with everyone in agreement. Additionally it allows debate and discussion
around how each feature should be tested.&lt;/p&gt;
&lt;p&gt;For higher level tests these can be directly translated into automated
tests. While the lower level tests need to confirmed at a later date
once the code is complete.&lt;/p&gt;
&lt;p&gt;Along side the QA matrix it may be worth while adding a simple diagram
of the components that will be involved such as web servers, databases
and so on. This can aid discussion and highlight hot spots for changes
or tests.&lt;/p&gt;
&lt;p&gt;Finally for demonstration to the business the matrix can be used as a
form contract for signing off functionality. Once the feature is
complete it is simply a case of finding the corresponding tests,
confirming their existence and making a note of the commit that included
them.&lt;/p&gt;</content><category term="testing"></category></entry><entry><title>Be Humble</title><link href="https://blog.shaunfinglas.co.uk/2017/01/be-humble.html" rel="alternate"></link><published>2017-01-18T00:00:00+01:00</published><updated>2017-01-18T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2017-01-18:/2017/01/be-humble.html</id><summary type="html">&lt;p&gt;Some of the best developers I know treat everyone with mutual respect.
Not only this they are open about what they do know and what they don't
know. In fact they'll often proclaim “I don't know” and go about finding
out how they can answer your question or solve a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some of the best developers I know treat everyone with mutual respect.
Not only this they are open about what they do know and what they don't
know. In fact they'll often proclaim “I don't know” and go about finding
out how they can answer your question or solve a particular problem.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;A past mentor of mine had a wealth of experience in both the domain and
software development itself. In contrast I had no domain experience and
very limited practical ability. Despite this gap I was treated as they
would treat an equal. No matter how stupid or basic my questions.&lt;/p&gt;
&lt;p&gt;However our roles switched one day when I explained about my background
in games programming. My mentor decided to have a go, a topic on which
he knew nothing. He was both humble and happy to be led and openly
admitted his shortcomings. In the end we were able to build a basic
game. Here I answered what I considered basic questions, while he gained
experience.&lt;/p&gt;
&lt;h4&gt;Opposite Example&lt;/h4&gt;
&lt;p&gt;On the other hand some of the worst developers I've worked with are the
opposite of the past example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They won't admit they don't know the answer.&lt;/li&gt;
&lt;li&gt;They won't ask for help.&lt;/li&gt;
&lt;li&gt;They won't treat others as equals.&lt;/li&gt;
&lt;li&gt;They won't admit they were wrong.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;p&gt;Software languages, tools and techniques rapidly change. You can't know
everything. You can be the expert of one topic one day, and the beginner
in another area the next day. Embrace this and learn as you go. Just be
humble about it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Admit it when you don't know the answer. Find out if you can.&lt;/li&gt;
&lt;li&gt;Ask for help.&lt;/li&gt;
&lt;li&gt;Treat everyone equally, as you would like to be treated yourself.&lt;/li&gt;
&lt;li&gt;Admit it when you are wrong.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category></entry><entry><title>Convention Based Tests</title><link href="https://blog.shaunfinglas.co.uk/2017/01/convention-based-tests.html" rel="alternate"></link><published>2017-01-11T00:00:00+01:00</published><updated>2017-01-11T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2017-01-11:/2017/01/convention-based-tests.html</id><summary type="html">&lt;p&gt;Most projects have some form of convention. Examples would include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attributes/Properties for REST API's&lt;/li&gt;
&lt;li&gt;Inheritance for third party base types&lt;/li&gt;
&lt;li&gt;Assemblies/Packages for third party code that is loaded dynamically&lt;/li&gt;
&lt;li&gt;Folder or namespace conventions&lt;/li&gt;
&lt;li&gt;And many other forms of conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a few of these examples static analysis can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most projects have some form of convention. Examples would include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attributes/Properties for REST API's&lt;/li&gt;
&lt;li&gt;Inheritance for third party base types&lt;/li&gt;
&lt;li&gt;Assemblies/Packages for third party code that is loaded dynamically&lt;/li&gt;
&lt;li&gt;Folder or namespace conventions&lt;/li&gt;
&lt;li&gt;And many other forms of conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a few of these examples static analysis can detect issues, but the
majority of these problems would resolve only at runtime.&lt;/p&gt;
&lt;p&gt;A technique I've used in the past to great success is the concept of
convention based tests (CBT). These are tests that ensure a particular
convention is followed. As a general practice CBT tend to be written
after the discovery of a problem as it is preferable to rely upon higher
level tests initially. The good news is that CBT ensure that such
problems never return and if a convention is broken you'll be notified
during your test run.&lt;/p&gt;
&lt;p&gt;In terms of quantity there will be a very small number of these tests,
and unlike typical tests that focus on behaviour rather than
implementation, these tests are focused on implementation.&lt;/p&gt;
&lt;h3&gt;Reflection&lt;/h3&gt;
&lt;p&gt;Tests generally should &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;favour readability and clarity over the removal
of
duplication&lt;/a&gt;.
Additionally the use of programming constructs such as loops or
conditionals within tests are usually a bad idea. Using reflection is
not recommended in most cases though the opposite is true for CBT.&lt;/p&gt;
&lt;p&gt;Reflection allows the previous examples to have tests written in a
fairly flexible and dynamic manner. Future changes would automatically
be tested.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tests to ensure particular types within a namespace have the correct
    attribute/property applied.&lt;/li&gt;
&lt;li&gt;Tests to ensure particular types within a namespace have the correct
    base class.&lt;/li&gt;
&lt;li&gt;Tests that assemblies/packages required at runtime are present
    within the bin directory.&lt;/li&gt;
&lt;li&gt;Tests that folders/namespaces match a team/project naming standard.&lt;/li&gt;
&lt;li&gt;And so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Simpler Tests&lt;/h3&gt;
&lt;p&gt;In some cases reflection is not a suitable tool for convention based
tools. In this scenarios a simpler style of test is required. These are
essentially convention based tests that ensure additional tests are
written. These simple tests act more as a prompt to the developer
reminding them to add a test for a particular convention.&lt;/p&gt;
&lt;p&gt;This test would first detect how many types exist within the namespace
and then detect how many tests have been written for those types. While
this style of test does nothing other than really count the number of
expected conventions versus the number of tests, the failure of this
test provides a hint to the developer that they have forgotten
something.&lt;/p&gt;
&lt;p&gt;The key with these simple detection tests is to provide a good failure
message that includes details on why the test failed, and more
importantly why and how a new test should be added.&lt;/p&gt;
&lt;p&gt;These simple CBT work when the use of reflection is difficult. While
they may seem primitive, they do provide value as simple reminders to
add future tests. Despite this it's worth remembering they provide no
guarantee of the quality of the additional tests that are written. Here
peer review is required.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add convention based tests if a convention cannot be detected by
    static analysis or you cannot detect issues with higher level tests.&lt;/li&gt;
&lt;li&gt;Reflection is a valid tool to write a single CBT that covers many
    areas.&lt;/li&gt;
&lt;li&gt;If a CBT is hard to write, use a test to prompt you to add further
    tests in the future.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category><category term="testing"></category></entry><entry><title>Finance For Software Developers</title><link href="https://blog.shaunfinglas.co.uk/2017/01/finance-for-software-developers.html" rel="alternate"></link><published>2017-01-04T00:00:00+01:00</published><updated>2017-01-04T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2017-01-04:/2017/01/finance-for-software-developers.html</id><summary type="html">&lt;p&gt;Back at the start of 2016 I set about sorting my personal finances out,
inspired by &lt;a href="https://www.amazon.co.uk/d/Books/Soft-Skills-software-developers-manual/1617292397"&gt;Soft
Skills&lt;/a&gt;.
The book makes a point to consider passive income as a viable solution
to wealth building. The reason for this is simple, software developers
tend to get paid well if working professionally …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back at the start of 2016 I set about sorting my personal finances out,
inspired by &lt;a href="https://www.amazon.co.uk/d/Books/Soft-Skills-software-developers-manual/1617292397"&gt;Soft
Skills&lt;/a&gt;.
The book makes a point to consider passive income as a viable solution
to wealth building. The reason for this is simple, software developers
tend to get paid well if working professionally. Like most professionals
though, during school or university you won't be guided on how to handle
money until you are thrown into the deep end.&lt;/p&gt;
&lt;h3&gt;Assets and Liabilities&lt;/h3&gt;
&lt;p&gt;At the start of February we listed all our assets versus liabilities and
were rather shocked. Our net worth (assets minus liabilities) was
negative. Not only was it negative, it was negative by a rather large
number. This scary realisation forced us down the path of personal
finance. Most of this knowledge came from a handful of books and took no
more than a few months to really get to grips with the basics. For the
small cost of a few books and your time the return on this investment is
huge. In summary you want to maximize assets (things that give you
income) and reduce or eliminate liabilities (things that take your money
away) as much as possible.&lt;/p&gt;
&lt;h3&gt;Investing&lt;/h3&gt;
&lt;p&gt;Despite knowing nothing than the basics of the stock market and
investing, investing in stock (sometimes known as equities) is one of
the ways to maximise assets. Again a few simple &lt;a href="https://www.amazon.co.uk/Millionaire-Teacher-Andrew-Hallam/dp/0470830069"&gt;introductory
books&lt;/a&gt;
and some online research was all that was required. Having explored
individual stocks, we settled on low cost index funds as our main
investment solution. Before we could invest though we had to attack our
debt. Without eliminating the debt we were unable to maximize our
investments. Paying off debt is also considered a guaranteed return,
something you cannot get with investments, hence it should be your first
target.&lt;/p&gt;
&lt;h3&gt;Debt&lt;/h3&gt;
&lt;p&gt;Attacking debt took up the whole of 2016. Thankfully there was an easy
system to follow. The difficult part is sticking the course, though you
will quickly start to see benefits. The best solution we found is the
debt snowball, which is part of &lt;a href="http://www.daveramsey.com/baby-steps/"&gt;Dave Ramsey's Baby
Steps&lt;/a&gt;. Steps 1-3 must be
completed in order, sequentially. While steps 4, 5 and 6 can be
completed in parallel.&lt;/p&gt;
&lt;h4&gt;Baby Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Save £1,000 in an emergency fund.&lt;/li&gt;
&lt;li&gt;Pay debts down from smallest to largest using the debt snowball
    method.&lt;/li&gt;
&lt;li&gt;Save 3-6 months of living expenses for a fully-funded emergency
    fund.&lt;/li&gt;
&lt;li&gt;Invest 15% of income into retirement.&lt;/li&gt;
&lt;li&gt;Start funding higher education for children.&lt;/li&gt;
&lt;li&gt;Pay off the mortgage early!&lt;/li&gt;
&lt;li&gt;Build wealth and give!&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;You Need a Budget&lt;/h3&gt;
&lt;p&gt;I was actually advised to create a stick to a budget by a friend while
in university, however I ignored her wise advice. A budget is a crucial
tool to paying off debt and in turn staying out of debt. The best budget
to use with the baby steps is a zero based budget. In this case you run
your personal finances like you would a company such as a bank. At the
end of each month (or whenever you receive income) your balance should
be fully allocated to equal zero pounds available. All of your money is
either paying of debt or working hard in investments, while the rest is
allocated to expenses.&lt;/p&gt;
&lt;p&gt;A written monthly budget is single handedly the best piece of personal
finance I can recommend to others. Once you tell your money where to go,
and have a audit trail of where you are spending you have control. How
we lived prior to a monthly budget is a mystery, though it does explain
the shocking net worth we amassed. To be blunt, get and use a budget.
You need to.&lt;/p&gt;
&lt;h3&gt;Retirement&lt;/h3&gt;
&lt;p&gt;Previously I thought of retirement as something you do when you're old.
Think of your parents or grandparents. However this is not the case.
Retirement is simply being able to do what you want to do, whether or
not this includes work. Being able to wake up each day and do what you
want is a powerful thing.&lt;/p&gt;
&lt;p&gt;Another &lt;a href="http://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/"&gt;shock
discovery&lt;/a&gt;
was the fact that becoming financially independent in order to retire
can be done in ten years, instead of the traditional thirty of forty
year window. A &lt;a href="https://www.reddit.com/r/financialindependence/"&gt;whole community
exists&lt;/a&gt; that prove this
is the case - FIRE (Financially Independent - Retire Early). To
summarise this process, instead of doing what the norm do and investing
10% of your income, invest 50%-90% and you can shorten the process
dramatically. FIRE is a long term goal that requires minimized expenses
and a strict budget, but the pay off will be more than worth it.&lt;/p&gt;
&lt;h3&gt;2017&lt;/h3&gt;
&lt;p&gt;Our personal goals for 2017 include completing our six month emergency
fund, followed by aggressively paying off our mortgage, with the goal to
complete this within two and half years versus the remaining twenty year
window. Without the basic concepts above this would have not been
possible.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Eliminate all debt, and stay out of debt.&lt;/li&gt;
&lt;li&gt;Create and use a monthly budget.&lt;/li&gt;
&lt;li&gt;Use the baby steps to get out of debt and build wealth.&lt;/li&gt;
&lt;li&gt;Low cost index funds are a recommended way of simple investing.&lt;/li&gt;
&lt;li&gt;Retirement isn't a thirty or forty year process.&lt;/li&gt;
&lt;li&gt;No one will teach you personal finance, it's up to yourself to get
    to grips with it.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category></entry><entry><title>DDD - Events</title><link href="https://blog.shaunfinglas.co.uk/2016/11/ddd-events.html" rel="alternate"></link><published>2016-11-01T00:00:00+01:00</published><updated>2016-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-11-01:/2016/11/ddd-events.html</id><summary type="html">&lt;p&gt;The act of something happening is one of the most crucial aspects of implementing Domain Driven Design (DDD). I missed the importance of domain events when first exploring DDD.&lt;/p&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;Most requirements come in the form &lt;q&gt;when something happens, do this&lt;/q&gt;. &lt;em&gt;Something&lt;/em&gt; in this case would be an action, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The act of something happening is one of the most crucial aspects of implementing Domain Driven Design (DDD). I missed the importance of domain events when first exploring DDD.&lt;/p&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;Most requirements come in the form &lt;q&gt;when something happens, do this&lt;/q&gt;. &lt;em&gt;Something&lt;/em&gt; in this case would be an action, and &lt;em&gt;this&lt;/em&gt; would be the result taken afterwards. Most domain events can be discovered when requirements use this sort of language.&lt;/p&gt;
&lt;p&gt;Another important consideration is that most requirements are evolutionary. They are often added as the feature is developed. What may start off as a single piece of behaviour, may evolve into something much more complex. Events allow this evolution in a decoupled manner.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;When a blog post is published, update the authors statistics&lt;/q&gt;. In code this may have a signature similar to:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/514772dbb07895410be283fa71067b97.js"&gt;&lt;/script&gt;

&lt;p&gt;The publish method is responsible for the publishing of the post. This entity holds responsibility for the pre-conditions and post conditions of such action. Also the method takes a domain service that will update the authors statistics as this is not the responsibility of the &lt;code&gt;Post&lt;/code&gt; entity itself.&lt;/p&gt;
&lt;p&gt;A new requirement may be to automatically send out a tweet with the post title and description. Without events this could be added in a similar manner.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/ad891cd9cb64cae26f18470bd15b7e6e.js"&gt;&lt;/script&gt;

&lt;p&gt;Again the service will do the right thing once invoked, in this case send a tweet out. As you can see we could repeat this sort of enhancement over and over. While this does indeed complete the functionality that the business requires, the solution is far from elegant. A much better solution is to rely upon domain events.&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;script src="https://gist.github.com/Finglas/8b5bd981aa9e0ba33ae041122a6a448b.js"&gt;&lt;/script&gt;

&lt;p&gt;The difference here is the publish method does nothing other than its internal logic. However it does publish (raise) an event to indicate a post has been published. Subscribers (listeners) to this event can then perform their corresponding actions.&lt;/p&gt;
&lt;p&gt;Using the previous example two subscribers would be configured to send tweets and update author statistics. Each of these subscribers (handlers) would run in process by default, so their internal implementation should be as simple as possible. In other words record the request, and process this in the background. &lt;a href="http://udidahan.com/2009/06/14/domain-events-salvation/"&gt;The code to raise the event is relatively simple&lt;/a&gt;, and can simply forward to any registered subscribers based upon a type. Any failure should not cause the publish to fail. Alternatively external subscribers could also handle this event, though this implementation would require the use of resilient and durable storage such as message queues or databases.&lt;/p&gt;
&lt;p&gt;Ultimately domain events allow for extremely loosely coupled code, that is open for extension. Each handler can be developed and tested in isolation. The use of composition means that new features should become easy additions, with low risk.&lt;/p&gt;
&lt;p&gt;One aspect that may stand out is that the use of this pattern uses a static class to publish events. While in most cases this would be poor for testing, this is not the case here. For tests prior to each step executing you can simply clear any registered handlers and configure what is required. If no handlers are configured, then nothing occurs. Also test handlers that simply report that fact a message has been raised are more than adequate.&lt;/p&gt;
&lt;h3&gt;Downsides&lt;/h3&gt;
&lt;p&gt;While this refactored example is loosely coupled, and open for extension, the intent of what happens after a publish is somewhat lost. Before it was clearer to see what the &lt;code&gt;Publish&lt;/code&gt; method would do. This is a trade off, though the pros outweigh the cons here. Most IDE's have a way of showing you the use of all types, so we could easily see any handlers that consume the &lt;code&gt;PostPublishedEvent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even with IDE/editor support, the loosely coupled nature of Domain Events can be tricky to debug at runtime. For example I once accidentally configured a game engine to handle events triggered from player movement. This meant that each frame of the game executed the collision detection algorithm twice, instead of once. Without a clear audit of what handlers are being executed upon what events, the use of domain events can be tricky to debug.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Domain Events are a key area of DDD.&lt;/li&gt;
&lt;li&gt;Use events to write loosely coupled code.&lt;/li&gt;
&lt;li&gt;Ensure you have a method of auditing with handlers respond to which events.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category></entry><entry><title>POODR Highlights Part 2</title><link href="https://blog.shaunfinglas.co.uk/2016/11/poodr-highlights-part-2.html" rel="alternate"></link><published>2016-11-01T00:00:00+01:00</published><updated>2016-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-11-01:/2016/11/poodr-highlights-part-2.html</id><summary type="html">&lt;p&gt;Two other stand out topics from POODR were the use of tests and
inheritance. The first set of &lt;a href="https://blog.shaunfinglas.co.uk/2016/10/poodr-highlights-part-1.html"&gt;higlights covered dependencies and
arguments&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Tests&lt;/h4&gt;
&lt;p&gt;A conclusion that I agree with is that in general “most programmers
write too many tests.”. A great quote in the book sees “tests (as) the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two other stand out topics from POODR were the use of tests and
inheritance. The first set of &lt;a href="https://blog.shaunfinglas.co.uk/2016/10/poodr-highlights-part-1.html"&gt;higlights covered dependencies and
arguments&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Tests&lt;/h4&gt;
&lt;p&gt;A conclusion that I agree with is that in general “most programmers
write too many tests.”. A great quote in the book sees “tests (as) the
canary in the coal mine; when the design is bad, testing is hard”. Sadly
too many poor tests are often written. Examples such as property or
construction tests, framework tests or tests that are coupled to the
implementation are all common problems. Instead we should aim to get
better and more value out of our tests by writing fewer of them, but of
higher quality. In short test everything once and only in the proper
place. A first step is to simply focus on the ROI that tests give, and
focus on the high risk areas.&lt;/p&gt;
&lt;p&gt;The test categories are broken down into two core types of tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incoming Public Messages (public API)&lt;/li&gt;
&lt;li&gt;Outgoing Public Messages (To public API of another object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State based tests should be used for incoming public messages. While
verification based tests should be used for outgoing public messages as
the state is tested on the receiver, elsewhere. The &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;distinction between
commands and
queries&lt;/a&gt;
is also highlighted. In summary incoming messages should be tested for
the state they return. Outgoing commands should be tested to ensure they
get sent. Outgoing query messages should not be tested, merely stubbed.&lt;/p&gt;
&lt;p&gt;These testing rules are nothing new, but the summary and importance of
following these guidelines is nicely summarized within the chapter
covering testing principles.&lt;/p&gt;
&lt;h4&gt;Inheritance&lt;/h4&gt;
&lt;p&gt;Inheritance is widely abused and misunderstood. Either inheritance is
the solution for all problems, or you're advised to never use
inheritance. POODR takes a more pragmatic approach. Inheritance is a
tool that can sometimes provide an excellent solution, however you are
&lt;a href="https://blog.shaunfinglas.co.uk/2015/06/dry-vs-coupling-in-production-code.html"&gt;better off duplicating
code&lt;/a&gt;
and &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;defer such
decisions&lt;/a&gt;
until you know more.&lt;/p&gt;
&lt;p&gt;The wrong abstraction is harder to work with than duplicated code as
duplication can easily be removed. A bad abstraction that is used in
many places is much harder however. The application of the &lt;a href="http://wiki.c2.com/?RuleOfThree"&gt;Rule of
Three&lt;/a&gt; can help here.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tests are hard - write less but focus on the quality.&lt;/li&gt;
&lt;li&gt;Minimize the number of tests you write by using boundaries via
    incoming/outgoing messages.&lt;/li&gt;
&lt;li&gt;Inheritance is not all bad.&lt;/li&gt;
&lt;li&gt;Defer or hold back using inheritance until you understand the
    problem.&lt;/li&gt;
&lt;/ul&gt;</content><category term="highlight"></category></entry><entry><title>Constant Object Anti Pattern</title><link href="https://blog.shaunfinglas.co.uk/2016/10/constant-object-anti-pattern.html" rel="alternate"></link><published>2016-10-01T00:00:00+02:00</published><updated>2016-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-10-01:/2016/10/constant-object-anti-pattern.html</id><summary type="html">&lt;p&gt;Most constants are used to remove magic numbers or variables that lack
context. A classic example would be code littered with the number 7.
What does this refer to exactly? If this was replaced with DaysInWeek or
similar, much clarity is provided. You can determine that code
performing offsets would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most constants are used to remove magic numbers or variables that lack
context. A classic example would be code littered with the number 7.
What does this refer to exactly? If this was replaced with DaysInWeek or
similar, much clarity is provided. You can determine that code
performing offsets would be adding days, rather than a mysterious number
seven.&lt;/p&gt;
&lt;p&gt;Sadly a common pattern which uses constants is the use of a single
constant file or object.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/5a54e173296d81dcbdbfb8016f162150.js"&gt;&lt;/script&gt;

&lt;p&gt;The beauty of constants is clarity, and the obvious fact such variables
are fixed. When a constant container is used, constants are simply
lumped together. These can grow in size and often become a dumping
ground for all values within the application.&lt;/p&gt;
&lt;p&gt;A disadvantage of this pattern is the actual value is hidden. While a
friendly variable name is great, there will come a time where you will
want to know the actual value. This forces you to navigate, if only to
peek at the value within the constant object. A solution is to simple
perform a refactor to move the variable closer to use. If this is within
a single method, let the constant live within the method. If a class,
let the constant live at a field level. Finally if the constant is used
across multiple classes, find a shared home and rely on a well thought
out namespace.&lt;/p&gt;
&lt;p&gt;A similar issue regarding constants is the use of configuration files or
similar to set the values. While the const keyword is dropped in this
case, the object performs the same role. A public key, followed by a
value that is used. &lt;a href="https://blog.shaunfinglas.co.uk/2016/04/x-of-configuration-is-never-used.html"&gt;The anti pattern in this case is treating all
values as requiring
configuration&lt;/a&gt;.
Unless you need to change such values at runtime or based on deployment
models, inline constants are much preferred. Literal values, mainly
strings can often be left inline with limited downsides also. For
example, a fixed, relative file path is much better left inline. If you
are worried about lack of context, then the use of named arguments can
help.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/16d8dd7c759a182b4eafb132d7f8fd78.js"&gt;&lt;/script&gt;

&lt;h2&gt;Lessons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keep constants local to methods, or classes.&lt;/li&gt;
&lt;li&gt;Avoid constant objects or files as these will become bloated and
    lack context.&lt;/li&gt;
&lt;li&gt;Only introduce configuration for aspects that need or will change.
    Defer second guessing.&lt;/li&gt;
&lt;li&gt;Use named arguments to add context for inline variables.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category><category term="programming"></category></entry><entry><title>POODR Highlights Part 1</title><link href="https://blog.shaunfinglas.co.uk/2016/10/poodr-highlights-part-1.html" rel="alternate"></link><published>2016-10-01T00:00:00+02:00</published><updated>2016-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-10-01:/2016/10/poodr-highlights-part-1.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.poodr.com/"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt; or
POODR is clearly a book about Ruby development, however the odd aspect
is much of the concepts apply to other languages. In fact I've taken
these ideas and used them both before and after reading the book in
other dynamic languages and even static …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.poodr.com/"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt; or
POODR is clearly a book about Ruby development, however the odd aspect
is much of the concepts apply to other languages. In fact I've taken
these ideas and used them both before and after reading the book in
other dynamic languages and even static languages such as C#. In
summary the book is well worth a read, even if you don't do Ruby
development full-time.&lt;/p&gt;
&lt;p&gt;A few of the highlights for me will be spread out across the following
posts.&lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;The author takes a firm stance on dependencies. Anything that cannot be
controlled by the class itself should be protected from change. In other
words a message sent to &lt;code&gt;self/this&lt;/code&gt; is preferred than directly
interacting with a dependency.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/086ca41a77d1623a999a9dcf8ddc97ac.js"&gt;&lt;/script&gt;

&lt;p&gt;I've followed this pattern in the past, but the seeing the
justifications for the benefit of this has made me realise the
importance of such a practice. In the first example the publish method
directly knows about the twitter feed it must interact with. In the
second example the class sends a message to itself, while the class
internally will still know how to interact with the dependency this is
hidden. The private method has this responsibility.&lt;/p&gt;
&lt;p&gt;With a single use you could argue there is not much difference, but the
&lt;code&gt;PostPublished&lt;/code&gt; method is a nice seam for both testing and changes. We
could easily add assertions or make changes within the &lt;code&gt;PostPublished&lt;/code&gt;
method without fear of changing anything else. Finally if the
&lt;code&gt;PostPublished&lt;/code&gt; method is used in multiple places this abstraction pays
for itself straight away.&lt;/p&gt;
&lt;h3&gt;Arguments&lt;/h3&gt;
&lt;p&gt;Arguments are another key area that can change. Just like dependencies,
the book focuses on the idea that making small changes up front can lead
to flexible code that can handle change in the future. While you could
argue that the order of arguments changing in the future may never
happen, using named arguments has a great side effect on readability.&lt;/p&gt;
&lt;p&gt;In static languages your IDE will most likely have a automated method of
adding these in, so the C# example below can easily add named arguments
with the press of a keyboard shortcut.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/8787b97afbfef6c4835ee3b3138f1025.js"&gt;&lt;/script&gt;

&lt;p&gt;Named arguments provide increased readability with very little effort.
Tests often benefit from the use of named arguments as you can remove
the need for temporary variables, and instead in-line them to the
location of use. While the third example is more “wordy”, they can
safely be re-ordered without fear of compilation or runtime errors.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Wrap dependencies even if they are only used once. A message to
    &lt;code&gt;self/this&lt;/code&gt; is preferred. Easier to change and provides seams for
    future work.&lt;/li&gt;
&lt;li&gt;Use named arguments for improved readability and the ability to
    reduce temporary variables. Named variables can be dropped if there
    is only one argument or the variable is well named.&lt;/li&gt;
&lt;/ul&gt;</content><category term="highlight"></category><category term="code"></category><category term="programming"></category></entry><entry><title>The New Guy</title><link href="https://blog.shaunfinglas.co.uk/2016/10/the-new-guy.html" rel="alternate"></link><published>2016-10-01T00:00:00+02:00</published><updated>2016-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-10-01:/2016/10/the-new-guy.html</id><summary type="html">&lt;p&gt;Everyone is new at some point. No matter your experience level. You're
either new to the team or new to the business. Being the “new person” is
both a blessing and a curse.&lt;/p&gt;
&lt;h3&gt;You're New&lt;/h3&gt;
&lt;p&gt;When you're new you come with no baggage. You're full of questions and
curiosity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Everyone is new at some point. No matter your experience level. You're
either new to the team or new to the business. Being the “new person” is
both a blessing and a curse.&lt;/p&gt;
&lt;h3&gt;You're New&lt;/h3&gt;
&lt;p&gt;When you're new you come with no baggage. You're full of questions and
curiosity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do we do it this way?&lt;/li&gt;
&lt;li&gt;Isn't there a better way of doing this?&lt;/li&gt;
&lt;li&gt;Have you considered this instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all great questions for new starters to ask, and for teams to
hear.&lt;/p&gt;
&lt;h3&gt;You Have a New Team Member&lt;/h3&gt;
&lt;p&gt;When you have a new team member you gain someone with a fresh
perspective. They're full of questions and curiosity. Rather than
history, they'll be open to new and fresh challenges. A new member can
ask you to question current practices. It is very easy to overlook
problem areas only until someone with a fresh outlook arrives.&lt;/p&gt;
&lt;h3&gt;How to be New&lt;/h3&gt;
&lt;p&gt;There are two roles a new team member must play.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning&lt;/li&gt;
&lt;li&gt;Challenging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The learning phase should involve questions, shadowing and pairing. The
goal is to learn about the system, the architecture and the business.&lt;/p&gt;
&lt;p&gt;The second phase should be to challenge and question the status quo.
Provide better solutions, or ask for justifications and explanations.
This is both win-win for the team and the new member. They'll learn and
the team will gain a fresh insight into their successes and failures.&lt;/p&gt;
&lt;p&gt;The key part of being a new team member is balance within these areas.
Too much learning and no challenging will benefit no one. Likewise
kicking up a fuss over every detail is not going to end well.&lt;/p&gt;
&lt;h3&gt;New Starter Balance&lt;/h3&gt;
&lt;p&gt;A past mistake I've made is swaying towards learning the system, versus
challenges areas that were clearly wrong or needed improving. This is a
tough area, as you don't want to rock the boat, but at the same time
some rocking is required. The key is to balance this.&lt;/p&gt;
&lt;p&gt;Advice to my past self would to tackle areas that you can have an impact
in. For example a neglected process or area. By picking your battles in
this manner you can slowly build your brand within the team, further
allowing you to take on the more controversial challenges. For example
if you've been around for a while, and proven yourself you'll have an
easier time suggesting and implementing change.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Remember the &lt;a href="http://johnstepper.com/2013/10/26/the-five-monkeys-experiment-with-a-new-lesson/"&gt;Monkey and Banana
    Analogy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Balance between learning and challenging when a new starter.&lt;/li&gt;
&lt;li&gt;Start slowly when a new starter, stack up small wins over time
    instead of a big bang approach.&lt;/li&gt;
&lt;li&gt;Embrace new starters, use them to test your processes and
    documentation.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category></entry><entry><title>New and Shiny Things</title><link href="https://blog.shaunfinglas.co.uk/2016/09/new-and-shiny-things.html" rel="alternate"></link><published>2016-09-01T00:00:00+02:00</published><updated>2016-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-09-01:/2016/09/new-and-shiny-things.html</id><summary type="html">&lt;p&gt;There is risk with upgrading anything, be it language, framework,
library, OS or third parties.&lt;/p&gt;
&lt;p&gt;In the past I was rather gung-ho about upgrading. New version out? We
need it. In fact, this need is often a want. The new version often seems
better. Developers seem addicted to the latest …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is risk with upgrading anything, be it language, framework,
library, OS or third parties.&lt;/p&gt;
&lt;p&gt;In the past I was rather gung-ho about upgrading. New version out? We
need it. In fact, this need is often a want. The new version often seems
better. Developers seem addicted to the latest and greatest.&lt;/p&gt;
&lt;p&gt;One of the best, but also one of the worst problems with software
development is weekly there is something new to use or try. Keeping pace
is impossible.&lt;/p&gt;
&lt;h4&gt;Internet Echo Chamber Effect&lt;/h4&gt;
&lt;p&gt;If you look at a news article on the release of something, you feel as
if you are the only person not using it. Everyone is is using it, we
need to as well.&lt;/p&gt;
&lt;p&gt;In fact this is quite the opposite case. A site about the latest web
framework will seem as if everyone is using the framework apart from
yourself. This is known as the &lt;a href="https://en.wikipedia.org/wiki/Echo_chamber_%28media%29"&gt;Internet Echo Chamber
Effect&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Wait for a Patch&lt;/h4&gt;
&lt;p&gt;Wise advice I received and saw others follow was the minor or patch
adoption. If version 2 comes out, wait for 2.1. Let others find the
issues and wait for the version to stabilize. If you really must use
version 2, use it in a low risk way. Personal projects or in house
solutions make sense. You can keep pace but reduce risk in this manner.&lt;/p&gt;
&lt;h4&gt;Boring but Stable&lt;/h4&gt;
&lt;p&gt;Another approach is to take widely used, stable solutions. Avoiding
anything new or cutting edge except for personal projects or internal
projects.&lt;/p&gt;
&lt;p&gt;If your job is to write software to sell widgets, focus solely on that,
what you use behind the scenes really doesn't matter. As long as you can
delivery value and aid the sale of widgets you're on track for success.&lt;/p&gt;
&lt;p&gt;A similar alternative is to use boring solutions for anything that has
high risk. While using newer, more exciting solutions for low risk
projects. Again risk is managed and reduced. If the new, cutting edge
solution becomes the norm, eventually you can adopt this in the future.&lt;/p&gt;
&lt;p&gt;A younger, less experienced self would not find this advice at all
appealing. After all if the tests pass why can't you upgrade to the
latest and greatest? The main issue is risk, which will be the subject
of a future post. Every single change, be it a single line of code has
risk.&lt;/p&gt;
&lt;p&gt;The one exception to this advice is security concerns. If a security
release is available you should aim to upgrade as soon as possible.
Usually such releases form minor releases, meaning risk is low and
matches the delayed upgrade path above.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Any change has risk.&lt;/li&gt;
&lt;li&gt;Reduce risk when handling new technology.&lt;/li&gt;
&lt;li&gt;Either use stable versions or boring solutions.&lt;/li&gt;
&lt;li&gt;Play and test new technology on the side, in low risk scenarios.&lt;/li&gt;
&lt;li&gt;What technology you use to build something actually doesn't matter
    in most cases.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category></entry><entry><title>Past Mistakes - ORMs and Bounded Contexts</title><link href="https://blog.shaunfinglas.co.uk/2016/08/past-mistakes-orms-and-bounded-contexts.html" rel="alternate"></link><published>2016-08-01T00:00:00+02:00</published><updated>2016-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-08-01:/2016/08/past-mistakes-orms-and-bounded-contexts.html</id><summary type="html">&lt;p&gt;Sticking with the theme of documenting past mistakes, it's worth
expanding a real life scenario where I was unaware of the use of bounded
contexts and fully understanding the tools you use.&lt;/p&gt;
&lt;h4&gt;Ignoring a Bounded Context&lt;/h4&gt;
&lt;p&gt;A fellow developer set upon a quest to rid numerous projects of
duplicated records …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sticking with the theme of documenting past mistakes, it's worth
expanding a real life scenario where I was unaware of the use of bounded
contexts and fully understanding the tools you use.&lt;/p&gt;
&lt;h4&gt;Ignoring a Bounded Context&lt;/h4&gt;
&lt;p&gt;A fellow developer set upon a quest to rid numerous projects of
duplicated records, which was effectively the active record pattern.
This was a huge under taking split across hundreds of thousands of lines
of code, over numerous separate projects. Close to completing the task I
assisted and finally the shared library containing a single record for
each type was complete. Each project now referenced the shared copy.
This was versioned as each build was completed.&lt;/p&gt;
&lt;p&gt;For a while this worked with no problems. It certainly felt nice to see
the reduction in duplicated code. Sadly sometime later myself and
another developer made a seemingly innocent change. In terms of
relation, the change was as far removed from the production error that
we had just been alerted to was. There was no link. It was a different
project, in a different path, on a different model. The only commonality
was the fact the issue only occurred after the previous deploy.&lt;/p&gt;
&lt;h4&gt;ORMs and Changes&lt;/h4&gt;
&lt;p&gt;Several minutes of panic later, the problem was spotted. While the model
we had changed had no direct relation, indirectly there was. As each
record was loaded by the ORM in question, links and dependencies where
also loaded or checked. So were the children's links and dependencies.
Finally this would hit the newly changed record. Due to the database
changing ahead of the library, numerous other projects now had a runtime
error. As we naively believed we were only working within a single
project, we deployed the changes within the one project. As the library
was shared, all other projects were now vulnerable.&lt;/p&gt;
&lt;p&gt;This lack of &lt;a href="https://blog.shaunfinglas.co.uk/2016/06/ddd-bounded-contexts.html"&gt;bounded
context&lt;/a&gt;,
and focusing on &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/dry-vs-coupling-in-production-code.html"&gt;removal of
duplication&lt;/a&gt;
was not the only lesson here. This issue painfully highlighted the need
and importance to know exactly what your tools are doing, especially
when they are hidden behind the scenes. In fact, my use of ORMs other
than micro-ORMs is next to non existent at present.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use bounded contexts.&lt;/li&gt;
&lt;li&gt;Favour loose coupling, over reduced duplication.&lt;/li&gt;
&lt;li&gt;Anything shared must be deployed and tested as a single unit,
    otherwise remove the shared component.&lt;/li&gt;
&lt;li&gt;ORMs (or other tools) should be understand and respected.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category><category term="past-mistakes-series"></category></entry><entry><title>Test Your Live System using Live Service Tests</title><link href="https://blog.shaunfinglas.co.uk/2016/08/test-your-live-system-using-live.html" rel="alternate"></link><published>2016-08-01T00:00:00+02:00</published><updated>2016-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-08-01:/2016/08/test-your-live-system-using-live.html</id><summary type="html">&lt;p&gt;Traditionally there are three categories of functional tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Unit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is often refereed to as the testing pyramid. Unit tests form the
bulk of your suite, followed by a smaller subset of integration tests.
Acceptance tests that cover features should be the tip of your testing
strategy, few …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Traditionally there are three categories of functional tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Unit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is often refereed to as the testing pyramid. Unit tests form the
bulk of your suite, followed by a smaller subset of integration tests.
Acceptance tests that cover features should be the tip of your testing
strategy, few in number. These are great but there is a missing suite of
tests - live service tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Live Service Tests&lt;/li&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Unit&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Live Service Tests.&lt;/h4&gt;
&lt;p&gt;The role of live service tests (LST) is to test the live system against
the production environment and configuration. LST would be fewer in
number than acceptance tests. Unlike acceptance tests, these should run
constantly. Once a run has completed, kick of a new test run. This will
require a dedicated machine or piece of infrastructure, but the value
provided is well worth it.&lt;/p&gt;
&lt;p&gt;LST should focus on journeys instead of functionality or features. In
contrast to acceptance tests a user journey would be the core purpose of
the system. For example, a LST suite to cover this blog would ensure the
home page loads, an individual post can be loaded, and the archive is
accessible. The rest of the site such as comments or social media
interactions could be broken, but the core purpose of the system is
working. Readers can read and browse the blog. If at any time the tests
detect a failure in the core journey there is a big problem.&lt;/p&gt;
&lt;h4&gt;Why&lt;/h4&gt;
&lt;p&gt;LST offer the fastest feedback possible due to the fact they are
constantly running. It is far more desirable to detect a problem before
your users do. Naturally LST offer great protection after deploys.
Deployment of new code is one of the times you are more likely to
encounter issues, so a suite of tests triggered after a deployment is a
natural fit. LST also protect against unplanned events. In my
experience, exceeding disk space, DNS failure, third party issues and
more have all be detected.&lt;/p&gt;
&lt;h4&gt;How To&lt;/h4&gt;
&lt;p&gt;Adding another suite of tests may sound like increased effort but the
cost associated with LST is rather low. Sometimes acceptance tests can
be run as LST, meaning no extra effort. Care must be taken here if the
tests perform anything destructive or anything that interacts with third
parties.&lt;/p&gt;
&lt;p&gt;Alternatively writing LST is simpler than standard acceptance tests. The
same tooling can be used such as Selenium, NUnit and so forth. As the
tests themselves focus on journeys rather than functionality, the tests
are often less complex to write.&lt;/p&gt;
&lt;p&gt;The only difficulty LST introduce is the fact they are executing against
the live system. Consider interactions with a third party. Using a real
account on the real system may be problematic. One way to get around
this issue is to embed test functionality within the system itself. For
example you could set up a test account which the tests use. Instead of
executing against the third party system, the dummy account is used.
Likewise most third parties have test accounts which can be setup and
used instead.&lt;/p&gt;
&lt;p&gt;LST are a nice compliant to a diagnostic dashboard. If your dash is
reporting no issues, and your tests are green, you can be confident the
system is operating in a &lt;em&gt;good enough&lt;/em&gt; state.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Functional tests are not enough.&lt;/li&gt;
&lt;li&gt;Use live service tests to test the real production system.&lt;/li&gt;
&lt;li&gt;Run live service tests constantly for the earliest feedback
    possible.&lt;/li&gt;
&lt;li&gt;Alter production code to introduce test functionality.&lt;/li&gt;
&lt;li&gt;Make use of test accounts and anything else that third parties may
    offer.&lt;/li&gt;
&lt;/ul&gt;</content><category term="testing"></category></entry><entry><title>Why You Should Do Code Katas</title><link href="https://blog.shaunfinglas.co.uk/2016/08/why-you-should-do-code-katas.html" rel="alternate"></link><published>2016-08-01T00:00:00+02:00</published><updated>2016-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-08-01:/2016/08/why-you-should-do-code-katas.html</id><summary type="html">&lt;p&gt;&lt;a href="http://codekata.com/"&gt;Code katas&lt;/a&gt; are simple exercises that are meant
to be repeated. They are great for learning a new language or tool. The
goal is to learn something, not to complete them. In fact, if you don't
finish a kata that is perfectly normal as long as you take something
away …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://codekata.com/"&gt;Code katas&lt;/a&gt; are simple exercises that are meant
to be repeated. They are great for learning a new language or tool. The
goal is to learn something, not to complete them. In fact, if you don't
finish a kata that is perfectly normal as long as you take something
away. The beauty of code katas is they are small enough to be repeated
and possibly completed within small time slots.&lt;/p&gt;
&lt;h4&gt;Takeaways&lt;/h4&gt;
&lt;p&gt;Beginner or expert there will be something you can learn or take away.
Beginners should take away language skills, tooling tricks and more.
This is furthered when pair programming.&lt;/p&gt;
&lt;p&gt;Experts should be inclined to try new solutions rather than rinse
repeat. Instead of solving the problem in the manner you do 9-5, try
something completely new. Solving a kata ten times the same way is a
waste. Instead solve it once, ten different ways. In short, experiment
in code katas, not your production code.&lt;/p&gt;
&lt;h4&gt;Going Further&lt;/h4&gt;
&lt;p&gt;Sadly a small minority seem such simple exercises as below them. No one
is above doing a kata. Constant improvement or training is essential
regardless of level. Katas alone are not enough to support personal
development. Experience, reading and practical development are all still
required. However when code katas are combined they are an excellent
aid.&lt;/p&gt;</content><category term="programming"></category><category term="retro"></category></entry><entry><title>Notes on Building and Deploying Software</title><link href="https://blog.shaunfinglas.co.uk/2016/07/notes-on-building-and-deploying-software.html" rel="alternate"></link><published>2016-07-10T15:18:00+02:00</published><updated>2016-07-10T15:18:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-10:/2016/07/notes-on-building-and-deploying-software.html</id><summary type="html">&lt;h4&gt;Builds and Deploys&lt;/h4&gt;
&lt;p&gt;Ideally a build and deploy should be a single step, included within the
check out of the repository. Additionally the build should include and
install pre-requisites if missing. You can safely assume the target OS
is at least configured, but any missing packages should be installed as …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Builds and Deploys&lt;/h4&gt;
&lt;p&gt;Ideally a build and deploy should be a single step, included within the
check out of the repository. Additionally the build should include and
install pre-requisites if missing. You can safely assume the target OS
is at least configured, but any missing packages should be installed as
needed.&lt;/p&gt;
&lt;p&gt;The core steps regardless of platform or technology follow a common
pattern. A number of these steps can be performed asynchronously. For
example, it is possible to run a suite of tests in parallel, rather than
individually. This can save massive amounts of time. As a first approach
perform all steps synchronously, only adjusting once stable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
Compile/Lint - *Sync*

&lt;/li&gt;
&lt;li&gt;
Run Unit Tests - *Async*

&lt;/li&gt;
&lt;li&gt;
Deploy - *Async*

&lt;/li&gt;
-   Warm up (cache hits, web server)
-   Data (run migrations)
-   Configuration
-   Host Environment

&lt;li&gt;
Run Integration/Acceptance Tests - *Async*

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This whole process should be executed regardless of environment. A local
developer machine only differs to production in terms of topology. If
you cannot execute the exact same process that you are performing upon
commit, you can never be sure the commit will work. CI tooling should
act as nothing more than an aggregation of stats and artefacts that are
generated by invoking the build/deploy script.&lt;/p&gt;
&lt;h4&gt;Components&lt;/h4&gt;
&lt;p&gt;A working software application can be decomposed into four components.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executable code - your application.&lt;/li&gt;
&lt;li&gt;Configuration - connection strings or credentials.&lt;/li&gt;
&lt;li&gt;Host environment - target deployment machine.&lt;/li&gt;
&lt;li&gt;Data - required data for use, or persistent stores such as
    databases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If any of these change, trigger the feedback process as they can all
change the behaviour of the application.&lt;/p&gt;
&lt;h4&gt;Automation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Aim to automate everything, but do it gradually over time. Aim for
    the bottlenecks to begin with if the task of automating the
    deployment pipeline is daunting.&lt;/li&gt;
&lt;li&gt;Keep everything in source control. Never allow your CI tool to
    control your pipeline.&lt;/li&gt;
&lt;li&gt;Don't check passwords or credentials into source control.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Speed is Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Too long and people wont commit often.&lt;/li&gt;
&lt;li&gt;Under thirty seconds is ideal. Faster is better.&lt;/li&gt;
&lt;li&gt;Fail the build if the time exceeds a set threshold. You can use
    &lt;a href="https://blog.shaunfinglas.co.uk/2014/11/ratcheting.html"&gt;ratcheting&lt;/a&gt;
    to reduce this over time.&lt;/li&gt;
&lt;li&gt;Monitor tests regularly and try to speed the slowest ones up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Build and Deploy Etiquette&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Don't check in on a broken build, unless you are fixing it.&lt;/li&gt;
&lt;li&gt;Perform an update prior to commit and run the whole build/deploy
    process.&lt;/li&gt;
&lt;li&gt;Never go home on a broken build, and ideally don't check in just
    before leaving.&lt;/li&gt;
&lt;li&gt;Never deploy on Friday's or whenever there will be few developers
    around on hand, such as holiday periods.&lt;/li&gt;
&lt;li&gt;Always be ready to revert to the previous version. If the fix takes
    longer than just simply reverting the changes, don't try and fix the
    build. Just revert.&lt;/li&gt;
&lt;li&gt;Fail the build for architectural breaches such as a module
    referencing a module it shouldn't.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/02/warnings-as-errors.html"&gt;Fail the build for
    warnings&lt;/a&gt;
    or code style breaches. Warnings can hide serious problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Infrastructure&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Lock down production environments.&lt;/li&gt;
&lt;li&gt;Treat test environments equally, these should also be locked down
    from manual changes.&lt;/li&gt;
&lt;li&gt;If you cannot create your infrastructure from scratch via an
    automated process to begin with, implement access control so that
    any changes must be requested and logged.&lt;/li&gt;
&lt;li&gt;Any changes should be back filled and tested. Use some form of audit
    or access control to manage these steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Data&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use migrations to manage data. Have a version table that stores the
    schema version. Use migrations to roll forwards or roll back
    incrementally.&lt;/li&gt;
&lt;li&gt;Each migration should have an "up" and a "down" step. For example,
    up adds a table, down removes it. Run these both before committing
    to make sure they work.&lt;/li&gt;
&lt;li&gt;Migrations allow you to decouple the deployment of your application
    from the deployment of your database.&lt;/li&gt;
&lt;li&gt;The use of views or stored procedures can add a layer of abstraction
    between applications and databases. This allows changes to the
    underlying DB to have a smaller, limited effect.&lt;/li&gt;
&lt;/ul&gt;</content><category term="deployment"></category></entry><entry><title>Ten Lessons from Rewriting Software</title><link href="https://blog.shaunfinglas.co.uk/2016/06/ten-lessons-from-rewriting-software.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-01:/2016/06/ten-lessons-from-rewriting-software.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;h4&gt;It Will Take A Lot Longer Than Estimated&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Its navie to actually think this but if a system has been in
    production for say five years, expecting to reproduce it in five
    weeks is not possible. You may be able to get 80% of the core
    functionality done, but the …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;h4&gt;It Will Take A Lot Longer Than Estimated&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Its navie to actually think this but if a system has been in
    production for say five years, expecting to reproduce it in five
    weeks is not possible. You may be able to get 80% of the core
    functionality done, but the remaining 20% that was added to,
    iterated and stabilized over the remaining five years is what
    will destroy any form of schedule.&lt;/li&gt;
&lt;li&gt;If your estimate exceeds three months, you need to reasses what
    you are doing by breaking down the work, or changing plan. The
    bigger the estimate, the bigger the risk.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Deploy Incrementally Via CI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If you aren't deploying to a live environment as soon as
    possible, any future releases are destined to be failures,
    troublesome or just plain difficult.&lt;/li&gt;
&lt;li&gt;Soft releases and feature toggles should be used to aid constant
    releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Morale Will Drop The Longer It Goes On&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Probably the biggest and most surprising realization is the drop
    in personal and team morale.&lt;/li&gt;
&lt;li&gt;If you miss a "deadline" or keep failing to ship, then morale
    will tank.&lt;/li&gt;
&lt;li&gt;While software is never complete, a rewrite has a definitive
    target. If this target continues to move, team morale will move
    too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Users Will Probably Hate It Anyway&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Predominantly the UI, but your users will complain about change.&lt;/li&gt;
&lt;li&gt;Big sweeping changes often receive the most hate. A website I
    frequent had a major change both in visuals and the underlying
    technology used. While there was warning, you were left to your
    own to figure out where features were. This caused a great deal
    of frustration and negative feedback.&lt;/li&gt;
&lt;li&gt;Small, incremental changes allow your users to keep pace.&lt;/li&gt;
&lt;li&gt;Alternatively some tutorial or hint system can help reduce user
    pain.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Do What The Legacy System Does&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;As many of the original developers will likely have moved on, no
    one is really sure what the legacy system does.&lt;/li&gt;
&lt;li&gt;Even with the source code available, it is likely going to be
    hard to figure out the intent, afterall that's one of the
    reasons for the rewrite.&lt;/li&gt;
&lt;li&gt;If you are not careful you will end up simply reimplementing the
    same legacy in a new language or framework. Always weigh up
    preserving existing behaviour versus introducing technical debt.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Be Cheap And Quick - Use Stubs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When implementing the new system, &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;don't build a
    thing&lt;/a&gt;.
    At least at first.&lt;/li&gt;
&lt;li&gt;Use stubs to build the simplest, dumbest thing you can to get
    feedback.&lt;/li&gt;
&lt;li&gt;Without fully integrating the system in an end to end manner
    you'll end up throwing away a great deal of code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Feedback, Feedback, Feedback&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Early and fast feedback is essential.&lt;/li&gt;
&lt;li&gt;With a working end to end system gather as much as you can from
    any stakeholders.&lt;/li&gt;
&lt;li&gt;Chances are as you begin you'll naturally incur some additions,
    removals or modifications.&lt;/li&gt;
&lt;li&gt;Waiting months or longer for feedback is a guaranteed path to
    failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Thin Vertical Slices Over Fat Technology Splits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Avoid the temptation to have a UI team, a backend team and a
    data team and so on.&lt;/li&gt;
&lt;li&gt;Splitting at technology boundaries leads to systems that do not
    integrate well, or worse fail to handle the required use cases.&lt;/li&gt;
&lt;li&gt;Your first iteration should consist of all parts of the
    technology stack, in the thinnest manner possible. Combine this
    with early feedback and the fast development speed of stubs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Strangle Existing Legacy Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When rewriting in increments or by logical sections the
    &lt;a href="http://martinfowler.com/bliki/StranglerApplication.html"&gt;technique of
    strangulation&lt;/a&gt;
    is useful.&lt;/li&gt;
&lt;li&gt;Instead of releasing the new code as a standalone piece,
    integrate the new code into the existing legacy code base.&lt;/li&gt;
&lt;li&gt;This may be tricky at first however over time the legacy system
    will form nothing but an empty shell that integrates with the
    new system.&lt;/li&gt;
&lt;li&gt;The beauty of this approach is early feedback, and a guarantee
    that the new system behaves as intended.&lt;/li&gt;
&lt;li&gt;The final step would be to replace the legacy shell with the new
    modern interface or frontend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Refactor Where Possible&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Deciding to refactor or rewrite is never easy. Refactoring
    should be the default approach in many cases.&lt;/li&gt;
&lt;li&gt;Old languages or unsupported frameworks are good reasons to
    adopt a rewrite, but this varies case by case.&lt;/li&gt;
&lt;li&gt;If business agility is suffering such rewrites can be beneficial
    when using some of the techniques above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="retro"></category></entry><entry><title>Anaemic Domain Models and Code Smells</title><link href="https://blog.shaunfinglas.co.uk/2016/07/anaemic-domain-models-and-code-smells.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-01:/2016/07/anaemic-domain-models-and-code-smells.html</id><summary type="html">&lt;p&gt;An anaemic domain model (ADM) is considered a code smell in many cases.
An ADM is present when you have a entity representing your domain, but
void of any behaviour. Any logic is separate and operated upon in
isolation. Such domain models can be thought of as simple property bags …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An anaemic domain model (ADM) is considered a code smell in many cases.
An ADM is present when you have a entity representing your domain, but
void of any behaviour. Any logic is separate and operated upon in
isolation. Such domain models can be thought of as simple property bags,
plain old language objects or DTO's.&lt;/p&gt;
&lt;h4&gt;Code Smells&lt;/h4&gt;
&lt;p&gt;With an ADM your behaviour ends up split across many domain services
instead of being grouped with the data it operates upon.&lt;/p&gt;
&lt;p&gt;As the domain and your understanding evolves, the problem an ADM
introduces can get worse as more and more domain services are added.&lt;/p&gt;
&lt;p&gt;A complex domain or one that evolves will end up paying a price.
Converting to and from what looks like a domain model, only to perform
domain logic separately is quite redundant. Why not ditch the domain
model altogether? If you have a simple problem, a simple solution such
as a transaction script may very well do the job.&lt;/p&gt;
&lt;h4&gt;Simple Problems - Simple Solutions&lt;/h4&gt;
&lt;p&gt;Sometimes you don't have a complex domain. Input, basic logic, then some
form of CRUD is incredibly common. Due to this it is easy to see why
anaemic models exist.&lt;/p&gt;
&lt;p&gt;Rather than the cost associated with attempting to model the domain,
choose easier solutions such as transaction scripts, table gateways or
similar.&lt;/p&gt;
&lt;p&gt;The big argument for anaemic domain models is following the SRP. Adding
behaviour to domain models does not violate SRP. There is no reason why
such additions cannot be formed from composition or delegation. Likewise
the internal representation can be private. On the flip side domain
services operating under the disguise of SRP lack cohesion, despite
&lt;em&gt;doing one thing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The good news is that the ADM is very easy to extend and refactor at a
later point. &lt;a href="https://vimeo.com/43598193"&gt;Moving to a richer domain model is not
difficult&lt;/a&gt;, though the process may take
time.&lt;/p&gt;
&lt;h4&gt;Refactoring from an ADM&lt;/h4&gt;
&lt;p&gt;Simply push behaviour onto entities, one method at a time. As you do
this, services will begin to dissolve. All of this can be done when
supported by a good suite of tests.&lt;/p&gt;
&lt;p&gt;An &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;equally simple step is to being introducing value
types&lt;/a&gt;.
Over time these will act as code magnets pulling any related behaviour
towards them.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In most cases an ADM is a code smell.&lt;/li&gt;
&lt;li&gt;There may be easier solutions than a anaemic model that mimics your
    domain.&lt;/li&gt;
&lt;li&gt;The ADM is not a good example of SRP.&lt;/li&gt;
&lt;li&gt;Refactoring towards a rich domain model is easy and achievable at
    any stage.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category></entry><entry><title>I Need to Stop Misusing Divs</title><link href="https://blog.shaunfinglas.co.uk/2016/07/i-need-to-stop-misusing-divs.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-01:/2016/07/i-need-to-stop-misusing-divs.html</id><summary type="html">&lt;p&gt;I a certainly not a skilled or expert front end developer. While I'm
more than capable of creating pages I lack any design magic to make them
look half decent. Despite this one area where improvement can be made is
in my markup itself.&lt;/p&gt;
&lt;p&gt;Over the past few months I've …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I a certainly not a skilled or expert front end developer. While I'm
more than capable of creating pages I lack any design magic to make them
look half decent. Despite this one area where improvement can be made is
in my markup itself.&lt;/p&gt;
&lt;p&gt;Over the past few months I've spent most of my time getting to grips
with recent additions and changes in the HTML5 and CSS3 space. During
this one area stood out, my misuse of the division element or
&amp;lt;div&amp;gt;.&lt;/p&gt;
&lt;p&gt;Before the addition of the newer elements pages nested with div after
div was normal. However this is no longer the case. From this point
onwards I will be ensuring that every time I introduce a div element I
question whether a more appropriate element should be used.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The HTML div element (or HTML Document Division Element) is the
generic container for flow content, which does not inherently
represent anything. It can be used to group elements for styling
purposes (using the class or id attributes), or because they share
attribute values, such as lang. It should be used only when no other
semantic element (such as article or nav) is appropriate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Semantic Meaning&lt;/h4&gt;
&lt;p&gt;Two huge side effects that are often overlooked when ignoring semantic
markup is device compatibility with screen readers or other input
methods and future proofing content.&lt;/p&gt;
&lt;p&gt;Many people wrongly assume that all users are either keyboard/mouse or
mobile (touch) users. By using semantic elements, users of other input
methods get a much smoother experience. It is possible to jump to
navigation or content without having to page through dozens of unrelated
sections added only for stylistic purposes. Having used such devices
first hand, the joy such simple changes make are outstanding.&lt;/p&gt;
&lt;p&gt;Using semantic elements also helps future proof content. Screen scraping
and other technologies can be simplified massively if content is
correctly marked up. The thought that pages of content written now will
still be used and accessible decades from now is incredible.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;p&gt;The lesson here is an easy one. Every time you write a generic division
element, stop and ask yourself is there an element with more semantic
meaning that will do the same job?&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>UI Composition Techniques for Services</title><link href="https://blog.shaunfinglas.co.uk/2016/07/ui-composition-techniques-for-services.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-07-01:/2016/07/ui-composition-techniques-for-services.html</id><summary type="html">&lt;p&gt;When using services be it SOA, microservices or some other hybrid
approach, at some point you will need to display an aggregation of data
onto a UI. This simple task can actually involve some complexity and
hidden pitfalls.&lt;/p&gt;
&lt;p&gt;As an example, this blog could be powered by three independent services …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When using services be it SOA, microservices or some other hybrid
approach, at some point you will need to display an aggregation of data
onto a UI. This simple task can actually involve some complexity and
hidden pitfalls.&lt;/p&gt;
&lt;p&gt;As an example, this blog could be powered by three independent services.
A comment service, a post service and a archive service. Displaying this
content on the page could involve a few different approaches both with
pros and cons. Each vary in terms of benefits and complexity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service Composition&lt;/li&gt;
&lt;li&gt;Server Side Composition&lt;/li&gt;
&lt;li&gt;Backends For Frontends&lt;/li&gt;
&lt;li&gt;Frontend UI Composition&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Service Composition&lt;/h4&gt;
&lt;p&gt;Composition within independent services should be avoided at all costs.
In these cases service A invokes service B which invokes service C,
which has a dependency on A and so on. The problems such composition
introduce defeats any benefits that a service based approach brings. In
short &lt;a href="https://blog.shaunfinglas.co.uk/2014/07/soa-done-badly-vs-soa-done-right.html"&gt;composing data in this manner will lead to
problems&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Server Side Composition&lt;/h4&gt;
&lt;p&gt;Invoke each service behind a single request and perform composition on
the server. Return the results of the aggregation which can then be
processed by the UI. In most cases a &lt;em&gt;request&lt;/em&gt; will be a request over
HTTP.&lt;/p&gt;
&lt;h5&gt;Pros&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Single request to fetch all data.&lt;/li&gt;
&lt;li&gt;Single server side place to change if UI requirements change.&lt;/li&gt;
&lt;li&gt;Forms an anti corruption layer in front of the independent services.
    Client specific changes do not leak down into the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Cons&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Coupling is moved to the server side. Harder/slower to change
    compared to HTML/JS/UI layer.&lt;/li&gt;
&lt;li&gt;Handling failures must be considered more so than client side
    composition.&lt;/li&gt;
&lt;li&gt;Timeouts or lack of responses must be considered using asynchronous
    techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Where Does The UI Live?&lt;/h5&gt;
&lt;p&gt;Due to the nature of having to serve up data for the UI layer to
consume, it makes sense to purely store the UI components within the
host application. In this case the whole host application will use the
same UI techniques.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Backends For Frontends (BFFs)&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://samnewman.io/patterns/architectural/bff/"&gt;An alternative which builds upon server side
composition&lt;/a&gt; is server
side composition but performed individually based on the UI required. In
other words, a set of server side applications for each host are
created.&lt;/p&gt;
&lt;p&gt;As UI clients can differ drastically a single server side composition
technique may not be sufficient. Mobile devices may require a slimmed
down version of data, while desktop dashboards may prefer large
quantities. Additionally it is quite common to find certain clients
asking for additional fields or requirements specific to their client
implementation. In these cases BFFs make a great deal of sense.&lt;/p&gt;
&lt;h5&gt;Pros&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Same pros as server side composition.&lt;/li&gt;
&lt;li&gt;BFFs allow full control of server side composition tailored to the
    clients.&lt;/li&gt;
&lt;li&gt;Specialized BFFs reduce change and prevent independent services
    handling UI specific edge cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Cons&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Same cons as server side composition.&lt;/li&gt;
&lt;li&gt;More moving parts, though BFFs should be owned by the client
    themselves for true autonomy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Where Does The UI Live?&lt;/h5&gt;
&lt;p&gt;The same guidance as server side composition stands. Where the actual
BFF lives depends on how it is used. If the mobile client is expected to
have multiple implementations then a standalone service would be
required. Alternatively if only a single mobile platform is targeted,
then the service could live within the host application itself.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Frontend Composition&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://udidahan.com/2012/06/23/ui-composition-techniques-for-correct-service-boundaries/"&gt;Invoke each service and display its data independently via the
client&lt;/a&gt;.
The host application will include the front end of each service by
conforming to a common standard such as Javascript or other UI
components. The use of IDs and client side identifiers will be required
to ensure all services are linked in some manner.&lt;/p&gt;
&lt;h5&gt;Pros&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Failure tolerant by default, if a single request fails the others
    carry on processing.&lt;/li&gt;
&lt;li&gt;JS/UI layers make asynchronous calls easy, composition is a natural
    fit.&lt;/li&gt;
&lt;li&gt;Weakest form of coupling is in the UI layer - easier and cheaper to
    change.&lt;/li&gt;
&lt;li&gt;Flexible as you can create &lt;em&gt;mash ups&lt;/em&gt; that would otherwise violate
    service boundaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Cons&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Multiple requests to fetch content (four HTTP requests using the
    blog example above).&lt;/li&gt;
&lt;li&gt;Aggregation may be complex. You may need to use more than just plain
    Javascript or face complex, coupled JS.&lt;/li&gt;
&lt;li&gt;Depending on where the UI layer is stored, you may be coupled at the
    UI level due to the same framework or approaches needed across each
    service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Where Does The UI Live?&lt;/h5&gt;
&lt;p&gt;Storing the UI within each service is ideal on paper, but in practice
has some limitations. Each service can vary and iterate at its own pace
which is fantastic as long as the integration of the service remains
unchanged. Unfortunately the downside is that each service is actually
independent in terms of the UI. This means that versioning the front end
component becomes an issue. Likewise there is nothing stopping different
services using different libraries or frameworks. If the UI component
requires any server side additions this becomes even harder. For example
a host application written in one language will be incompatible with
other services if they differ. The final issue relates to storing UI
components outside of host application frameworks. Many frameworks
simply make this either impossible or very difficult to achieve.&lt;/p&gt;
&lt;p&gt;Using the host application to store the UI components side steps the
disadvantages and issues above. While you are at the mercy of the host
application to integrate each component, this is not a show stopper.
Chances are most applications have multiple views, so a single UI
component would never be reusable across applications. Additionally the
use of thin vertical slices should mean that even though the UI
component is physically separate from the service, there is no reason
why the two cannot be worked on in conjunction.&lt;/p&gt;
&lt;p&gt;A final factor to consider is that there is no reason why a hybrid
approach cannot be taken. Each service should store its own UI
component, but also allow host applications the ability to integrate.
This UI component can act as a form of dog fooding as well as providing
an excellent development and test bed. It is far easier to work and test
a small widget with an automated test than it is to exercise this within
the context of a full blown application.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Avoid the use of internal service composition - remote calls to
    third parties being the obvious exception to this rule.&lt;/li&gt;
&lt;li&gt;There is no best approach overall, the chosen solution will vary
    based on application.&lt;/li&gt;
&lt;li&gt;Server side composition has benefits, but client side UI composition
    opens up new possibilities.&lt;/li&gt;
&lt;li&gt;Client side composition seems more complicated but in reality it is
    merely different, though does require some up front planning.&lt;/li&gt;
&lt;li&gt;Default to using the services directly, only introducing a BFF if
    client requirements differ or client requirements are being forced
    upon the independent services.&lt;/li&gt;
&lt;/ul&gt;</content><category term="microservices"></category><category term="SOA"></category></entry><entry><title>DDD - Bounded Contexts</title><link href="https://blog.shaunfinglas.co.uk/2016/06/ddd-bounded-contexts.html" rel="alternate"></link><published>2016-06-14T07:25:00+02:00</published><updated>2016-06-14T07:25:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-06-14:/2016/06/ddd-bounded-contexts.html</id><summary type="html">&lt;p&gt;A single domain can grow large when applying Domain Driven Design. It
can become very hard to contain a single model when using ubiquitous
language to model the domain. Classic examples prevalent in many domains
would be &lt;code&gt;Customer&lt;/code&gt; or &lt;code&gt;User&lt;/code&gt; models. A bounded context allows you to
break down a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A single domain can grow large when applying Domain Driven Design. It
can become very hard to contain a single model when using ubiquitous
language to model the domain. Classic examples prevalent in many domains
would be &lt;code&gt;Customer&lt;/code&gt; or &lt;code&gt;User&lt;/code&gt; models. A bounded context allows you to
break down a large domain into smaller, independent contexts.&lt;/p&gt;
&lt;p&gt;In different contexts a customer may be something completely different,
depending on who you ask and how you use the model. For example, take
three bounded contexts within a typical domain that allows customer
administration, customer notifications and general reporting.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;h5&gt;Notification Context&lt;/h5&gt;
&lt;p&gt;A customer is their account id, social media accounts, email and any
marketing preferences. Anything that would be required to uniquely
identify a customer, and send a notification.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    + Id
    + Email
    + Marketing Preferences
    + Social
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Reporting Context&lt;/h5&gt;
&lt;p&gt;When reporting customers are nothing more than statistics. A unique
customer ID is more than enough just for aggregation and statistic
collection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    + Id
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Account Context&lt;/h5&gt;
&lt;p&gt;Allowing the customer to administer their account would require anything
personally related to the customer to be modelled.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    + Id
    + First Name
    + Last Name
    + Address
    + Email
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Despite the common elements such as Id and email, the other elements are
specific to the context in which the customer is used. One of the
biggest mistakes I've made by ignoring a bounded context is to see &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/dry-vs-coupling-in-production-code.html"&gt;a
common model and try to apply this
everywhere&lt;/a&gt;.
This leads to less code, but increases coupling. A single small change
in one context can cause a rippling effect. In fact the best solution is
to have a customer model per context.&lt;/p&gt;
&lt;p&gt;The result of this approach is you will end up with at least three
models using the example above. While structural duplication increases,
coupling decreases. Each context can change and evolve at its own pace.
This is a good thing. No business logic here is being duplicated, only
the model. As each context operates in its own speciality, there should
never be a case where this is problematic.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Structural duplication outside of bounded context is not a bad
    thing.&lt;/li&gt;
&lt;li&gt;Resist the urge to use a base class for common attributes. This is
    especially true if you use an ORM or anything that will couple you
    further when these models are used.&lt;/li&gt;
&lt;li&gt;Ending up with multiple models per bounded context is likely going
    to happen, embrace it.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category></entry><entry><title>Given When Then Scenarios vs Test Fixtures</title><link href="https://blog.shaunfinglas.co.uk/2016/06/given-when-then-scenarios-vs-test.html" rel="alternate"></link><published>2016-06-01T00:00:00+02:00</published><updated>2016-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-06-01:/2016/06/given-when-then-scenarios-vs-test.html</id><summary type="html">&lt;p&gt;There are two common ways of writing automated tests which apply from
unit to acceptance tests. These are typically known as test fixtures and
Given-When-Then scenarios.&lt;/p&gt;
&lt;h4&gt;Test Fixture&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Traditional method of writing tests.&lt;/li&gt;
&lt;li&gt;The common JUnit/NUnit approach. Other languages have very similar
    concepts.&lt;/li&gt;
&lt;li&gt;Single test fixture with multiple tests …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;There are two common ways of writing automated tests which apply from
unit to acceptance tests. These are typically known as test fixtures and
Given-When-Then scenarios.&lt;/p&gt;
&lt;h4&gt;Test Fixture&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Traditional method of writing tests.&lt;/li&gt;
&lt;li&gt;The common JUnit/NUnit approach. Other languages have very similar
    concepts.&lt;/li&gt;
&lt;li&gt;Single test fixture with multiple tests.&lt;/li&gt;
&lt;li&gt;Test fixture is usually named after the subject under test.&lt;/li&gt;
&lt;li&gt;Can grow large with many test cases.&lt;/li&gt;
&lt;li&gt;Works well with data driven tests.&lt;/li&gt;
&lt;li&gt;Suited to &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;solitary
    tests&lt;/a&gt;
    such as integration tests where GWT syntax would be verbose or hard
    to include.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/7748cf098415494c99ecaa0777eacacd.js"&gt;&lt;/script&gt;

&lt;h4&gt;Given-When-Then&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Behaviour driven approach (BDD style).&lt;/li&gt;
&lt;li&gt;Made popular by tools such as RSpec.&lt;/li&gt;
&lt;li&gt;Single test fixture per behaviour.&lt;/li&gt;
&lt;li&gt;Test fixtures named after the functionality being tested.&lt;/li&gt;
&lt;li&gt;Often nested within other test fixtures.&lt;/li&gt;
&lt;li&gt;Smaller test fixtures but more verbose due to fixture per
    functionality.&lt;/li&gt;
&lt;li&gt;Easy to see why a test failed due to naming convention - assertion
    message is optional.&lt;/li&gt;
&lt;li&gt;Suited to &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;sociable
    tests&lt;/a&gt;
    where the focus is on behaviour.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Given&lt;/code&gt; forms the pre-condition of the test.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;When&lt;/code&gt; performs the action.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Then&lt;/code&gt; includes one or more related assertions.&lt;/li&gt;
&lt;li&gt;GWT can be difficult to name in some cases, often more thought and
    discussion can be required around good naming conventions.&lt;/li&gt;
&lt;li&gt;Can act as useful documentation on how the code is meant to
    function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/8d5b8fbc789acbe829d06312559a5d3a.js"&gt;&lt;/script&gt;

&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;No single way of writing automated tests is better.&lt;/li&gt;
&lt;li&gt;Favour single test fixtures for integration tests.&lt;/li&gt;
&lt;li&gt;The core of your tests can use GWT style.&lt;/li&gt;
&lt;li&gt;Mix and match where appropriate however.&lt;/li&gt;
&lt;li&gt;Your choice of tooling and language may influence your approach.&lt;/li&gt;
&lt;/ul&gt;</content><category term="testing"></category><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Foreign Key Constraints and Microservices</title><link href="https://blog.shaunfinglas.co.uk/2016/05/foreign-key-constraints-and.html" rel="alternate"></link><published>2016-05-01T00:00:00+02:00</published><updated>2016-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-05-01:/2016/05/foreign-key-constraints-and.html</id><summary type="html">&lt;p&gt;Database constraints when used in relational databases are great. They
ensure data integrity at the lowest level. No one would argue against
using them in practice. Essentially constraints can be thought of as
assertions against your database. Rules such as requirement, default
values and foreign key constraints double check your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Database constraints when used in relational databases are great. They
ensure data integrity at the lowest level. No one would argue against
using them in practice. Essentially constraints can be thought of as
assertions against your database. Rules such as requirement, default
values and foreign key constraints double check your use of the
database. This ensures your application is interacting in a sane manner.
Databases often out live applications therefore constraints also ensure
integrity long after the application has been replaced or modified.&lt;/p&gt;
&lt;h4&gt;Distributed Systems&lt;/h4&gt;
&lt;p&gt;Distributed systems change how foreign key constraints should be
considered. As distributed systems own their data, each piece of data
that is mastered by a single service should ensure integrity via foreign
key constraints. However outside of this boundary the use of foreign
keys should be avoided. This sounds disturbing at first. Especially
given the traditional approach of a single system backed by a single
database.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Consider a blog post service that provides a selection of posts. The
service would be responsible for everything related to blog posts, but
nothing more. The comments for the site are a separate service, yet
there is clearly a link between posts and comments. For example, in
order to display both posts and comments a link is needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- tblPosts (blog database)
    + Id
    + Title
    + Date
    + Body
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each post would store data related to the blog post itself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- tblComments (comment database)
    + Id
    + PostId
    + AuthorId
    + Message
    + Date
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The comment service would include a reference to each post that the
comment is linked to. In this case both &lt;code&gt;PostId&lt;/code&gt; and &lt;code&gt;AuthorId&lt;/code&gt; would
not use foreign key integrity as other services master this data.&lt;/p&gt;
&lt;p&gt;If this was a single database both &lt;code&gt;PostId&lt;/code&gt; and &lt;code&gt;AuthorId&lt;/code&gt; could enforce
integrity, however as each service is independent this is not possible.
With physically separate databases this lack of link is quite obvious.
Working around this in application code would introduce subtle bugs, and
temporal coupling. Such solutions are best avoided.&lt;/p&gt;
&lt;h4&gt;Check Formats&lt;/h4&gt;
&lt;p&gt;When using the comment service, this approach leaves you with very
little work to do other than simple format checks. The format of a
&lt;code&gt;PostId&lt;/code&gt; and &lt;code&gt;AuthorId&lt;/code&gt; should be known, so the comment service can
validate at this level. The core benefit is both the blog post service
and comment service are highly decoupled. The comments could be changed
to another service altogether, even a 3rd party provider, yet other
services would remain unaware.&lt;/p&gt;
&lt;h4&gt;Valid Format, Invalid Data&lt;/h4&gt;
&lt;p&gt;Format checks will only provide so much value. There is nothing stopping
a valid request for a blog post that does not exist. In cases such as
this there are a few options. One is to provide a compensating action.
Periodically delete any comments that do not have corresponding blog
posts. An alternative would be to rely upon events. Only insert comments
when a blog post is added, likewise when the service publishes the fact
a post has been removed, any associated comments could be deleted.&lt;/p&gt;
&lt;h4&gt;Many Services, Single Database&lt;/h4&gt;
&lt;p&gt;Confusion and resistance around the use of foreign keys is often found
when transitioning from a single database, to a single database operated
upon by multiple systems. Teams adopting microservices find themselves
in this dilemma usually when a large, legacy database is involved. In
these scenarios existing constraints may need to be removed, or
modified. Another technique is to have the independent services add
dummy data in order to pass database constraints. While this is far from
ideal, this pragmatic solution can work well while databases are being
separated.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use foreign key constraints when using a single database via a
    single application.&lt;/li&gt;
&lt;li&gt;Modify, replace or drop constraints when multiple services are
    writing to a single database.&lt;/li&gt;
&lt;li&gt;Independent services should own their own data. Only enforce
    integrity within service boundaries.&lt;/li&gt;
&lt;li&gt;Outside of service boundaries, use format checks to prevent errors.&lt;/li&gt;
&lt;li&gt;Rely on compensating actions or events for data management.&lt;/li&gt;
&lt;/ul&gt;</content><category term="microservices"></category><category term="distributed-systems"></category></entry><entry><title>Past Mistakes - Out of Process Commands</title><link href="https://blog.shaunfinglas.co.uk/2016/05/past-mistakes-out-of-process-commands.html" rel="alternate"></link><published>2016-05-01T00:00:00+02:00</published><updated>2016-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-05-01:/2016/05/past-mistakes-out-of-process-commands.html</id><summary type="html">&lt;p&gt;Some of the best lessons you can learn are from failure. I figured a
series on mistakes I've made in the past would highlight where I went
wrong and more importantly what to remember going forward. These real
life examples vary from my early days of programming all the way …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some of the best lessons you can learn are from failure. I figured a
series on mistakes I've made in the past would highlight where I went
wrong and more importantly what to remember going forward. These real
life examples vary from my early days of programming all the way up
until present day.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I once wrote a feature that sent email to users on their behalf. On
localhost this was fine. Fast, stable and good enough to get the job
done.&lt;/p&gt;
&lt;p&gt;Despite early successes, under load in a live environment, things were
different. Sometimes the process would out right fail, requiring the
user to retry. Other times it would be slow to process. This meant the
users browser would hang while the email was being sent.&lt;/p&gt;
&lt;p&gt;It was hard to replicate these problems. The actual code itself was
pretty simple, there was nothing to optimize it seemed.&lt;/p&gt;
&lt;h4&gt;Mistakes&lt;/h4&gt;
&lt;p&gt;The core mistake was performing an operation out of process from within
the life cycle of a HTTP request.&lt;/p&gt;
&lt;p&gt;When sending the email was slow, the HTTP response was slow as the
thread was blocked. This was blindingly obvious after the fact.&lt;/p&gt;
&lt;p&gt;Frustratingly actually demonstrating or testing this feature was hard.
Locally the server was nearby so latency was less. This started to
introduce other red herrings such as was the server misconfigured?&lt;/p&gt;
&lt;h4&gt;What to do Instead&lt;/h4&gt;
&lt;p&gt;After the user has requested an email, record this fact and simply
display a success message. Do this as quickly and simply as possible.
While the message states an email has been sent this is not strictly
true.&lt;/p&gt;
&lt;p&gt;Instead the act of requesting the email is recorded. Ideally via a
message queue or other durable storage solution. A separate service then
monitors this queue and periodically sends out emails.&lt;/p&gt;
&lt;p&gt;Users will not care if an email lands a few seconds or minutes after the
fact. Additionally if anything goes wrong during this process no data is
lost. The user will get their email eventually. Most e-commerce sites
work in this exact manner.&lt;/p&gt;
&lt;p&gt;This approach works great when commands from users cannot and should not
fail. Examples such as processing payments or key user interactions
would be excellent candidates.&lt;/p&gt;
&lt;p&gt;Unfortunately not all out of process requests can be avoided. HTTP
queries to retrieve data being one example. This cannot be faked. In
these cases minimize the number and rely on other techniques, such as
HTTP's excellent caching policies to reduce the affect on the system.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Never perform commands that cannot fail out of process from within
    the same HTTP transaction.&lt;/li&gt;
&lt;li&gt;Fear all out of process calls - they are costly, prone to failure
    and can cause chaos with your systems performance. Reduce and
    replace where possible.&lt;/li&gt;
&lt;li&gt;When commands that should not fail are required, use a message queue
    to record the command prior to processing them.&lt;/li&gt;
&lt;li&gt;Rely on HTTP caching policies to reduce the effect of queries that
    cannot be avoided.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category><category term="past-mistakes-series"></category></entry><entry><title>You Rarely Need Custom Exceptions</title><link href="https://blog.shaunfinglas.co.uk/2016/05/you-rarely-need-custom-exceptions.html" rel="alternate"></link><published>2016-05-01T00:00:00+02:00</published><updated>2016-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-05-01:/2016/05/you-rarely-need-custom-exceptions.html</id><summary type="html">&lt;p&gt;Implementing custom exceptions usually gives a hint as to why you rarely
need custom implementations. They are often nothing more than sub
classes where the only difference is the type name and containing
message.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/b7341379033d951aa88d2b7ed28aaba5.js"&gt;&lt;/script&gt;

&lt;p&gt;In this C# example there is a lot of code for &lt;em&gt;nothing&lt;/em&gt;. When checking
logs or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Implementing custom exceptions usually gives a hint as to why you rarely
need custom implementations. They are often nothing more than sub
classes where the only difference is the type name and containing
message.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/b7341379033d951aa88d2b7ed28aaba5.js"&gt;&lt;/script&gt;

&lt;p&gt;In this C# example there is a lot of code for &lt;em&gt;nothing&lt;/em&gt;. When checking
logs or handling bugs you will read the message and the stack trace. The
first line containing a bespoke name rarely matters. Within the code
throwing the exception very little context is gained from the type of
exception - instead most of the details will be present within the error
message.&lt;/p&gt;
&lt;p&gt;Each custom exception you introduce adds overhead from source lines of
code (SLOC) to compilation and execution.&lt;/p&gt;
&lt;h4&gt;Alternative&lt;/h4&gt;
&lt;p&gt;Simply do not create custom exceptions except in the rarest of
occasions. Instead rely on the standard library of the language you are
using.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/o9pEzgHorH0"&gt;Take Python as an example&lt;/a&gt; [Video].
\~200,000 lines of code yet only \~165 exceptions. This works out at
about one exception for \~1200 lines of code.&lt;/p&gt;
&lt;p&gt;If battle hardened and widely used standard libraries need only a
fraction of the amount of custom exceptions, what makes your tiny CRUD
app so special that it needs a namespace dedicated to handfuls of
bespoke implementations?&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Rather than throwing NoBlogPostsFoundException use a
&lt;a href="https://msdn.microsoft.com/en-us/library/system.web.httpexception%28v=vs.110%29.aspx"&gt;HttpException&lt;/a&gt;
with a useful message. Instead of BlogPostConfigurationException use
&lt;a href="https://msdn.microsoft.com/en-us/library/system.configuration.configurationerrorsexception%28v=vs.110%29.aspx"&gt;ConfigurationErrorsException&lt;/a&gt;.
Trying to add a comment to a post that is not published? Use an
&lt;a href="https://msdn.microsoft.com/en-us/library/system.invalidoperationexception%28v=vs.110%29.aspx"&gt;InvalidOperationException&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The downside to this suggestion is knowledge. You need to know what
exception to use and more importantly where to find it. Consulting
documentation or simple digging around will often yield what you need.
As a rule try and default to reusing an exception over creating a new
one.&lt;/p&gt;
&lt;p&gt;The benefit of this approach is less code, and the removal of
placeholder classes where the only thing that differs is the message. To
ensure nothing is lost in communicating intent, care must be taken to
ensure the message is useful, concise and clear.&lt;/p&gt;
&lt;h4&gt;Custom Exceptions&lt;/h4&gt;
&lt;p&gt;There are two exceptions (see what I did there) to this rule.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you explicitly need to handle a certain scenario and you cannot
    allow other unhandled exceptions to trigger that code path. In this
    case a custom exception may be valid. As usual question whether an
    exception is necessary at all, it may be possible to control this
    with an explicit code path.&lt;/li&gt;
&lt;li&gt;When the exception has some form of behaviour. This tends to be
    common with frameworks where when an exception of type X changes the
    flow but also carries out some action such as building up an error
    response.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In these cases this behaviour belonging with the exception makes sense.
Generally most code bases treat exceptions equally. In other words any
exception triggers a failure path, meaning the type of the exception
does not matter in most cases.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Reuse exceptions from the standard library, chances are there is one
    fit for the job already.&lt;/li&gt;
&lt;li&gt;Only introduce custom exceptions if the scenario is exceptional and
    needs to be handled uniquely.&lt;/li&gt;
&lt;li&gt;Put effort into ensuring the message of an exception is useful -
    messages and the stack trace are the most important elements.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Your Job Isn't to Write Code</title><link href="https://blog.shaunfinglas.co.uk/2016/05/your-job-isnt-to-write-code.html" rel="alternate"></link><published>2016-05-01T00:00:00+02:00</published><updated>2016-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-05-01:/2016/05/your-job-isnt-to-write-code.html</id><summary type="html">&lt;p&gt;Solving problems is the role of software developers first and foremost.
The most interesting aspect is that in many cases it is possible to
perform this role without writing a single line of code.&lt;/p&gt;
&lt;h4&gt;Low Tech&lt;/h4&gt;
&lt;p&gt;I once worked with a digital dashboard which monitored applications. One
of the yet …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Solving problems is the role of software developers first and foremost.
The most interesting aspect is that in many cases it is possible to
perform this role without writing a single line of code.&lt;/p&gt;
&lt;h4&gt;Low Tech&lt;/h4&gt;
&lt;p&gt;I once worked with a digital dashboard which monitored applications. One
of the yet to be implemented features was a key to highlight which each
chart related to. During this period many employees would ask which
graph related to which feature. The solution was a few weeks a way so as
a temporary fix I stuck a post it note to the screen. This was by no
means the solution, but it was good enough for the time being. The
questions went away and eventually the dash was updated to include a
digital version. Total lines of code? Zero.&lt;/p&gt;
&lt;h4&gt;Problem Solving without a Computer&lt;/h4&gt;
&lt;p&gt;A common experience that many developers encounter is solving a problem
while not actually at the computer, programming. In fact this technique
of simply taking a break such as going for a walk can yield some
impressive results. One of my fondest memories of this trick was using
shampoo in the shower to walk through a buggy A* implementation using
the bathroom tiles. After returning to the task sometime after, the
stupid mistake stood out. Lines of code to figure out the fix? Zero.&lt;/p&gt;
&lt;h4&gt;Deferral&lt;/h4&gt;
&lt;p&gt;Just the other week I began furiously updating an existing application
to change how a core feature worked. The solution was not going to be
quick, but it seemed like a good idea. About halfway in I reverted the
changes. After further thought it turns out there was a much better
solution. One that would not introduce risk to the current project's
goals. Total lines of code? Minus one hundred, give or take.&lt;/p&gt;
&lt;h4&gt;Goals over Code&lt;/h4&gt;
&lt;p&gt;This lack of code is not a bad thing. In all three examples the goal was
complete. You can solve problems with a single line, or thousands, it
actually does not matter. If you switch your thinking to focus on
completing goals or hitting targets, you are still rewarded with a
feeling of accomplishment. The slack time you gain can simply be
redirected to other areas or personal improvement.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;p&gt;Many wise developers have said this before. The role of a software
developer is to solve problems, not write code. This is not new,
unfortunately a younger, naive version of myself ignored this advice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus on solving business/customer problems, not writing code.&lt;/li&gt;
&lt;li&gt;Sometimes you'll write one line of code, others thousands.&lt;/li&gt;
&lt;li&gt;Not all solutions require code to complete.&lt;/li&gt;
&lt;li&gt;Focus on hitting goals, not the feeling of productivity writing code
    can give.&lt;/li&gt;
&lt;/ul&gt;</content><category term="developers"></category><category term="retro"></category></entry><entry><title>Legacy Code is Just Code</title><link href="https://blog.shaunfinglas.co.uk/2016/04/legacy-code-is-just-code.html" rel="alternate"></link><published>2016-04-19T16:23:00+02:00</published><updated>2016-04-19T16:23:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-19:/2016/04/legacy-code-is-just-code.html</id><summary type="html">&lt;p&gt;Try and define legacy code. &lt;a href="https://www.amazon.co.uk/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/275-5610177-1468962"&gt;Working Effectively With Legacy
Code&lt;/a&gt;
states it is simply code with no tests. This is an almost perfect
definition, however it is quite easy to have code that is covered by
automated tests, yet is still considered to be legacy. Poor quality, or
missing test …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Try and define legacy code. &lt;a href="https://www.amazon.co.uk/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/275-5610177-1468962"&gt;Working Effectively With Legacy
Code&lt;/a&gt;
states it is simply code with no tests. This is an almost perfect
definition, however it is quite easy to have code that is covered by
automated tests, yet is still considered to be legacy. Poor quality, or
missing test cases can provide a false sense of security.&lt;/p&gt;
&lt;h4&gt;Legacy in the Real World&lt;/h4&gt;
&lt;p&gt;Legacy code is scary to change or work with. Typically it is stuck using
an old language or framework which is too expensive to upgrade. Most
notable legacy code is often considered old. Developers or teams that no
longer exist wrote it and have long since moved on. Hence legacy code is
often ignored or over looked by the wise. To be blunt, most developers
consider legacy code to be crap.&lt;/p&gt;
&lt;h4&gt;Just Code&lt;/h4&gt;
&lt;p&gt;In the end legacy code is just code. It should be treated and given the
same amount of respect as your new and shiny solution. In fact legacy
code is more than that, it's proven. Unlike clean code you have
stagnating in your repository, legacy code has lived and breathed in
production. It may be far from ideal, but it works and it does the job.
Learn from it and refactor where possible. In cases where refactoring is
not possible, use specific techniques for dealing with legacy code
(exapanded in future posts).&lt;/p&gt;
&lt;p&gt;In reality software developers leave features in their place, not code.
Much of the code I have written can/should/will be replaced but the
features live on.&lt;/p&gt;
&lt;p&gt;The lesson here is to simply treat all code as equal regardless of its
status - legacy or not.&lt;/p&gt;</content><category term="programming"></category><category term="retro"></category></entry><entry><title>Dependency Injection for Common Global Dependencies</title><link href="https://blog.shaunfinglas.co.uk/2016/04/dependency-injection-for-common-global.html" rel="alternate"></link><published>2016-04-13T07:09:00+02:00</published><updated>2016-04-13T07:09:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-13:/2016/04/dependency-injection-for-common-global.html</id><summary type="html">&lt;p&gt;The use of &lt;a href="https://blog.shaunfinglas.co.uk/2016/03/singletons-and-singleton-lifestyle.html"&gt;singletons can often be replaced by simply adjusting scoping
of
objects&lt;/a&gt;.
The vast majority of dependencies fit this pattern, with a few
exceptions such as DateTime instances, or logging.&lt;/p&gt;
&lt;p&gt;Sometimes you just need these dependencies everywhere. You can find
yourself passing these dependencies down into the deep …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The use of &lt;a href="https://blog.shaunfinglas.co.uk/2016/03/singletons-and-singleton-lifestyle.html"&gt;singletons can often be replaced by simply adjusting scoping
of
objects&lt;/a&gt;.
The vast majority of dependencies fit this pattern, with a few
exceptions such as DateTime instances, or logging.&lt;/p&gt;
&lt;p&gt;Sometimes you just need these dependencies everywhere. You can find
yourself passing these dependencies down into the deep depths of your
code base. Such changes are often dangerous, time consuming and
undesirable.&lt;/p&gt;
&lt;h4&gt;DateTime&lt;/h4&gt;
&lt;p&gt;For a while the use of some date/time abstraction was my default
approach to handling dates and times. This fake clock or calendar
instance when combined with DI at the lowest level does actually work.
However if we stop and think about the abstraction it is clearly
unnecessary in many cases. Unless your domain is dealing with date and
times explicitly, you don't really need an abstraction. In other words,
other than the system where the code is running when or why would you
provide a different implementation?&lt;/p&gt;
&lt;p&gt;The approach taken as part of the &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;example within the Dependency
Elimination
Principle&lt;/a&gt;
is my current solution to date/times and DI. This is still dependency
injection, except the value is provided, not the method of obtaining the
value. This is essentially one of the benefits of functional
programming.&lt;/p&gt;
&lt;h4&gt;Logging&lt;/h4&gt;
&lt;p&gt;All systems need some form of logging. Commonly either the standard
library or a highly rated logging framework is used. The general advice
has been to use the logging component directly, rather than providing
your own abstraction. Most frameworks already provide interfaces or base
classes that make this easy to achieve.&lt;/p&gt;
&lt;p&gt;Even so logging suffers the same issue as date/times when it comes to
DI. You often need the logging component everywhere, whether it is
simply to pass on to other services.&lt;/p&gt;
&lt;p&gt;Logging and DI generally do not go well together. Instead simple use the
logging instance directly. A good logging framework would be fast, so
any automated tests will not notice the difference. Likewise whether
logging is configured or not, this should not cause tests to fail. In
summary, not every object has to be provided via dependency injection.
Loggers being a prime example.&lt;/p&gt;
&lt;p&gt;Due to this directly using a logging instance is the preferred approach.
Do not rely on DI. However &lt;a href="https://msdn.microsoft.com/en-us/library/dn440729%28v=pandp.60%29.aspx"&gt;semantic or structured
logging&lt;/a&gt;
does change this suggestion as the use of a domain explicit interface
can provide benefits. Semantic logging will be expanded in a future
post.&lt;/p&gt;
&lt;h4&gt;Others&lt;/h4&gt;
&lt;p&gt;Date/Time and Logging are the two most common global dependencies. The
majority of all other dependencies can and probably should be satisfied
by traditional DI where possible. As always each dependency should be
validated prior to introduction. It may be possible to either &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;eliminate
or replace the component in
question&lt;/a&gt;.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Singleton's and the Singleton Lifestyle</title><link href="https://blog.shaunfinglas.co.uk/2016/03/singletons-and-singleton-lifestyle.html" rel="alternate"></link><published>2016-04-01T00:00:00+02:00</published><updated>2016-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-01:/2016/03/singletons-and-singleton-lifestyle.html</id><summary type="html">&lt;p&gt;&lt;a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/"&gt;The death of testability and the lack of
isolation&lt;/a&gt;
make the singleton pattern a relic of times gone by. Rarely have I had a
real need to code a singleton since my first year of university. Most
decisions to use a singleton boil down to scoping issues.&lt;/p&gt;
&lt;h4&gt;Singleton&lt;/h4&gt;
&lt;p&gt;Assume a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/"&gt;The death of testability and the lack of
isolation&lt;/a&gt;
make the singleton pattern a relic of times gone by. Rarely have I had a
real need to code a singleton since my first year of university. Most
decisions to use a singleton boil down to scoping issues.&lt;/p&gt;
&lt;h4&gt;Singleton&lt;/h4&gt;
&lt;p&gt;Assume a game requires a single instance of a rendering component. In
this example configuring and initialising the renderer may be expensive.
We only want to do this once.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/931913cda1df6d3a5eb2.js"&gt;&lt;/script&gt;

&lt;p&gt;While this singleton renderer solves the problem of instantiating more
than once it suffers from the fact there is only ever one instance. If
we want multiple renderers such as a console debugger we are out of
luck. Testability is also lost. If we wish to exercise the Game, we need
to provide and use a real rendering component.&lt;/p&gt;
&lt;h4&gt;Static Classes&lt;/h4&gt;
&lt;p&gt;Or class instances give you the same advantages and disadvantages of
singletons. You only have one instance and you can access it easily. One
big difference is that unlike singletons you cannot provide static
instances as arguments. In practice this is rarely a problem given you
have easy access to the instance anyway. You should treat static classes
as suspiciously as singletons. However static classes are not bad. &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/static-code.html"&gt;They
do have uses&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/1ad58d37ba4d4d55a01b.js"&gt;&lt;/script&gt;

&lt;p&gt;The renderer is now a static class. The same disadvantage as the
singleton remains. We are always stuck with a single instance.&lt;/p&gt;
&lt;h4&gt;Singleton Lifestyle&lt;/h4&gt;
&lt;p&gt;When using DI you need to consider lifestyle. Singleton lifestyle is one
of the most useful. Do not be confused with the Singleton pattern.
Despite the name, singleton lifestyle is purely a scoping issue.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/457a3b37b2c9cb16e960.js"&gt;&lt;/script&gt;

&lt;p&gt;By adjusting the scoping of the renderer, the game can now be provided
with a single instance. Any component from the game down is unaware of
this fact, they simple interact with a rendering component. If we were
to provide a composite of rendering components the game would be
unaware. This change of scope provides the benefits of a singleton. One
area that has been lost is the lazy initialisation of the renderer which
may or may not be an issue.&lt;/p&gt;
&lt;p&gt;DI does not solve all problems however. &lt;a href="https://blog.shaunfinglas.co.uk/2016/04/dependency-injection-for-common-global.html"&gt;Sometimes dependencies are
global&lt;/a&gt;.
The likes of date/time or logging spring to mind. In these cases
&lt;a href="https://blog.shaunfinglas.co.uk/2016/04/dependency-injection-for-common-global.html"&gt;alternative solutions
exist&lt;/a&gt;.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Project Setup Tax</title><link href="https://blog.shaunfinglas.co.uk/2016/04/project-setup-tax.html" rel="alternate"></link><published>2016-04-01T00:00:00+02:00</published><updated>2016-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-01:/2016/04/project-setup-tax.html</id><summary type="html">&lt;p&gt;With microservices gaining popularity, one consideration prior to
adoption is new project setup. In fact this statement holds true for any
new project that you decide to create.&lt;/p&gt;
&lt;p&gt;Each new project requires at a minimum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source control - somewhere to actually store the code.&lt;/li&gt;
&lt;li&gt;A project base - API, executable, library, application …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;With microservices gaining popularity, one consideration prior to
adoption is new project setup. In fact this statement holds true for any
new project that you decide to create.&lt;/p&gt;
&lt;p&gt;Each new project requires at a minimum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source control - somewhere to actually store the code.&lt;/li&gt;
&lt;li&gt;A project base - API, executable, library, application etc.&lt;/li&gt;
&lt;li&gt;Users, accounts and permissions.&lt;/li&gt;
&lt;li&gt;Build configuration - in order to compile, package and run tests.&lt;/li&gt;
&lt;li&gt;Deployment and installation - to a production like environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember this is all before you write a single line of code.&lt;/p&gt;
&lt;p&gt;Automating as much of this away does help. Templates, conventions,
containers or similar can assist. Still nothing is free. This all
requires maintenance regardless of how you choose to optimize the
creation of a new project.&lt;/p&gt;
&lt;p&gt;When weighing up decisions about a separate project, always factor in
the project setup tax. In my experience this tends to take longer than
expected. Often it is very easy to forget various project conventions,
configuration options or security concerns.&lt;/p&gt;
&lt;p&gt;The lesson here is to never underestimate the time and effort required
in starting a new project. Always allocate more time. Better yet,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/06/do-you-really-need-microservice.html"&gt;question if the introduction of a new project is even
required&lt;/a&gt;.&lt;/p&gt;</content><category term="microservices"></category><category term="retro"></category></entry><entry><title>X% of Configuration is Never Used</title><link href="https://blog.shaunfinglas.co.uk/2016/04/x-of-configuration-is-never-used.html" rel="alternate"></link><published>2016-04-01T00:00:00+02:00</published><updated>2016-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-04-01:/2016/04/x-of-configuration-is-never-used.html</id><summary type="html">&lt;p&gt;Code configuration is essentially for the likes of URLs, credentials or
other per deployable settings. Sadly configuration seems to fall into
examples where there is simply too much configuration, or the system has
so many configuration points the actual code becomes far too complex for
its own good.&lt;/p&gt;
&lt;h4&gt;Too Much …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;Code configuration is essentially for the likes of URLs, credentials or
other per deployable settings. Sadly configuration seems to fall into
examples where there is simply too much configuration, or the system has
so many configuration points the actual code becomes far too complex for
its own good.&lt;/p&gt;
&lt;h4&gt;Too Much Config&lt;/h4&gt;
&lt;p&gt;I once worked on a system with in excess of six hundred different
configuration points. In reality all but a handful of these would ever
actually need changing. Most configuration is added to enable &lt;em&gt;anyone&lt;/em&gt;
to make the change. Ironically if these configuration points do need
changing, developers need to do it. The business or non technical
individuals will never change settings. In this scenario you would need
to actually test all six hundred different combinations of
configuration. 1 on, 599 off, 2 on, 598 off and so on - this is not
ideal nor realistic.&lt;/p&gt;
&lt;h4&gt;Configurable Systems are Complex&lt;/h4&gt;
&lt;p&gt;One of the earliest project mistakes I can remember involved creating a
system that could be configured by &lt;em&gt;anyone&lt;/em&gt;. A simple task became a
several day exploration in failure. Each quarter a minor change to a
static ASP page was required. This involved a date and some minor
alterations to some financial wording for legal requirements. Instead of
simply making the change I started building a custom CMS. A form
overlayed the content allowing anyone to make the change and generate
the page. It worked a treat technically, except it never saw the light
of day. The business would not use it. Numerous individuals required
approval before the change could be put live; security, legal, branding
and several more. Also using the form still required some implicit
knowledge of HTML. At the end of this we threw the prototype away and I
made the change in a matter of minutes. My mistake here was building a
solution that was not required.&lt;/p&gt;
&lt;h4&gt;Implementation&lt;/h4&gt;
&lt;p&gt;When it comes to implementing configuration a common mistake is to rely
upon the method of obtaining the value, rather than the value itself.
Additionally the use of some form of abstraction is often mistakenly
used such as IConfiguration.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;The solution is to instead provide the configuration value, not the
means of obtaining
it&lt;/a&gt;.
This can be done either via a constructor or directly to the method.
This allows the configuration to be provided in different manners such
as from a DB or file, with no code changes apart from the composition
root. Such solutions are easily testable and open to modification.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/98f6e56488563d92fb2b54266fe5f3c4.js"&gt;&lt;/script&gt;

&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Only add configuration for values that will certainly change between
    deployable units such as credentials or URLs.&lt;/li&gt;
&lt;li&gt;Leave everything else where it belongs, either in the source file
    next to a class, in a method or whatever is easiest. If it needs to
    change, just make the change when the time comes. Chances are it
    will never come.&lt;/li&gt;
&lt;li&gt;If a configuration value is changed, run your automated tests (or a
    subset) against the deployable unit.&lt;/li&gt;
&lt;li&gt;A configuration change should be treated as a code change.&lt;/li&gt;
&lt;li&gt;The business will never change your configuration - that's a
    technical task.&lt;/li&gt;
&lt;li&gt;Provide configurations values, not the means of obtaining them.&lt;/li&gt;
&lt;li&gt;Rely upon convention over configuration as much as possible.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="code-quality"></category></entry><entry><title>Pulling the Plug on Date Time Parsing</title><link href="https://blog.shaunfinglas.co.uk/2016/03/pulling-plug-on-date-time-parsing.html" rel="alternate"></link><published>2016-03-30T06:49:00+02:00</published><updated>2016-03-30T06:49:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-03-30:/2016/03/pulling-plug-on-date-time-parsing.html</id><summary type="html">&lt;p&gt;Date/time logic is hard. Throw in time zones along with daylight saving
and it's even harder. Recently a suite of tests that had happily been
running for months started failing. There were no code changes and all
the tests were somehow related to date/time ranges.&lt;/p&gt;
&lt;p&gt;Despite this the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Date/time logic is hard. Throw in time zones along with daylight saving
and it's even harder. Recently a suite of tests that had happily been
running for months started failing. There were no code changes and all
the tests were somehow related to date/time ranges.&lt;/p&gt;
&lt;p&gt;Despite this the production code was functioning as expected. It turns
out the API was explicitly setting the locale to use &lt;code&gt;en-GB&lt;/code&gt;. However
the suite of tests were not.&lt;/p&gt;
&lt;p&gt;The fix was simple. Prior to the test fixtures executing, explicitly set
the locale. In order to test this assumption and see the tests pass, a
temporary change on the development machine was required.&lt;/p&gt;
&lt;p&gt;The locale was set on the development machine to another region. In this
case setting to &lt;code&gt;en-US&lt;/code&gt; was enough to cause the tests to fail. After the
code change the tests passed. Any locale can be used as long as the date
format differs.&lt;/p&gt;
&lt;p&gt;This idea is pretty easy, and is very close to my technique of &lt;a href="https://blog.shaunfinglas.co.uk/2012/05/achieving-more-isolated-unit-testing.html"&gt;pulling
the plug on automated
tests&lt;/a&gt;.
The test suite can now be run on any machine, even those incorrectly
configured and we can be sure the tests will still pass.&lt;/p&gt;
&lt;p&gt;Going forward for any date/time tests I will make an active decision to
temporarily change my regional settings. With more codebases utilizing
the cloud, relying on implicit configuration should be avoided where
possible. In fact I would bet a large sum of money that many codebases
out there would fail this temporary locale change. Give it a go - pull
the plug.&lt;/p&gt;</content><category term="testing"></category><category term="programming"></category><category term="unit-testing"></category></entry><entry><title>Best of Breed</title><link href="https://blog.shaunfinglas.co.uk/2016/03/best-of-breed.html" rel="alternate"></link><published>2016-03-01T00:00:00+01:00</published><updated>2016-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-03-01:/2016/03/best-of-breed.html</id><summary type="html">&lt;p&gt;Spikes are one of the best ways to aid the design of software. In some
cases spike solutions can open more questions than they solve. The use
of a technique known as &lt;em&gt;Best of Breed&lt;/em&gt; can assist when this arises.&lt;/p&gt;
&lt;p&gt;Rather than producing a single spike, produce several. Either
individually …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Spikes are one of the best ways to aid the design of software. In some
cases spike solutions can open more questions than they solve. The use
of a technique known as &lt;em&gt;Best of Breed&lt;/em&gt; can assist when this arises.&lt;/p&gt;
&lt;p&gt;Rather than producing a single spike, produce several. Either
individually or with other developers working on a spike each. Each
solution can then be compared and contrasted. The best parts of each
solution can then be combined. Best of Breed is named for its likeness
to genetics where the best genes win out for future generations as part
of the process of evolution.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Spike solution A has an excellent way to handle future requirements due
to the open and closed approach taken. Solution B solves the data access
problem in an elegant manner. Both solutions have good components.
Simply combine the solutions into a single approach. This results in
code that contains extensibility and good data access patterns.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Neither standalone solution would have been as good as this hybrid
    or best of breed.&lt;/li&gt;
&lt;li&gt;Multiple developers have intimate knowledge of the code thanks to
    collective code ownership.&lt;/li&gt;
&lt;li&gt;Allows experimentation - go wild with multiple solutions trying out
    techniques or ideas you would not normally experiment with. Safe in
    the knowledge there is more than one solution to any problem.&lt;/li&gt;
&lt;li&gt;Provides a learning platform. It's always good to see how and why
    others solve problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best of Breed provides benefits above and beyond traditional spike
solutions. With more than one developer the addition of multiple spikes
can be developed in parallel. For individuals the construction of
further solutions should be evaluated on a case by case basis. Single
developers may prefer to evolve a single spike during various phases.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The term &lt;em&gt;Best of Breed&lt;/em&gt; was introduced to myself by &lt;a href="https://twitter.com/BlueReZZ"&gt;Paul
Shannon&lt;/a&gt;.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Eating your own Dog Food</title><link href="https://blog.shaunfinglas.co.uk/2016/03/eating-your-own-dog-food.html" rel="alternate"></link><published>2016-03-01T00:00:00+01:00</published><updated>2016-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-03-01:/2016/03/eating-your-own-dog-food.html</id><summary type="html">&lt;p&gt;Also known as &lt;em&gt;dog fooding&lt;/em&gt;. It's an odd term, &lt;a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food#Origin_of_the_term"&gt;with roots dating back
to 70's adverts and the even more
bizarre&lt;/a&gt;.
In software development the idea is simple. Use the software you produce
to make it better. This can be taken to the extreme with examples such
as Notepad++ being …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Also known as &lt;em&gt;dog fooding&lt;/em&gt;. It's an odd term, &lt;a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food#Origin_of_the_term"&gt;with roots dating back
to 70's adverts and the even more
bizarre&lt;/a&gt;.
In software development the idea is simple. Use the software you produce
to make it better. This can be taken to the extreme with examples such
as Notepad++ being built with Notepad++, or the Github team using Github
internally. These examples mean the product is as good as it can be from
real life use.&lt;/p&gt;
&lt;h4&gt;API's&lt;/h4&gt;
&lt;p&gt;Dog fooding works great for APIs. When the boundary of a system is an
API building a fake test UI is a wise move. This integration acts as if
you were the user. If you can solve the basic uses cases that your
integrators need you can be confident the API is fit for purpose.
Integration highlights problems and areas for improvement. Building a
test UI is a very easy step to carry out which is also useful for
demonstrating and documenting the API to others.&lt;/p&gt;
&lt;p&gt;The danger of not eating your own dog food when producing APIs is
detachment from what your users will be trying to do, versus what you
implement. In many cases this means that while your API may be fully
compliant with the latest standards, framework and technology, it is not
actually fit for purpose. Naturally this will incur overhead when the
users raise issues that need resolving, often late in the day.&lt;/p&gt;
&lt;h4&gt;Libraries&lt;/h4&gt;
&lt;p&gt;It is often tempting to extract a library for a common task. As always
&lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;try to fight this urge until at least the third
time&lt;/a&gt;.
As well as this try to use the library yourself before releasing. If you
can use this library in at least three places you very well may have a
successful piece of software. If the answer to this question is no, the
library may not be as useful as you think.&lt;/p&gt;
&lt;p&gt;Libraries that have not been built using dog fooding are often clunky,
unintuitive and frustrating to use. Every developer could name numerous
examples that would fit this criteria, but the opposite is also true.
The use of dog fooding tends to force libraries into the later.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Write Assertions First</title><link href="https://blog.shaunfinglas.co.uk/2016/03/write-assertions-first.html" rel="alternate"></link><published>2016-03-01T00:00:00+01:00</published><updated>2016-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-03-01:/2016/03/write-assertions-first.html</id><summary type="html">&lt;p&gt;Writing a test as part of the TDD process is simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many individuals recommend the process be reversed. Write assertions
first. Then write the steps to perform the action. Followed by the
required setup to complete the action.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Simplicity&lt;/h4&gt;
&lt;p&gt;You will write just enough …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Writing a test as part of the TDD process is simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many individuals recommend the process be reversed. Write assertions
first. Then write the steps to perform the action. Followed by the
required setup to complete the action.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Simplicity&lt;/h4&gt;
&lt;p&gt;You will write just enough of the test to do the job. Its not far from
doing TDD on the test itself. Using staticily compiled languages you
would see compile time errors while performing this step. As you are
writing the test in reverse this is normal and expected. Most text
editors or IDE's can ease this process.&lt;/p&gt;
&lt;p&gt;Implement just enough of the test to do your job. The opposite of this
is large, copy/paste tests that require lines of setup code that can
safely be removed or reduced.&lt;/p&gt;
&lt;h4&gt;Meaning&lt;/h4&gt;
&lt;p&gt;You end up naming variables with more meaning. With a traditional
approach variables can lack true, descriptive names. They are often
called &lt;code&gt;result&lt;/code&gt; or similar. By working in reverse you force yourself to
think of what you are asserting upon. This forces better names out in
the process. An example would be &lt;code&gt;orderTotals&lt;/code&gt; if the purpose of the
assertion was to check if the total of an order was as expected.&lt;/p&gt;
&lt;p&gt;Writing assertions first can feel awkward but the benefits of this
change are well worth the initial slowdown.&lt;/p&gt;</content><category term="testing"></category><category term="tdd"></category><category term="unit-testing"></category></entry><entry><title>Gaining Ten Extra Hours a Week</title><link href="https://blog.shaunfinglas.co.uk/2016/02/gaining-ten-extra-hours-week.html" rel="alternate"></link><published>2016-02-01T00:00:00+01:00</published><updated>2016-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-02-01:/2016/02/gaining-ten-extra-hours-week.html</id><summary type="html">&lt;p&gt;For a long time my work life balance has gone through phases. Some weeks
I would spend hours after work writing code. This would exceed to well
beyond midnight in some cases. This phase was not sustainable but it
appeared to be the norm.&lt;/p&gt;
&lt;p&gt;My other hobbies such as reading …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a long time my work life balance has gone through phases. Some weeks
I would spend hours after work writing code. This would exceed to well
beyond midnight in some cases. This phase was not sustainable but it
appeared to be the norm.&lt;/p&gt;
&lt;p&gt;My other hobbies such as reading and gaming were also neglected. These
too suffered from weeks of focus, followed by quieter periods.&lt;/p&gt;
&lt;p&gt;Over the course of a typical year this cycle would generally balance
out, but never feel comfortable. There were always areas that lacked
focus. One of my common complaints which I have shared with many other
developers is around the lack of time to do anything additional to the
day to day job. There always seemed to be a sacrifice.&lt;/p&gt;
&lt;h4&gt;Mornings&lt;/h4&gt;
&lt;p&gt;The book &lt;a href="http://www.amazon.co.uk/Soft-Skills-software-developers-manual/dp/1617292397"&gt;Soft
Skills&lt;/a&gt;
recommends taking the first hour or two out of your weekly day to focus
on important goals. This piece of advice was not going to work for me I
thought. I was not a morning person.&lt;/p&gt;
&lt;p&gt;Sometime after I discovered an article from the &lt;a href="http://www.artofmanliness.com/2010/09/07/never-let-the-sun-catch-you-sleeping-why-and-how-to-become-an-early-riser/"&gt;Art Of Manliness
(AoM)&lt;/a&gt;
which gave tips on becoming a early riser.&lt;/p&gt;
&lt;h4&gt;How To&lt;/h4&gt;
&lt;p&gt;Instead of simply waking up a whole two hours earlier than usual, AoM
offered an incremental solution. Set your alarm ten minutes earlier and
live with it for a whole week. Each week reduce by a further ten minutes
until you hit your target.&lt;/p&gt;
&lt;p&gt;This process took about three weeks to see any real benefit. While this
can be considered slow progress the act of doing so was incredibly easy.
Incrementally reducing the time also provides time for your body to
adjust, meaning it's a lot easier to stick with.&lt;/p&gt;
&lt;h4&gt;Downsides&lt;/h4&gt;
&lt;p&gt;The obvious downside here is that the two additional hours you gain in
the morning are removed from the end of the day. In other words you'll
find yourself going to sleep earlier. Having a good balance between
work, hobbies and free time means this trade off is well worth the
change.&lt;/p&gt;
&lt;p&gt;One area this technique cannot much provide benefit is with children.
Developers with children would find it difficult to use an uninterrupted
block first thing in the morning. Not being a parent myself means I
cannot provide any alternatives.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;p&gt;Like most things in life, small changes add up to big things over a long
period. Thanks to this change I nearly doubled the amount of blog posts
I wrote back in 2015 when compared to 2014. I've read more books and
watched more technical videos during this period than ever, while still
maintaining a healthy balance in other areas of my life. Give it a go,
become a morning person.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Sproc vs ORM vs Inline vs Polyglot</title><link href="https://blog.shaunfinglas.co.uk/2016/02/sproc-vs-orm-vs-inline-vs-polyglot.html" rel="alternate"></link><published>2016-02-01T00:00:00+01:00</published><updated>2016-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-02-01:/2016/02/sproc-vs-orm-vs-inline-vs-polyglot.html</id><summary type="html">&lt;p&gt;With relational databases the common data access patterns tend to fall
into three core options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct access via inline SQL&lt;/li&gt;
&lt;li&gt;Stored procedures using the standard library&lt;/li&gt;
&lt;li&gt;ORM frameworks or libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Individually these have both pros and cons, often leading to heated
debate and discussion.&lt;/p&gt;
&lt;h4&gt;Inline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Leaky abstractions.&lt;/li&gt;
&lt;li&gt;Dangerous in places …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;With relational databases the common data access patterns tend to fall
into three core options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct access via inline SQL&lt;/li&gt;
&lt;li&gt;Stored procedures using the standard library&lt;/li&gt;
&lt;li&gt;ORM frameworks or libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Individually these have both pros and cons, often leading to heated
debate and discussion.&lt;/p&gt;
&lt;h4&gt;Inline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Leaky abstractions.&lt;/li&gt;
&lt;li&gt;Dangerous in places via SQL injection.&lt;/li&gt;
&lt;li&gt;Quick and dirty solution.&lt;/li&gt;
&lt;li&gt;Non testable by default.&lt;/li&gt;
&lt;li&gt;Useful for integration testing where dynamic input is required and
    safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Stored Procedures (standard library)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Can be clunky and low level to use in places.&lt;/li&gt;
&lt;li&gt;Non testable by default.&lt;/li&gt;
&lt;li&gt;Allows the use of DB specific features internally.&lt;/li&gt;
&lt;li&gt;Easy to tune and optimize as long as interface is stable.&lt;/li&gt;
&lt;li&gt;Developers can optimise the execution of queries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ORMs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Testable by default.&lt;/li&gt;
&lt;li&gt;Complex, large and difficult to use correctly.&lt;/li&gt;
&lt;li&gt;Leaky abstractions.&lt;/li&gt;
&lt;li&gt;Optimisation is harder, especially for DB engineers.&lt;/li&gt;
&lt;li&gt;Mini or lightweight alternatives exist, with less of the downsides.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Polyglot Persistence&lt;/h4&gt;
&lt;p&gt;The actual decision of which data access method to use can be a non
issue providing a good abstraction is used. Whether you use inline SQL,
stored procedures or full blown ORMs is beside the point. &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;Instead of
abstracting the implementation detail, focus on the role the object or
function has to
play&lt;/a&gt;.
A benefit of this approach is the ability to mix and match data access
patterns. Polyglot persistence is gaining more traction where alternate
data storage solutions are more appropriate.&lt;/p&gt;
&lt;h4&gt;N+1&lt;/h4&gt;
&lt;p&gt;One common flaw that all these data access patterns can have is the &lt;a href="https://blog.shaunfinglas.co.uk/2016/02/the-n1-problem.html"&gt;N+1
problem&lt;/a&gt;.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>The N+1 Problem</title><link href="https://blog.shaunfinglas.co.uk/2016/02/the-n1-problem.html" rel="alternate"></link><published>2016-02-01T00:00:00+01:00</published><updated>2016-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-02-01:/2016/02/the-n1-problem.html</id><summary type="html">&lt;p&gt;The N+1 problem is when multiple queries are executed against a
persistent store when a reduced amount could serve the same purpose.
This degrades performance, uses more memory and can cause complexity to
be added to the code that processes the results. Most sources of the
problem come from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The N+1 problem is when multiple queries are executed against a
persistent store when a reduced amount could serve the same purpose.
This degrades performance, uses more memory and can cause complexity to
be added to the code that processes the results. Most sources of the
problem come from the poor use of ORMs or developers thinking
procedurally instead of in terms of how the underlying database
operates.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Consider a collection of posts that each contain zero or more comments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  Post
    Comment
    Comment
  Post
    Comment
    Comment
    Comment
    Comment
    Comment
  Post
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To retrieve a selection of ten posts including their comments, one
option would be to query all posts then perform a query for each
individual posts' comments. This would result in a total of eleven
queries. While this solution works it is far from ideal. Disturbingly
this solution is easily introduced when developers execute queries
against databases using loops or misconfigured ORMs.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;p&gt;Solutions to solving the N+1 problem are remarkably straightforward. In
the case of manual queries such changes are usually easy to implement.&lt;/p&gt;
&lt;h5&gt;Single Query&lt;/h5&gt;
&lt;p&gt;Use a join operation to perform a single query. This one query would
pull back all posts and their matching comments. This would be the ideal
fix for the example described above.&lt;/p&gt;
&lt;h5&gt;Query and Stitch&lt;/h5&gt;
&lt;p&gt;Sometimes there is no clear grouping or relation between sets of data.
This is often the case when normalized data needs to be denormalized
prior to retrieval. In these cases the query and stitch method can be
used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One query to grab master set.&lt;/li&gt;
&lt;li&gt;Another query to grab the related set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then simply match on a key in code. The key would be something that
groups the data and is present in both sets or is the result of
additional programming logic. Query and stitch is useful for paging or
when relational thinking and grouping does not fit. This tends to be the
case for REST APIs where data is aggregated or composed from multiple
sources, or needs further processing after retrieval.&lt;/p&gt;
&lt;p&gt;Despite two queries here, it is often possible to return separate
datasets within a single query prior to stitching the data together as a
further optimisation and simplification.&lt;/p&gt;
&lt;h5&gt;ORMs or Tooling&lt;/h5&gt;
&lt;p&gt;When ORMs are used discovering the N+1 problem is more obscured without
logging the underlying queries that are performed. Once an issue is
discovered it is usually a case of consulting documentation on what the
fix is - often configuration related. Due to this it is worth enabling
logging during development so queries can be analysed.&lt;/p&gt;</content><category term="tutorial"></category></entry><entry><title>Why you need a Developer Diary</title><link href="https://blog.shaunfinglas.co.uk/2016/02/why-you-need-developer-diary.html" rel="alternate"></link><published>2016-02-01T00:00:00+01:00</published><updated>2016-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-02-01:/2016/02/why-you-need-developer-diary.html</id><summary type="html">&lt;p&gt;After eighteen months of use, I can safely claim &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/developer-diaries.html"&gt;how useful a a
developer diary is, and why you should start using
one&lt;/a&gt; if
you don't already.&lt;/p&gt;
&lt;h4&gt;Changes&lt;/h4&gt;
&lt;p&gt;Using a single file grew too large as expected. Instead each grouping is
allocated an individual file. While some of these are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After eighteen months of use, I can safely claim &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/developer-diaries.html"&gt;how useful a a
developer diary is, and why you should start using
one&lt;/a&gt; if
you don't already.&lt;/p&gt;
&lt;h4&gt;Changes&lt;/h4&gt;
&lt;p&gt;Using a single file grew too large as expected. Instead each grouping is
allocated an individual file. While some of these are small, the ability
to navigate easily is not lost. The simplest thing to do here is just
point a browser at the directory. Navigation and searching is then built
in. Each week I actively split the main file file into separate files or
merge to existing content.&lt;/p&gt;
&lt;h4&gt;Uses&lt;/h4&gt;
&lt;p&gt;I'm increasingly finding regular needs and uses to refer back to notes.
In some cases it is quicker than searching online, simply hit the
bookmark and start typing.&lt;/p&gt;
&lt;p&gt;Adding notes works great when reading books or watching videos. All
content recorded ends up in the same location.&lt;/p&gt;
&lt;h4&gt;Do It&lt;/h4&gt;
&lt;p&gt;Keeping a developer diary is without doubt one of the most useful
changes to my development process. Encouragingly others are doing
similar things too, but &lt;a href="https://github.com/jbranchaud/til"&gt;under slightly different
names&lt;/a&gt;.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Application Validation and Domain Validation</title><link href="https://blog.shaunfinglas.co.uk/2016/01/application-validation-and-domain.html" rel="alternate"></link><published>2016-01-13T19:58:00+01:00</published><updated>2016-01-13T19:58:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-01-13:/2016/01/application-validation-and-domain.html</id><summary type="html">&lt;p&gt;There are two types of validation in an application - application
validation and domain validation. This applies whether or not you
practice DDD. One of my mistakes in the past has been confusing or
conflating these two responsibilities at the same time.&lt;/p&gt;
&lt;h4&gt;Application Validation&lt;/h4&gt;
&lt;p&gt;Application validation is anything technical or anything …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are two types of validation in an application - application
validation and domain validation. This applies whether or not you
practice DDD. One of my mistakes in the past has been confusing or
conflating these two responsibilities at the same time.&lt;/p&gt;
&lt;h4&gt;Application Validation&lt;/h4&gt;
&lt;p&gt;Application validation is anything technical or anything domain experts
would likely scratch their heads at. Examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is the input null?&lt;/li&gt;
&lt;li&gt;is the input whitespace or empty?&lt;/li&gt;
&lt;li&gt;is the input within ranges for the datatypes used?&lt;/li&gt;
&lt;li&gt;is the length of the input suitable for the DB?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Application validation should occur in your application service, along
with other technical aspects such as transactions or configuration. This
is due to different applications having different technical
requirements. For example a HTML frontend may differ to a web service,
so application validation would need to vary also.&lt;/p&gt;
&lt;p&gt;This form of validation is best performed using &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/ddd-validation.html"&gt;validation
services&lt;/a&gt;.
The use of attributes/decorators/annotations can also be used though
&lt;a href="https://blog.shaunfinglas.co.uk/2016/01/validation-is-not-cross-cutting-concern.html"&gt;the following post will explain why this is usually a bad
idea&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Domain Validation&lt;/h4&gt;
&lt;p&gt;Domain validation is concepts the business or domain experts would
understand. Examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"&lt;em&gt;employees can only take a holiday if they have not used their
    allowance&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;em&gt;estimated delivery dates should not fall on holidays&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;em&gt;users can only edit their own posts&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once inside your domain, validation should live as part of your domain
model or domain logic. If &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;value types are utilised you can safely omit
additional application
validation&lt;/a&gt;
as each object would ensure consistency.&lt;/p&gt;</content><category term="tutorial"></category></entry><entry><title>A Lotta Architecture - A Reply to "A Little Architecture"</title><link href="https://blog.shaunfinglas.co.uk/2016/01/a-lotta-architecture-reply-to-little.html" rel="alternate"></link><published>2016-01-01T00:00:00+01:00</published><updated>2016-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-01-01:/2016/01/a-lotta-architecture-reply-to-little.html</id><summary type="html">&lt;p&gt;A recent post about &lt;a href="http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html"&gt;architecture from Uncle
Bob&lt;/a&gt;
got me thinking and talking about a typical day in the life of a
developer. It's well worth a read. In fact at the time of writing this
reply there are 347 retweets and 288 likes - of which I was one of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A recent post about &lt;a href="http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html"&gt;architecture from Uncle
Bob&lt;/a&gt;
got me thinking and talking about a typical day in the life of a
developer. It's well worth a read. In fact at the time of writing this
reply there are 347 retweets and 288 likes - of which I was one of those
statistics.&lt;/p&gt;
&lt;p&gt;The advice is practical and advice that I agree with. Except this is not
the full story. While deferring architectural decisions as late as
possible is a good thing, such details actually tend to be the most
important, costly and difficult parts of an application.&lt;/p&gt;
&lt;p&gt;In the example the &lt;code&gt;BusinessRuleGateway&lt;/code&gt; allows the business logic to be
coded in pure isolation, using a stub or fake. This is fantastic and
provides numerous benefits. Sadly the actual implementation of the
gateway requires knowledge of MySql. This may be obvious but the
decision of what database to use cannot be deferred or ignored forever.&lt;/p&gt;
&lt;p&gt;Once chosen you will require intricate knowledge of how it works and is
implemented. When things go wrong and you are staring at a one hundred
line stack trace, you better hope you understand how the DB is
configured.&lt;/p&gt;
&lt;p&gt;Additionally the gateway interface demonstrates another common problem,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;leaky
abstractions&lt;/a&gt;.
This particular interface while coded without an implementation in mind,
is tightly coupled to a relational database. If we opted for a file
system or document database the use of transactions is now incorrect.&lt;/p&gt;
&lt;p&gt;From my experience such implementation details end up taking the
majority of your time and effort - see the &lt;a href="https://en.wikipedia.org/wiki/Pareto_principle"&gt;80/20
rule&lt;/a&gt;. From small to
large systems, this tends to be a common running theme.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One project was tightly coupled to the web framework. Making a code
    change required detailed knowledge of the inner workings of the page
    request/response lifecycle.&lt;/li&gt;
&lt;li&gt;Another required deep knowledge, awareness and fear of the legacy
    database schema. Code changes were easy. Plugging in a legacy
    database took horrific amounts of effort.&lt;/li&gt;
&lt;li&gt;A current project is working with an asynchronous, distributed
    system. In order to be productive a solid understanding of the
    mechanics of message queues and distributed computing is required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In some of these cases, the advice offered around abstracting
implementation details was actually used. Rarely is the problem ever
pure business logic. In a typical week I would bet a large sum of money
the majority of developers find themselves fighting with integration, or
third party dependencies, over faulty domain logic.&lt;/p&gt;
&lt;p&gt;Deferring decisions is a sign of good architecture, but the act of
deferral or hiding behind interfaces only gets you so far. The sad state
of affairs is that any implementation detail left unchecked can swallow
applications in complexity.&lt;/p&gt;</content><category term="reply"></category><category term="retro"></category><category term="architecture"></category></entry><entry><title>Getting Things Done - For Software Developers</title><link href="https://blog.shaunfinglas.co.uk/2016/01/getting-things-done-for-software.html" rel="alternate"></link><published>2016-01-01T00:00:00+01:00</published><updated>2016-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-01-01:/2016/01/getting-things-done-for-software.html</id><summary type="html">&lt;p&gt;I have been using the incredibly simple techniques within &lt;a href="http://gettingthingsdone.com/"&gt;Getting
Things Done (GTD)&lt;/a&gt; to good effect over
the last twelve months.&lt;/p&gt;
&lt;h3&gt;The System&lt;/h3&gt;
&lt;p&gt;At a high level the system consists of buckets, grouping and a task
store. The actual implementation of GTD systems is down to personal
preference. Many find …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been using the incredibly simple techniques within &lt;a href="http://gettingthingsdone.com/"&gt;Getting
Things Done (GTD)&lt;/a&gt; to good effect over
the last twelve months.&lt;/p&gt;
&lt;h3&gt;The System&lt;/h3&gt;
&lt;p&gt;At a high level the system consists of buckets, grouping and a task
store. The actual implementation of GTD systems is down to personal
preference. Many find their system changes and evolves over time.&lt;/p&gt;
&lt;h4&gt;Buckets&lt;/h4&gt;
&lt;p&gt;Have one or more &lt;em&gt;buckets&lt;/em&gt; which act as simple dumping grounds for
anything you need to do. My phone, pen and paper and post it notes are
the three core buckets I use.&lt;/p&gt;
&lt;p&gt;Buckets are where you store anything that takes more than a couple of
minutes to do. If something takes less time, just do it there and then.
Regularly empty the buckets and assign them to groupings of related
items. Example groupings include tasks around the house, work projects,
blog items, or items to buy.&lt;/p&gt;
&lt;h4&gt;Grouping&lt;/h4&gt;
&lt;p&gt;Each grouping can then be allocated a priority. Each grouping
essentially becomes a mini kanban board.&lt;/p&gt;
&lt;p&gt;Grouping is preferred to having one big todo list as different scenarios
allows the act of tackling items when the time is right. If you have
thirty minutes to spare on the computer, anything that can be done via
the PC can be worked on. Likewise if the weather is good, what tasks can
I do outside?&lt;/p&gt;
&lt;h4&gt;Trello&lt;/h4&gt;
&lt;p&gt;I use &lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt; for the storing of tasks. Trello has
the added benefit of being able to assign due dates, notes and comments.
The boards also make priorities visible. The more tasks in a column, the
more to do and potentially the more attention a certain grouping should
be given.&lt;/p&gt;
&lt;p&gt;Daily one or more emails land in my inbox after being filtered. These
are tasks that need doing within the next twenty four hours. These are
simply reminders or &lt;em&gt;tickles&lt;/em&gt; to complete a task by a set date.&lt;/p&gt;
&lt;h4&gt;Day to Day&lt;/h4&gt;
&lt;p&gt;GTD has been a great assistance not just in software development, but
day to day life in general. There is more to GTD but the core system is
very simple yet highly effective.&lt;/p&gt;
&lt;p&gt;One of the biggest benefits of GTD is the ability to clear you mind. As
everything is recorded or waiting in a bucket nothing gets forgotten.
Instead you can focus on exactly what you need to be doing at the time.&lt;/p&gt;
&lt;p&gt;In part the use of GTD is partly responsible for the growth of this blog
from 2014 to present.&lt;/p&gt;</content><category term="reading"></category><category term="retro"></category></entry><entry><title>Validation is not a Cross Cutting Concern</title><link href="https://blog.shaunfinglas.co.uk/2016/01/validation-is-not-cross-cutting-concern.html" rel="alternate"></link><published>2016-01-01T00:00:00+01:00</published><updated>2016-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2016-01-01:/2016/01/validation-is-not-cross-cutting-concern.html</id><summary type="html">&lt;p&gt;Attributes in C# are also known as &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;decorators in
Python&lt;/a&gt; or &lt;a href="http://docs.oracle.com/javase/tutorial/java/annotations/"&gt;annotations
in Java&lt;/a&gt;.
Other languages may have similar constructs. This post will use
&lt;em&gt;attribute&lt;/em&gt; throughout but refers to the same concept.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;While attributes prove useful for cross cutting concerns such as
authorization or logging, they can be misused. Attributes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Attributes in C# are also known as &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;decorators in
Python&lt;/a&gt; or &lt;a href="http://docs.oracle.com/javase/tutorial/java/annotations/"&gt;annotations
in Java&lt;/a&gt;.
Other languages may have similar constructs. This post will use
&lt;em&gt;attribute&lt;/em&gt; throughout but refers to the same concept.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;While attributes prove useful for cross cutting concerns such as
authorization or logging, they can be misused. Attributes should act as
metadata, providing no direct behaviour. Failing to do so will make DI,
testability and composition very difficult.&lt;/p&gt;
&lt;p&gt;These flaws are especially true for validation. Despite all input
requiring validation, the manner in which validation is performed is
dependent on the entry point to the code. &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/ddd-validation.html"&gt;Context
matters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider order information that requires a billing address and by
definition, its children to be populated. An attribute works a treat
here in this simple case.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/22749d5755b9fa3337c4.js"&gt;&lt;/script&gt;

&lt;p&gt;A problem arises if you only want the billing address validation to
activate if the billing address and delivery address differ.&lt;/p&gt;
&lt;p&gt;Complexity quickly starts to take over. With a more fully featured
example attributes can start to overwhelm the class. This example
becomes worse if the validation is required to be performed by a third
party library or service. Finding a hook to integrate becomes
troublesome.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Avoid attributes for validation in all but the simplest scenarios. Even
simple scenarios lead to some churn if you do decide to switch. My
personal preference is to now avoid attributes all together, instead
opting to use a validation service.&lt;/p&gt;
&lt;p&gt;The obvious downside to this is approach is the appearance of more code.
While this is true, composed object graphs can benefit from the ability
of reuse. Additionally in the case of attributes some degree of testing
is required. These usually fall into the category of asserting the
presence of attributes on properties which is far from ideal. The use of
validation services do not suffer this problem. Internally the
implementation can be switched, altered or refactored without fear of
breaking any tests.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/1100d60aa521a555c972.js"&gt;&lt;/script&gt;

&lt;p&gt;The RootValidator is a composite of zero or more actual validators. Each
validator can be specific to a particular task. The only requirement
being the interface must be the parent object. This is to ensure the
context is not lost when making decisions. The actual interface in this
case could be made to use generic types if required. The
&lt;a href="https://gist.github.com/Finglas/ee7de5821376ce26543b"&gt;ValidationResults&lt;/a&gt;
are a simple value type representing an aggregation of validation
failures. This could be extended or modified for further enhancements.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Composition makes it possible to provide multiple validators that
    all do one thing well.&lt;/li&gt;
&lt;li&gt;Testing is much easy as you can test each validator in isolation.&lt;/li&gt;
&lt;li&gt;Null validators provides easier higher level testing as you can
    provide a no-op validator. Removing the need to build up complex
    object graphs for other test cases.&lt;/li&gt;
&lt;li&gt;Developers can follow, debug and understand simple conditional logic
    more so than framework specific metadata.&lt;/li&gt;
&lt;li&gt;Open to extension and additions such as third party code.&lt;/li&gt;
&lt;li&gt;Services never lose context which allows easy runtime decisions to
    be made.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>ReactJS and JSHint</title><link href="https://blog.shaunfinglas.co.uk/2015/12/reactjs-and-jshint.html" rel="alternate"></link><published>2015-12-01T00:00:00+01:00</published><updated>2015-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-12-01:/2015/12/reactjs-and-jshint.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://facebook.github.io/react/docs/getting-started.html"&gt;ReactJS Getting Started
Guide&lt;/a&gt; states
that the recommended way of using React is combined with npm.&lt;/p&gt;
&lt;p&gt;This is great but poses a problem when trying to use JSHint. The default
example outputs a single JS file containing both your code and the React
library. The end result is the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://facebook.github.io/react/docs/getting-started.html"&gt;ReactJS Getting Started
Guide&lt;/a&gt; states
that the recommended way of using React is combined with npm.&lt;/p&gt;
&lt;p&gt;This is great but poses a problem when trying to use JSHint. The default
example outputs a single JS file containing both your code and the React
library. The end result is the bundle when linted contains code you
don't and shouldn't need to care about.&lt;/p&gt;
&lt;p&gt;The guide does provide a solution, though not as clear as it probably
should be. Offline Transforms. These will transform your jsx files into
plain Javascript without bundling react alongside.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;babel --presets react app.js --out-file main.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simply take the result of the transform and perform your linting
process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jshint main.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This may seem obvious but I did lose some time realising the benefit of
offline transforms.&lt;/p&gt;
&lt;p&gt;Offline transforms do require that you either bundle the transformed
file with React, or you simply include the standalone JS scripts in your
html. This can be done after the fact. JSHint can then play nicely with
your React apps without the need for other tooling such as wrappers or
text editor extensions.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Recommended Reading List 2015</title><link href="https://blog.shaunfinglas.co.uk/2015/12/recommended-reading-list-2015.html" rel="alternate"></link><published>2015-12-01T00:00:00+01:00</published><updated>2015-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-12-01:/2015/12/recommended-reading-list-2015.html</id><summary type="html">&lt;p&gt;In a similar manner to
&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/recommended-reading-list-2014.html"&gt;previous&lt;/a&gt;
&lt;a href="https://blog.shaunfinglas.co.uk/2012/10/recommended-reading-2012.html"&gt;years&lt;/a&gt;
here is my recommended reading list for 2015. As before some of these
books have been released for a while, but these are some of my
highlights for various reasons.&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Dependency-Injection-NET-Mark-Seemann/dp/1935182501"&gt;Dependency Injection in .NET&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;I had put off reading this book for …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;In a similar manner to
&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/recommended-reading-list-2014.html"&gt;previous&lt;/a&gt;
&lt;a href="https://blog.shaunfinglas.co.uk/2012/10/recommended-reading-2012.html"&gt;years&lt;/a&gt;
here is my recommended reading list for 2015. As before some of these
books have been released for a while, but these are some of my
highlights for various reasons.&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Dependency-Injection-NET-Mark-Seemann/dp/1935182501"&gt;Dependency Injection in .NET&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;I had put off reading this book for a while despite numerous teams
having a copy. It turns out a good chunk of the book is applicable
to any language, with the later third being dedicated to actual .NET
solutions. The other two thirds of the book has expanded my
understanding of DI.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Effective-Java-Programming-Language-Series-ebook/dp/B00B8V09HY"&gt;Effective Java: A Programming Language Guide&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Many developers recommend this book even for non Java development.
Many of the tips and advice included we not new to myself but the
book provided further insight and explanation. A good summary of
best practices for any OO developers.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Web-Application-Security-Beginners-Guide-ebook/dp/B006DVPWX0"&gt;Web Application Security, A Beginner's Guide&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A good introductory book on security which provided a useful
refresher for myself as well as providing a platform for further
research on some of the key areas and topics.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Enterprise-Integration-Patterns-Designing-Addison-Wesley-ebook/dp/B007MQLL4E/"&gt;Enterprise Integration Patterns&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A useful sequel to expand on Patterns of Enterprise Application
Architecture. This book focuses more on messaging concepts, going
into detail on a number of topics. The content of the book is
expressed in technology agnostic terms, which has been incredibly
useful when applied to actual implementations.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/REST-Design-Rulebook-Mark-Masse-ebook/dp/B005XE5A7Q"&gt;REST API Design Guidelines&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Much of the guidelines in here fall into the category of common
sense or industry experience. Despite this the guidelines provide
great justifications for API design. An essential reference for any
REST API.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Exercises-Programmers-Challenges-Develop-Coding-ebook/dp/B0170Q50LK"&gt;57 Exercises for Programmers&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A highly practical book in the sense that the book is full of over
sixty practical tasks. Many of these fall into code katas which are
ideal for learning new languages or just staying sharp.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Practical-Object-Oriented-Design-Ruby-Addison-Wesley-ebook/dp/B0096BYG7C"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Despite the name this book applies to OO development in general
while the examples use Ruby. The ideas and concepts expressed in
this book have changed my view on OO programming. If anything the
book will make you think differently about how to design and develop
solutions.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Fifty-Quick-Ideas-Improve-Tests-ebook/dp/B00XVFFK7E"&gt;Fifty Quick Ideas To Improve Your Tests&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A light read with each chapter dedicated to a single, focused topic.
Many of the ideas are well known practices but with expanded
justifications and recommendations.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/HTTP-Definitive-Guide-Guides-ebook/dp/B0043D2EKO"&gt;HTTP The Definitive Guide&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The guide to HTTP if you are a developer. Each area is explained
from high level concepts down to the nitty gritty details.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Process&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley-ebook/dp/B00HNB3VQE"&gt;Implementing Lean Software Development: From Concept to Cash&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A great summary of applying lean concepts to software development.
Much of the content is familiar though the ideas applied to software
development makes this book stand out. This acts as a useful
refresher for lean processes as well.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Lean-Startup-Innovation-Successful-Businesses-ebook/dp/B005PR422K"&gt;The Lean Startup&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;One of the most inspirational books I've read this year. Full of
useful and tested practices that has changed my perspective on
beginning a startup. Interestingly much of the advice can be applied
to individuals working within larger organizations on smaller
projects.&lt;/dd&gt;
&lt;/dl&gt;</content><category term="reading"></category></entry><entry><title>Reducing Conditional Logic to a Single Location</title><link href="https://blog.shaunfinglas.co.uk/2015/12/reducing-conditional-logic-to-single.html" rel="alternate"></link><published>2015-12-01T00:00:00+01:00</published><updated>2015-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-12-01:/2015/12/reducing-conditional-logic-to-single.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2013/05/the-anti-if-campaign.html"&gt;My Anti If Campaign
post&lt;/a&gt;
still generates a lot of questions and discussion. In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conditional statements are not bad. They are a core programming
    construct.&lt;/li&gt;
&lt;li&gt;If you are working in an OO language, type checks are probably not
    the best solution to your problem. Rely on polymorphism.&lt;/li&gt;
&lt;li&gt;You need …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2013/05/the-anti-if-campaign.html"&gt;My Anti If Campaign
post&lt;/a&gt;
still generates a lot of questions and discussion. In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conditional statements are not bad. They are a core programming
    construct.&lt;/li&gt;
&lt;li&gt;If you are working in an OO language, type checks are probably not
    the best solution to your problem. Rely on polymorphism.&lt;/li&gt;
&lt;li&gt;You need to perform conditional checks somewhere. In my first
    example the conditional check was pushed into routing. The
    conditional statement in this case had been offloaded to the
    consumer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A recent real world example was refactored which highlighted the points
previously, but inverts the problem and solution. How do you remove
conditional statements if your system itself has to make the decisions
internally?&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;The simplified example shows the result of invoking a third party
service. This result contained a flag indicating either success or
failure. Effectively there were two hidden types here. Finally the
result was returned based on the HTTP status code.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/9c27094d9728ec85a6f7.js"&gt;&lt;/script&gt;

&lt;p&gt;After the result of the third party call, the domain would decide how to
respond.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/6f11ea92b82c82a032e3.js"&gt;&lt;/script&gt;

&lt;p&gt;Both the client and the domain logic was split over multiple source
files. This made noticing the duplication tricky. Both the client and
the domain also knew the fact that the result of the third party call
can succeed or fail.&lt;/p&gt;
&lt;p&gt;Sadly the domain violates the SRP at a method level. While not a
requirement yet, if further status codes are required or the contents of
responses controlled flow, we are in trouble. The type flag would need
to evolve from a boolean to something more complex. The contents of the
responses may also need to be provided. This solution could leak HTTP
details down into the domain unless careful.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Recognise the boolean flag is actually hidden two types. Remove the flag
and introduce a concrete type for each path. Each concrete type performs
the right operation. In this case executing the relevant methods within
the domain.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/997b68262b19b4d73912.js"&gt;&lt;/script&gt;

&lt;p&gt;Each concrete type is easy to test, change or throw away. In this
example an interface is provided. This contains just the necessary
methods that the process requires. The domain is now simplified. The
domain instance itself is simply provided as an argument. The concrete
instance of each result will perform the right operation.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/03e2b8b6f3ada56479ad.js"&gt;&lt;/script&gt;

&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Now possible to add and remove additional redemption handling
    easily.&lt;/li&gt;
&lt;li&gt;The procedural code remains on the boundary of the system. There is
    no need to try an use OO concepts here. Keep it simple.&lt;/li&gt;
&lt;li&gt;The domain becomes flexible and removes the procedural checks. OO
    concepts can be applied as much as you like here.&lt;/li&gt;
&lt;li&gt;The redemption service works with anything that can play the role of
    a redeemer. Open to refactoring.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Closing&lt;/h4&gt;
&lt;p&gt;Stick the procedural code on the edge of your system and be done with
it. Just ensure that you only perform such checks once.&lt;/p&gt;
&lt;p&gt;Just because you are not performing explicit type checks, the use of
boolean flags usually indicates at least two hidden types.&lt;/p&gt;
&lt;p&gt;The anti if campaign is not the removal of all conditional checks. They
need to happen somewhere. Just try to limit them.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Year in Review 2015</title><link href="https://blog.shaunfinglas.co.uk/2015/12/year-in-review-2015.html" rel="alternate"></link><published>2015-12-01T00:00:00+01:00</published><updated>2015-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-12-01:/2015/12/year-in-review-2015.html</id><summary type="html">&lt;h4&gt;January&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Started the year with reasons as to why &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/why-technical-blogging.html"&gt;technical blogging is
    useful and
    recommended&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kick started a series of posts themed around simplicity,
    recommending to &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;abstract data use and not data
    access&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;February&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;series of posts on
    abstractions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The power of &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;Value Objects as a key
    refactoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;March …&lt;/h4&gt;</summary><content type="html">&lt;h4&gt;January&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Started the year with reasons as to why &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/why-technical-blogging.html"&gt;technical blogging is
    useful and
    recommended&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kick started a series of posts themed around simplicity,
    recommending to &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;abstract data use and not data
    access&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;February&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;series of posts on
    abstractions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The power of &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;Value Objects as a key
    refactoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;March&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Concluded the series on abstractions.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;
    and &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;
    have been two of the biggest changes I've made in my coding habits
    this year.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;April&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A follow up to one of my previous posts around the &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/getters-and-setters-are-evil-redux.html"&gt;use of getters
    and
    setters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I realised I had &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cool-uris-dont-change.html"&gt;failed at maintaining and managing
    URIs&lt;/a&gt;
    for the content on the site.&lt;/li&gt;
&lt;li&gt;The end of the month saw a focus on two simple topics that can
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/dry-vs-damp-in-tests.html"&gt;clean up duplication in
    tests&lt;/a&gt;
    and &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;remove obscurity from
    assertions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;May&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A focus on &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/tasking-in-software-development.html"&gt;tasking and planning in software
    development&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Two core techniques of producing a &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;Walking
    Skeleton&lt;/a&gt;
    and &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/mob-programming.html"&gt;Mob
    Programming&lt;/a&gt;
    have proved invaluable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;June&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Provided two techniques that allow continuous delivery of software
    thanks to &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;feature
    toggles&lt;/a&gt;
    and &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/branch-by-abstraction.html"&gt;branching by
    abstraction&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/do-you-really-need-microservice.html"&gt;question of whether or not you actually need a
    microservice&lt;/a&gt;
    also came up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;July&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;value in integration testing was
    highlighted&lt;/a&gt;,
    along with an introduction into &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;contract
    testing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The month concluded with a key reminder of &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/you-still-need-manual-tests.html"&gt;how important manual
    testing
    is&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;August&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Began with &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/why-i-dont-like-mocking-frameworks.html"&gt;an alternative to complex mocking
    frameworks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/queue-centric-work-pattern.html"&gt;use of message
    queues&lt;/a&gt;
    is one of the biggest changes in my software development process of
    the last few years.&lt;/li&gt;
&lt;li&gt;The month concluded with the acceptance that high quality
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/production-code-is-dirty.html"&gt;production code is often considered
    dirty&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;September&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This year the concepts and ideas in &lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-1.html"&gt;Release
    It&lt;/a&gt;
    have proved incredibly useful.&lt;/li&gt;
&lt;li&gt;A key principle I have applied this year is to &lt;a href="https://blog.shaunfinglas.co.uk/2015/09/waste-write-less-code.html"&gt;write less
    code&lt;/a&gt;,
    truly following the benefits of DRY and KISS.&lt;/li&gt;
&lt;li&gt;The use of the &lt;a href="https://blog.shaunfinglas.co.uk/2015/09/the-self-shunt-test-doubles-without.html"&gt;self shunt
    pattern&lt;/a&gt;
    was provided as a simply testing strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;October&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/10/abstractions-in-code-details-in-metadata.html"&gt;Abstractions in code and details in
    metadata&lt;/a&gt;
    is one of the many pieces of advice the Pragmatic Programmer
    highlights.&lt;/li&gt;
&lt;li&gt;Another big change in my coding habits this year has been the focus
    of &lt;a href="https://blog.shaunfinglas.co.uk/2015/10/header-interfaces-vs-role-interfaces.html"&gt;header interfaces vs role
    interfaces&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The use of &lt;a href="https://blog.shaunfinglas.co.uk/2015/10/set-based-design.html"&gt;Set Based
    Design&lt;/a&gt;
    stands out as one of the most thought provoking idea of this year.&lt;/li&gt;
&lt;li&gt;The month concluded with a summary of what &lt;a href="https://blog.shaunfinglas.co.uk/2015/10/coding-in-real-world.html"&gt;coding in the real
    world&lt;/a&gt;
    is.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;November&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/11/pre-computation.html"&gt;Pre-Computation&lt;/a&gt;
    is a simple and incredibly effective solution to improve performance
    and reduce complexity.&lt;/li&gt;
&lt;li&gt;The lack of the ability to &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;iterate upon
    architecture&lt;/a&gt;
    was acknowledged.&lt;/li&gt;
&lt;li&gt;The month ended with two odd, but valuable lessons - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;try not to
    build
    anything&lt;/a&gt;
    and make sure you &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;throw code
    away&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;December&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;December closed out with a look back at the &lt;a href="https://blog.shaunfinglas.co.uk/2015/12/reducing-conditional-logic-to-single.html"&gt;anti if campaign from
    another
    perspective&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The month ended with a round up of some of my &lt;a href="https://blog.shaunfinglas.co.uk/2015/12/recommended-reading-list-2015.html"&gt;best reads of the
    last twelve
    months&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="year-in-review"></category><category term="retro"></category></entry><entry><title>Don't Build a Thing</title><link href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html" rel="alternate"></link><published>2015-11-01T00:00:00+01:00</published><updated>2015-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-11-01:/2015/11/dont-build-thing.html</id><summary type="html">&lt;p&gt;Part two of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;Throw Code
    Away&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Here is a real life example of where I treated a unknown project
incorrectly. Why I handled this is badly and how I should have handled
it if I could rewind …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Part two of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;Throw Code
    Away&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Here is a real life example of where I treated a unknown project
incorrectly. Why I handled this is badly and how I should have handled
it if I could rewind time.&lt;/p&gt;
&lt;h4&gt;Whoops&lt;/h4&gt;
&lt;p&gt;An external client had a proposal for a web service which would power
part their new web application. This service sounded very simple. Data
import and some basic querying. There were plans to add additional bells
and whistles at a later date. After an initial meeting development
began.&lt;/p&gt;
&lt;p&gt;A week later a second meeting was placed. A good few hours of
development had been invested by this point. The meeting was useful,
however some changes had cropped up. The data format had been modified,
my solution could not handle the new format. Also the querying needed
various modifications.&lt;/p&gt;
&lt;p&gt;A week later, after several more hours of changes, the second meeting
landed. There were more changes. This time technical adjustments based
on the feedback from the clients' developers.&lt;/p&gt;
&lt;p&gt;The third meeting introduced scope creep. Could this service handle any
potential customer going forwards? It certainly could not at present.&lt;/p&gt;
&lt;p&gt;You should see where this is heading. Eventually the requirements
stabilized. Not until several days of my time had been taken up building
something that was not needed, only to have to tear it down and salvage
what I could.&lt;/p&gt;
&lt;p&gt;The end result was a project I was not proud of. Due to my heavily
invested time I wanted to save as much work as I could. It would be hard
to tell my superiors we've wasted X amount of money. The project also
lacked long term stability. Each iteration built upon the next. The
feature to handle generic customers was tacked on. Had this been known
from day one, things would have looked much better both in terms of code
quality and architecture.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;There is an easy way to transform a unknown project into a known project
- build as little as you possibly can. Do this in the shortest amount of
time to gather feedback, learn and defer decisions. After this process
you will be in the best possible shape to tackle the project. These
principles are the key to the processes within a lean start up.&lt;/p&gt;
&lt;h4&gt;How I Should Have Handled It&lt;/h4&gt;
&lt;p&gt;Starting with a minimal project in order to demo and deploy this would
do nothing other than returned a hardcoded JSON literal. Enough to
demonstrate and spark conversations.&lt;/p&gt;
&lt;p&gt;During week two the discovery that a new data format had been chosen
would not matter. The feature to load data had not been written after
all. At this point the hardcoded data would be tweaked to match the new
content. Easy.&lt;/p&gt;
&lt;p&gt;Week three would pose no threat. Technical changes around best practices
or technology are easily handled because very little code exists.&lt;/p&gt;
&lt;p&gt;The newly required functionality discovered in week four would
prototyped, estimated and agreed. As no real work has been done, adding
this feature in would not only be achievable, it would be
architecturally sound rather than bolted on as an after thought.&lt;/p&gt;
&lt;h4&gt;Why?&lt;/h4&gt;
&lt;p&gt;Deferring decisions such as the above is so useful that this can be
applied to any project from my experience. Knowing how long a decision
can be deferred is dependent on the scenario, but you will be pleasantly
surprised in many cases at just how long decisions can and should be
deferred. Even for known projects the power that deferral brings is so
beneficial I tend to favour this style whenever possible. Build just
enough to gather feedback and go from there.&lt;/p&gt;
&lt;p&gt;The key point is that very little time and energy has been invested. In
the second example of how I should have handled the client I invested
hours of my time. In reality I invested days. I was invested in the
first solution. The second solution however could be chopped, changed or
thrown away with no protest. The act of throwing code away is so
important, yet so rarely practised it will be the subject of the third
part of this series.&lt;/p&gt;</content><category term="architecture"></category><category term="agile-architecture-series"></category></entry><entry><title>Pre Computation</title><link href="https://blog.shaunfinglas.co.uk/2015/11/pre-computation.html" rel="alternate"></link><published>2015-11-01T00:00:00+01:00</published><updated>2015-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-11-01:/2015/11/pre-computation.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/caching.html"&gt;Caching is a common
technique&lt;/a&gt;,
especially with HTTP as it is made so easy. However pre computation is
an alternative that can be used to reduce failures as well as speed up
processing and response times.&lt;/p&gt;
&lt;h4&gt;Caching Example&lt;/h4&gt;
&lt;p&gt;Assume a list of countries to be displayed on the UI. These …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/caching.html"&gt;Caching is a common
technique&lt;/a&gt;,
especially with HTTP as it is made so easy. However pre computation is
an alternative that can be used to reduce failures as well as speed up
processing and response times.&lt;/p&gt;
&lt;h4&gt;Caching Example&lt;/h4&gt;
&lt;p&gt;Assume a list of countries to be displayed on the UI. These are often
stored in one logical place, the database. A remote call is issued to
query the database and return the results. The results are then
manipulated and inserted into the UI. Repeat calls will then be cached
for some period by the web server and/or proxy.&lt;/p&gt;
&lt;h4&gt;Pre Computed Example&lt;/h4&gt;
&lt;p&gt;As part of the build process have the same query performed, dynamically
building up the result set. Using a templating language modify a base
source file which simply inserts the dynamic result set. The end result
of this would be a source file containing a collection of countries as
if you had hardcoded the values. The difference is these values are
pulled from a single source of truth as part of the pre build step.&lt;/p&gt;
&lt;p&gt;In a statically compiled language you would have compile time safety
after this file is generated. Regardless a simple suite of tests to
ensure the collection is not empty or badly formed would be beneficial.&lt;/p&gt;
&lt;p&gt;Once the deploy is complete all queries to retrieve the collection of
countries would be performed by the pre computed collection. This
technique works regardless of language due to the simplicity of storing
a collection of items in a literal array or hashtable. For content that
changes regularly you can use a separate content deploy which simply
deploys any changes to content.&lt;/p&gt;
&lt;p&gt;Pre computation works for even what appears to be dynamic content.
Article submission sites, e-commerce or wikis could all be developed
using pre computation.&lt;/p&gt;
&lt;p&gt;Use punch outs for anything that varies based on user or context.
Javascript is the natural choice for inserting this dynamic content.
This advice flies in the face of much of the direction the modern web is
heading. However the benefits of reduced remote calls, fast responses
and less moving parts should not be under estimated.&lt;/p&gt;
&lt;p&gt;Naturally pre computation will not work in areas where content is highly
dynamic or specific to users. Single page applications, social media
streams and the like are better suited to dynamic content cached where
possible. Additionally adjusting a system to handle content deploys is
not something that can be achieved lightly. As the build and deploy
process must accommodate these changes, pre computation is usually
required to be thought of up front or require some rework to introduce.&lt;/p&gt;</content><category term="architecture"></category></entry><entry><title>Throw Code Away</title><link href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html" rel="alternate"></link><published>2015-11-01T00:00:00+01:00</published><updated>2015-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-11-01:/2015/11/throw-code-away.html</id><summary type="html">&lt;p&gt;The third and final part of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;Part
one&lt;/a&gt;
suggested walking skeletons for new features or projects. &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Part
two&lt;/a&gt;
suggested building the limited, smallest and simplest functionality
possible. However you do not always have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The third and final part of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;Part
one&lt;/a&gt;
suggested walking skeletons for new features or projects. &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Part
two&lt;/a&gt;
suggested building the limited, smallest and simplest functionality
possible. However you do not always have the luxury of deferral.
Likewise if the project already exists and you are amending
functionality, a walking skeleton is going to be limited.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Throw code away. This sounds brutal and overkill, but throwing code away
has many advantages.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The second time around you will solve the problem quicker having
    benefited from first time. The first attempt is a prototype in this
    case. Throwing away prototypes is expected. They are not production
    ready, usually built with short cuts or quality comprises
    intentionally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The cleanest code is no code. Your following attempts will be
    cleaner. Knowing the issues from the previous attempt allows the
    ability to put code and procedures in place to prevent the same
    quality problems occurring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long term goals can be achieved rather than aiming for short term
    wins. Instead of focusing on meeting the current iterations' goal,
    answer whether or not your solution is fit for purpose going
    forwards. Does it scale? Is the quality there?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You benefit from hindsight. Most code to be replaced should have
    lived through some sort of review process. If the code has lived
    through production you have even more ammo to target the weak
    points. Where are the hotspots? What changes more frequently? Where
    do bugs tend to reside?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Objections&lt;/h4&gt;
&lt;p&gt;Throwing code away should not be taken lightly, but it is certainly a
valid technique under the right circumstances.&lt;/p&gt;
&lt;p&gt;You will have an easier time suggesting to start over on two days worth
of work than you would two weeks, two months or two years. Keep your
batch sizes small and the ability to throw code away will become easier
to accept, with the benefits outweighing the negatives.&lt;/p&gt;
&lt;p&gt;Small batches are not the only prerequisite to suggest throwing code
away. Small changes are also essential. You can easily suggest throwing
a method or class away, but you will rightly so have a harder time
suggesting throwing away a module or system.&lt;/p&gt;
&lt;p&gt;Refactoring is often used as a suggestion to combat the need to rewrite
or throw code away but this is rarely the case in practice. Refactoring
is a misused word and crucially misunderstood technique. If you change
architecture you are not refactoring.&lt;/p&gt;
&lt;p&gt;The biggest objector you will likely find is yourself. Having become
invested in a task it can be hard to try again. Fight the urge to resist
and throw code away. You may be pleasantly surprised by the results.&lt;/p&gt;</content><category term="architecture"></category><category term="agile-architecture-series"></category></entry><entry><title>You Cannot Iterate upon Architecture</title><link href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html" rel="alternate"></link><published>2015-11-01T00:00:00+01:00</published><updated>2015-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-11-01:/2015/11/you-cannot-iterate-upon-architecture.html</id><summary type="html">&lt;p&gt;This is the first part of a series of posts as to why gradual iteration,
doing the simplest thing that can possibly work over a software project
fails in many cases. This series will explain why this is the case, and
provide solutions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is the first part of a series of posts as to why gradual iteration,
doing the simplest thing that can possibly work over a software project
fails in many cases. This series will explain why this is the case, and
provide solutions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;Throw Code
    Away&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="http://blog.crisp.se/2013/01/13/henrikkniberg/how-spotify-builds-products"&gt;Spotify has gave a
talk&lt;/a&gt;
on how it builds products and manages teams internally. This provides
some great insights and advice. As part of this an incredibly effective
image is used. This shows the production of a form of transport to
travel from A to B.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Building a car from a skateboard." src="http://3.bp.blogspot.com/-GIv_yj7SN08/VkDhOX_5DoI/AAAAAAAAAIo/12OKoGVoCvY/s1600/images.duckduckgo.com.png"&gt;&lt;/p&gt;
&lt;p&gt;In the first half of the image, the product is built in iterations. Each
step adds to the next. It is not until the fourth step that the product
is able to take passengers from A to B. Agile development aims to solves
the issues around this.&lt;/p&gt;
&lt;p&gt;The second half of the image is built iteratively. The goal is still the
same. A product to travel from A to B. From the first version this goal
is complete. However the team would be embarrassed to release in this
state. Further iterations are carried out as the team learns more.&lt;/p&gt;
&lt;p&gt;From my experience building software in this manner only works half of
the time. Any software projects from my first line of code up until
present day fall into one of two categories.&lt;/p&gt;
&lt;h4&gt;Known Projects or Unknown Projects&lt;/h4&gt;
&lt;p&gt;A known project would be where the destination is clear and well
defined. Internal development projects, refactoring, or replacement
would fall into this category. Easily half of my professional time has
been spent on projects where we know what we are building and when it
must be complete by.&lt;/p&gt;
&lt;p&gt;The second type of projects is where the destination is unknown. You are
working for an external customer directly. On a regular basis you
regroup with the client. You gather feedback and iterate. Over the
course of this process your destination may very well surprise you,
along with the route you use to get there.&lt;/p&gt;
&lt;h4&gt;Refactoring is Class or Method Level Only&lt;/h4&gt;
&lt;p&gt;You could claim the image works for unknown projects. At any point the
client (internal or external) could put a halt on development after
their vision is complete. For known projects, the area this image fails
is simple - if a car is required, build a car. If this is demonstrating
a known project, building only then to start recycling, refactoring and
forming the code into another shape is costly. Sticking with the vehicle
analogy - building a car is complex. In one iteration it would not be
possible to gather feedback until it was too late. Much time and
resources would be wasted.&lt;/p&gt;
&lt;p&gt;Translating to a software example, this would be the same as building a
complex web application. The goal is known, yet the first stab is a HTML
page. This is followed by some simple sever side logic. On top of this
we add an ORM. Further iterations thrash and push the code around. Early
simple decisions start to come back to haunt us. This technical debt is
either repaid or ignored. As further iterations follow the architecture
of the application suffers. Through sheer force of determination the web
application is complete. Usually there are many compromises along the
way. Further enhancements or changes could be costly.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;p&gt;For unknown projects there are two solutions. First and foremost build a
&lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;walking
skeleton&lt;/a&gt;.
Using the vehicle example, the first iteration of a known project should
produce the frame of the car. Other than wheels there would be very
little else here. However this is still a car, though limited in
functionality and features. Using the software example this would be the
core flow of the web app. Either hardcoded in places or built using
scaffolding. You would still be embarrassed to release this.
Architecturally you have all the core parts you need. The benefit of
this is that future iterations simply build upon the good, known
framework. The foundations of the project are stable. There is no fear
that after several iterations you stumble upon a technical
implementation issue.&lt;/p&gt;
&lt;p&gt;The second solution is turn an unknown project into a known project.
This sounds difficult but there is a remarkable easy way to achieve this
- the subject of the next post.&lt;/p&gt;</content><category term="architecture"></category><category term="agile-architecture-series"></category></entry><entry><title>Abstractions in Code, Details in Metadata</title><link href="https://blog.shaunfinglas.co.uk/2015/10/abstractions-in-code-details-in-metadata.html" rel="alternate"></link><published>2015-10-01T00:00:00+02:00</published><updated>2015-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-10-01:/2015/10/abstractions-in-code-details-in-metadata.html</id><summary type="html">&lt;p&gt;I've programmed many games - each one was special in its own way. One in
particular stands out early in my university studies, a top down
shooter. It was not graphics, gameplay, or sound that made it stand out
however. It was the lesson it taught me about software development.&lt;/p&gt;
&lt;h4&gt;Level …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;I've programmed many games - each one was special in its own way. One in
particular stands out early in my university studies, a top down
shooter. It was not graphics, gameplay, or sound that made it stand out
however. It was the lesson it taught me about software development.&lt;/p&gt;
&lt;h4&gt;Level One&lt;/h4&gt;
&lt;p&gt;With the deadline for completion of the project looming, time was
running out. The core game engine was complete but other than the first
level there was nothing else for the player to do. With more marks
awarded for various components I decided to add a second level.&lt;/p&gt;
&lt;p&gt;At the time the game consisted of a source file called &lt;code&gt;level.cs&lt;/code&gt;. This
contained parts of functionality explicit to every level that I would
need. It also contained code specific to the first level. My solution
was to extract a base class and introduce &lt;code&gt;level.cs&lt;/code&gt; and &lt;code&gt;level1.cs&lt;/code&gt;.
This worked. The addition of level two was not as easy. The second level
required a considerable amount of additional code, despite the shared
functionality. A slow feedback cycle of change, compile, and test, made
this addition even more tedious. With the test phase consuming much of
my time.&lt;/p&gt;
&lt;p&gt;Hopefully you can see where this is going. While I never added a third
level, the same problem exists. In fact for every additional level the
problem would get worse.&lt;/p&gt;
&lt;h4&gt;Lesson&lt;/h4&gt;
&lt;p&gt;The lesson I learned here was that a game engine should be abstract,
while the details of the level should be data that is configured outside
of the code. This allows anyone to make levels for the game. Levels can
be unique rather than constrained to how the programmers coded them to
be, introducing novel gameplay elements constrained only by the
imagination of the designers.&lt;/p&gt;
&lt;p&gt;This concept is not unique to games programming. I would learn a few
years later that this is a well known and advised practice - &lt;a href="https://pragprog.com/book/tpp/the-pragmatic-programmer"&gt;The
Pragmatic
Programmer&lt;/a&gt;
summarises that abstractions should live in code, while details lives in
metadata (data about data).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Program for the general case, and put the specifics outside the
compiled code base."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those of you with a keen sense for code smells may be thinking about
another issue with this story, and yes, you're right. The base class
caused issues. The use and misuse of inheritance will be the subject of
a future post.&lt;/p&gt;</content><category term="programming"></category><category term="retro"></category></entry><entry><title>Coding In the Real World</title><link href="https://blog.shaunfinglas.co.uk/2015/10/coding-in-real-world.html" rel="alternate"></link><published>2015-10-01T00:00:00+02:00</published><updated>2015-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-10-01:/2015/10/coding-in-real-world.html</id><summary type="html">&lt;p&gt;As a student when confronted with a problem, I would end up coding it
and thinking - &lt;em&gt;how do the professionals do this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For some reason I had the impression that once I entered the industry I
would find enlightenment. Discovering the one true way to write high
quality, professional code …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a student when confronted with a problem, I would end up coding it
and thinking - &lt;em&gt;how do the professionals do this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For some reason I had the impression that once I entered the industry I
would find enlightenment. Discovering the one true way to write high
quality, professional code.&lt;/p&gt;
&lt;p&gt;It turns out that code in industry is not too far removed from the code
I was writing back when I knew very little.&lt;/p&gt;
&lt;p&gt;Code in the real world can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;messy or clean&lt;/li&gt;
&lt;li&gt;hard or easy to understand&lt;/li&gt;
&lt;li&gt;simple or complex&lt;/li&gt;
&lt;li&gt;easy or hard to change&lt;/li&gt;
&lt;li&gt;or any combination of the above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Very rarely will you be confronted with a problem that is difficult.
Most challenges typically are formed around individuals and processes,
rather than day to day coding. Years later I finally have the answer.
Code in the real world is not that much different to code we were all
writing when we first started out.&lt;/p&gt;
&lt;p&gt;If I could offer myself some advice back in those early days it would be
to follow KISS, YAGNI and DRY religiously. The rest will fall into place
naturally. Above all, aim for simplicity.&lt;/p&gt;
&lt;p&gt;The best way to summarise my feelings would be this image courtesy of
&lt;a href="http://imgur.com/gallery/L0VoWT9"&gt;Imgur&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="//imgur.com/L0VoWT9"&gt;View post on imgur.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="retro"></category></entry><entry><title>Header Interfaces vs Role Interfaces</title><link href="https://blog.shaunfinglas.co.uk/2015/10/header-interfaces-vs-role-interfaces.html" rel="alternate"></link><published>2015-10-01T00:00:00+02:00</published><updated>2015-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-10-01:/2015/10/header-interfaces-vs-role-interfaces.html</id><summary type="html">&lt;p&gt;In some languages such as C++ you must define header interfaces. These
constructs define how a public type is exposed in terms of its public
interface. Other languages take a different route. C# or Java do not
require headers but they are still very much in circulation. This
unfortunately brings …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In some languages such as C++ you must define header interfaces. These
constructs define how a public type is exposed in terms of its public
interface. Other languages take a different route. C# or Java do not
require headers but they are still very much in circulation. This
unfortunately brings along some unwanted side effects.&lt;/p&gt;
&lt;h4&gt;Header Interfaces&lt;/h4&gt;
&lt;p&gt;Header interfaces are a one to one mapping of public methods that match
the type it is defining. In other words, they are recreating the
overhead of headers in languages that do not need them.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/191d9a210e830cb61d83.js"&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;Header interfaces tend to break the Interface Segregation Principle.&lt;/li&gt;
&lt;li&gt;Harder to switch objects via DI as you are forced to implement all
    members even if you do not use the whole interface.&lt;/li&gt;
&lt;li&gt;Prone to breakages as the one to one mapping means any change is
    breaking.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Role Interfaces&lt;/h4&gt;
&lt;p&gt;Role interfaces define the role an object plays. Due to various roles
having different responsibilities they are usually grouped by
functionality. Role interfaces are usually combined with composition or
interface inheritance.&lt;/p&gt;
&lt;p&gt;The role of a &lt;code&gt;Developer&lt;/code&gt; has now been introduced. This is a separate
concept from the rest of the object.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/ae647867f27a7404720e.js"&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;Easier to follow the Interface Segregation Principle.&lt;/li&gt;
&lt;li&gt;Closely related to the Liskov Substitution Principle - no need for
    partial implementations.&lt;/li&gt;
&lt;li&gt;Less chance of breaking changes - interfaces can be removed or added
    easily.&lt;/li&gt;
&lt;li&gt;Reduced scope - anything that fulfils the role of &lt;code&gt;Developer&lt;/code&gt; can be
    provided as an argument.&lt;/li&gt;
&lt;li&gt;DI frameworks may take more configuration if role interfaces are
    used. This may explain the bias towards header interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;More&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.ploeh.dk/2013/01/10/RoleInterfaceRoleHint"&gt;http://blog.ploeh.dk/2013/01/10/RoleInterfaceRoleHint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pluralsight.com/courses/encapsulation-solid"&gt;http://www.pluralsight.com/courses/encapsulation-solid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/bliki/RoleInterface.html"&gt;http://martinfowler.com/bliki/RoleInterface.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="code-quality"></category><category term="tutorial"></category></entry><entry><title>Set Based Design</title><link href="https://blog.shaunfinglas.co.uk/2015/10/set-based-design.html" rel="alternate"></link><published>2015-10-01T00:00:00+02:00</published><updated>2015-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-10-01:/2015/10/set-based-design.html</id><summary type="html">&lt;p&gt;Each morning newspapers hit the newstands without fail. Live broadcasts
are the same. Come show time they hit the air without fail. You can
probably think of more examples of deadlines that are constantly
achieved. So why does software development accept missed deadlines?
Software development not only encourages software to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Each morning newspapers hit the newstands without fail. Live broadcasts
are the same. Come show time they hit the air without fail. You can
probably think of more examples of deadlines that are constantly
achieved. So why does software development accept missed deadlines?
Software development not only encourages software to be late, it has
become accepted or just another risk to the project by default.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley/dp/0321437381"&gt;Implementing Lean Software
Development&lt;/a&gt;
introduces the concept of Set Based Design (SBD). SBD provides an answer
on how to never miss a deadline every again, providing the deadline is
feasible. SBD will allow software to constantly hit deadlines just as
newspapers and TV shows do.&lt;/p&gt;
&lt;p&gt;SBD requires multiple teams to implement the same functionality split
over several sets (versions) of work. Each team works independently and
in parallel to fulfil the same goal. This is in stark contrast to normal
proceedings where each team is usually assigned to separate projects. At
the end of the deadline the set that is best fit for purpose is chosen.
This ensures the teams as a collective have delivered the best possible
solution within the deadline. Each set should increase in scope and
complexity. This means each additional set has a higher chance of
missing the deadline.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;The number of sets you decide upon is based on each variation, so there
is no fixed limit. Assume three for the following introduction.&lt;/p&gt;
&lt;h5&gt;Set One&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Start by accepting and acknowledging the deadline. This may be an
    integration deadline, a release or third party dependencies.&lt;/li&gt;
&lt;li&gt;One of the teams should be working on the simplest thing that can
    possibly work. Some may say this is verging on a bodge or hack. You
    may end up adding logic to views, inserting business logic into
    sprocs or committing any other coding related atrocity. Despite this
    you must ensure the functionality is fit for purpose, tested and
    agreed by all.&lt;/li&gt;
&lt;li&gt;The worst case scenario is the first set is released. You hit the
    deadline and you resolve some technical debt in the background
    afterwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Set Two&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;The team working on the second set would up their game. Still aiming
    for the deadline while the scope increases. Instead of adding logic
    into views, it goes into domain objects. Logic in sprocs? No chance.
    Other further enhacements could be added.&lt;/li&gt;
&lt;li&gt;The worst case scenario? The deadline is missed but they have a
    solution which is better than the first set and close to completion.&lt;/li&gt;
&lt;li&gt;After the first release the team simply finish up and deploy after
    the fact. This wipes out the technical debt of the first set and
    provides both a met deadline (via the first set) and the best
    possible solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Set Three&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;A third set would take a much higher level approach to the solution.
    This would be the best proposed solution. A strategic decision for
    the team factoring in long term goals and ambitions.&lt;/li&gt;
&lt;li&gt;The chance of completing this set within the deadline are slim to
    none.&lt;/li&gt;
&lt;li&gt;The worst case scenario is the team on the third set miss the
    deadline and one of the other two sets are released.&lt;/li&gt;
&lt;li&gt;This is not the end of the world. Depending on how much work is left
    would dictate what happens. Scope could be further reduced, the set
    could be finished, or abandoned completely.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Questions&lt;/h4&gt;
&lt;h5&gt;Is this waste?&lt;/h5&gt;
&lt;p&gt;No. The goal is to hit the deadline with the best possible solution.
While a number of sets will never be released, the teams have hit their
target. Teams should judge success on goal completion, not lines of code
into production.&lt;/p&gt;
&lt;h5&gt;What are the downsides?&lt;/h5&gt;
&lt;p&gt;Trying to explain SBD and actually convincing the business to have a
number of teams all working on the same project would sadly be an
incredible challenge in most organisations.&lt;/p&gt;
&lt;h5&gt;When would you not use SBD?&lt;/h5&gt;
&lt;p&gt;SBD makes sense when there is a fixed scope deadline that cannot be
missed. If this is not the case, iteration or refactoring at each step
would suffice.&lt;/p&gt;
&lt;h5&gt;Alternatives?&lt;/h5&gt;
&lt;p&gt;Producing an architecture that allows replacement or changes easily is
another alternative, though this has risks of its own. Changeable
architecture will be covered in a future post.&lt;/p&gt;</content><category term="architecture"></category></entry><entry><title>Release It - Highlights Part 1</title><link href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-1.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-09-01:/2015/09/release-it-highlights-part-1.html</id><summary type="html">&lt;p&gt;&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt; is one of the
most useful books I've read. The advice and suggestions inside certainly
change your perspective on how to write software. My key takeaway is
that software should be cynical. Expect the worst, expect failures and
put up boundaries. In the majority of cases these failures …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt; is one of the
most useful books I've read. The advice and suggestions inside certainly
change your perspective on how to write software. My key takeaway is
that software should be cynical. Expect the worst, expect failures and
put up boundaries. In the majority of cases these failures will be
trigged by integration points with other systems, be it third parties or
your own.&lt;/p&gt;
&lt;p&gt;My rough notes and snippets will be spread across the following two
posts. There is much more to the book than this, including various
examples of real life systems failing and how they should have handled
the problem in the first place.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - Shared Resources, Responses, SLA, Databases and Circuit
    Breakers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-2.html"&gt;Part 2 - Caches, Testing, HTML, Pre-Computation and
    Logging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Shared Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Shared Resources can jeopardize scalability.&lt;/li&gt;
&lt;li&gt;When a shared resource gets overloaded, it will become a bottleneck.&lt;/li&gt;
&lt;li&gt;If you provide the front end system, test what happens if the back
    end is slow/down. If you provide the back end, test what happens if
    the front end is under heavy load.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Responses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Generating a slow response is worse than refusing to connect or
    timing out.&lt;/li&gt;
&lt;li&gt;Slow responses trigger cascading failures.&lt;/li&gt;
&lt;li&gt;Slow responses on the front end trigger more requests. Such as the
    user hitting refresh a few times, therefore generating more load
    ironically.&lt;/li&gt;
&lt;li&gt;You should error when a response exceeds the systems allowed time,
    rather than waiting.&lt;/li&gt;
&lt;li&gt;Most default timeouts of libraries and frameworks are far too
    generous - always configure manually.&lt;/li&gt;
&lt;li&gt;One of the worst places that scaling effects will bite you is with
    point to point communication. Favour &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/queue-centric-work-pattern.html"&gt;other alternatives such as
    messaging&lt;/a&gt;
    to remove this problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SLA&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When calling third parties, services levels only decrease.&lt;/li&gt;
&lt;li&gt;Make sure even without a third party response your system can
    degrade gracefully.&lt;/li&gt;
&lt;li&gt;Be careful when crafting SLA's. Do not simply state 99.999%, it
    costs too much to hit this target and most systems don't need this
    sort of uptime.&lt;/li&gt;
&lt;li&gt;Reorient the discussion around SLA's to focus on features, not
    systems.&lt;/li&gt;
&lt;li&gt;You cannot offer a better SLA than the worst of any external
    dependencies you use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Databases&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Your application probably trusts the database far too much.&lt;/li&gt;
&lt;li&gt;Design with scepticism and you will achieve resilience.&lt;/li&gt;
&lt;li&gt;What happens if the DB returns 5 million rows instead of 5 hundred?
    You could run out of memory trying to load all this. The only
    answers a query can return is 0, 1 or many. Don't rely on the
    database to follow this limit. Other systems or batch processes may
    not respect this rule and insert too much data.&lt;/li&gt;
&lt;li&gt;After a system is in production, fetch results can return huge
    result sets. Unlike developer testing where only a small subset of
    data is around.&lt;/li&gt;
&lt;li&gt;Limit your DB queries, e.g. SELECT * FROM table LIMIT 15 (the
    wildcard criteria would be substituted)&lt;/li&gt;
&lt;li&gt;Put limits into other application protocols such REST endpoints via
    paging or offsets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Circuit Breakers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Now and forever &lt;a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"&gt;networks will always be
    unreliable&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The timeout pattern prevents calls to integration points from
    becoming blocked threads.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/bliki/CircuitBreaker.html"&gt;Circuit
    Breakers&lt;/a&gt; area
    way of automatically degrading functionality when a system is under
    stress.&lt;/li&gt;
&lt;li&gt;Changes in a circuit breaker should always be logged and monitored.&lt;/li&gt;
&lt;li&gt;The frequency of state changes in a circuit breaker can help
    diagnose other problems with the system.&lt;/li&gt;
&lt;li&gt;When there is a problem with an integration point, stop calling it
    during a cool off period. The circuit breaker will enable this.&lt;/li&gt;
&lt;li&gt;Popping a circuit breaker always indicates a serious problem - log
    it.&lt;/li&gt;
&lt;/ul&gt;</content><category term="release-it-series"></category></entry><entry><title>Release It - Highlights Part 2</title><link href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-2.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-09-01:/2015/09/release-it-highlights-part-2.html</id><summary type="html">&lt;p&gt;This is the second part of my collection of notes and snippets from
&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-1.html"&gt;Part 1 - Shared Resources, Responses, SLA, Databases and Circuit
    Breakers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - Caches, Testing, HTML, Pre-Computation and Logging (Future
    Post)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Caches&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Low memory conditions are a threat to both stability and capacity.&lt;/li&gt;
&lt;li&gt;You need to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is the second part of my collection of notes and snippets from
&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-1.html"&gt;Part 1 - Shared Resources, Responses, SLA, Databases and Circuit
    Breakers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - Caches, Testing, HTML, Pre-Computation and Logging (Future
    Post)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Caches&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Low memory conditions are a threat to both stability and capacity.&lt;/li&gt;
&lt;li&gt;You need to ask whether the possible keys are infinite or finite and
    would the items ever need to change?&lt;/li&gt;
&lt;li&gt;The simplest cache clearing mechanism is time based.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/caching.html"&gt;Improper use of
    caching&lt;/a&gt; is the
    major cause of memory leaks, which turn into horrors like daily
    server restarts.&lt;/li&gt;
&lt;li&gt;Your system should run for at least the typical deployment cycle. If
    you deploy once every two weeks, it should be able to run for at
    least two weeks without restart.&lt;/li&gt;
&lt;li&gt;Limit the amount of memory a cache can use.&lt;/li&gt;
&lt;li&gt;Caches that do not limit memory will eventually eat all memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Testing&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Every integration point should have a test harness that can be
    substituted.&lt;/li&gt;
&lt;li&gt;Make your test harness act like a hacker - try large payloads,
    invalid characters, injection and so on.&lt;/li&gt;
&lt;li&gt;Have your test harness log requests so you can see what has caused
    problems.&lt;/li&gt;
&lt;li&gt;Run longevity tests - tests that put impulse and stress upon a
    system over long periods of time.&lt;/li&gt;
&lt;li&gt;Someone saying "&lt;em&gt;the odds of that happening is millions to one&lt;/em&gt;" is
    actually quite likely to happen. Given a average site, making
    thousands of requests a day this is an easy target to hit.&lt;/li&gt;
&lt;li&gt;Sessions are the Achilles heel of every application server.&lt;/li&gt;
&lt;li&gt;Most testing uses the app in the way it was expected to be use such
    as load testing a site using the correct workflow. What about load
    testing without using cookies? Would this spawn a new session each
    time?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;HTML&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Whitespace costs! In HTML (or the markup generated) remove all
    whitespace. It costs time to generate and money to send across the
    wire. You could argue this is for big traffic sites only, but this
    technique is very simple to apply as part of the build and speeds up
    client side rendering.&lt;/li&gt;
&lt;li&gt;Omit needless characters in HTML such as comments. Use server side
    commenting instead, this will be removed when processed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Pre-Computation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Precompute as much of the page as possible. Use "punch outs" for
    dynamic content. For example Slashdot generates its page once and
    serves to thousands of users. All users get the page equally as
    fast. Caching would mean handfuls of users would get a slow
    experience.&lt;/li&gt;
&lt;li&gt;Precomputed content should be deployed as part of the build. For
    more frequent updates another strategy or "content deploys" would be
    required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Logging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The human visual system is an excellent pattern matching machine.
    Make logs readable by using a custom format. Scanning logs is very
    easy then.&lt;/li&gt;
&lt;li&gt;Two line log files are difficult. Harder to grep. Keep everything on
    one line.&lt;/li&gt;
&lt;li&gt;Each week review the systems tickets. Try to identify and fix
    problems as you go. Try and predict future problems where possible
    based on this info.&lt;/li&gt;
&lt;li&gt;Check the logs daily for stack traces that are suspicious. These
    could be common errors that are bugs/problems that need fixing.&lt;/li&gt;
&lt;/ul&gt;</content><category term="release-it-series"></category></entry><entry><title>The Self Shunt - Test Doubles without a Framework</title><link href="https://blog.shaunfinglas.co.uk/2015/09/the-self-shunt-test-doubles-without.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-09-01:/2015/09/the-self-shunt-test-doubles-without.html</id><summary type="html">&lt;p&gt;Generally you should &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/why-i-dont-like-mocking-frameworks.html"&gt;favour hand crafted stubs without a framework by
default&lt;/a&gt;.
Before you reach for a framework there is another bridging step that you
can take only pulling in a framework if complexity arises - the Self
Shunt.&lt;/p&gt;
&lt;p&gt;Assume a simple &lt;em&gt;Hello World&lt;/em&gt; subject under test where we can provide …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Generally you should &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/why-i-dont-like-mocking-frameworks.html"&gt;favour hand crafted stubs without a framework by
default&lt;/a&gt;.
Before you reach for a framework there is another bridging step that you
can take only pulling in a framework if complexity arises - the Self
Shunt.&lt;/p&gt;
&lt;p&gt;Assume a simple &lt;em&gt;Hello World&lt;/em&gt; subject under test where we can provide
different formatters that format the message to a console, XML or JSON
for example. How do we test that the formatter is used, with the right
arguments?&lt;/p&gt;
&lt;p&gt;Enter the &lt;a href="http://www.objectmentor.com/resources/articles/SelfShunPtrn.pdf"&gt;Self Shunt
(pdf)&lt;/a&gt;.
Have the test fixture implement the interface aka assume the role of a
message formatter. It provides itself as a parameter to the greeter in
the form of &lt;code&gt;self/this&lt;/code&gt;. The greeter uses this implementation during its
execution, the test fixture can then assert or set state.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/698caab47b1428d0e303.js"&gt;&lt;/script&gt;

&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Quick and simple to get up and running.&lt;/li&gt;
&lt;li&gt;Most commands fall into the category of invoke something with some
    parameters, with little more complexity.&lt;/li&gt;
&lt;li&gt;Forces you to respect the Interface Segregation Principle, otherwise
    this technique can become painful. A framework usually masks this
    complexity.&lt;/li&gt;
&lt;li&gt;Code is inline to the test or fixtures.&lt;/li&gt;
&lt;li&gt;Exposes and explains how frameworks work conceptually to new
    developers - removing some of the &lt;em&gt;magic&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Self Shunt is my default approach for testing commands which are
usually local to test fixtures. Queries default to hand crafted stubs
which are usually shared amongst tests. If further tests need the same
configuration the shunt can be promoted to a full object that lives
independently of the test fixture. Finally if this starts to become
difficult to work with I would reach for a framework - commands usually
reach this point first.&lt;/p&gt;</content><category term="testing"></category><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Types of Test Doubles</title><link href="https://blog.shaunfinglas.co.uk/2015/09/types-of-test-doubles.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-09-01:/2015/09/types-of-test-doubles.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Mock&lt;/em&gt; is an overloaded term in software development. Sadly this leads
to developers answering with "&lt;em&gt;mock it&lt;/em&gt;" when a mock object may not be
the right solution. &lt;a href="http://xunitpatterns.com/Test%20Double.html"&gt;Test
Doubles&lt;/a&gt; are a more general
term. I should try to use this naming more than I do at present - a goal
I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Mock&lt;/em&gt; is an overloaded term in software development. Sadly this leads
to developers answering with "&lt;em&gt;mock it&lt;/em&gt;" when a mock object may not be
the right solution. &lt;a href="http://xunitpatterns.com/Test%20Double.html"&gt;Test
Doubles&lt;/a&gt; are a more general
term. I should try to use this naming more than I do at present - a goal
I aim to work towards. The result of choosing the wrong test double may
seem innocent but the effect will be a very different style of test
method, with increased coupling to implementation details. The following
definitions are ordered in terms of complexity and increased coupling.&lt;/p&gt;
&lt;h4&gt;Stubs&lt;/h4&gt;
&lt;p&gt;Provide canned responses. By their nature stubs would respond to
queries. Stubs allow you to test paths of the code that would be
otherwise difficult as they always provide the same answer.&lt;/p&gt;
&lt;h4&gt;Spies&lt;/h4&gt;
&lt;p&gt;Similar to a stub but with the addition that a spy records its actions.
When responding to a query or a command the spy keeps track of what
happened, how often and anything else relevant. The test can then
inspect the spy for the answer, deciding whether to pass or fail. Unlike
Mocks, spies play well with the Arrange-Act-Assert pattern. Spies let
you answer the question &lt;em&gt;has something happened&lt;/em&gt; whereas Mocks tend to
lead you towards &lt;em&gt;how has something happened&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Fakes&lt;/h4&gt;
&lt;p&gt;Fake objects tend to be used in higher level tests. These are fake
implementations of the object they are standing in for. A fake
repository would be implemented in a simple manner, instead opting for a
simple in memory hash table for its implementation. This allows tests to
be run with some confidence that the system will behave as expected.
Combined with &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;Contract
Tests&lt;/a&gt;,
fakes can turbo charge the speed of your test execution while still
providing confidence.&lt;/p&gt;
&lt;h4&gt;Mocks&lt;/h4&gt;
&lt;p&gt;Similar to spies mocks are primarily in charge with recording what
happens. However while spies are silent in their nature relying on the
test to interrogate them, mocks differ by throwing exceptions if their
expectations are not met. Mocks natural partner is commands. Unlike
spies Mocks can struggle to fit into the Arrange-Act-Assert pattern. Of
all the test doubles Mocks are the most coupled to implementation
details so their use should be limited.&lt;/p&gt;</content><category term="testing"></category><category term="unit-testing"></category></entry><entry><title>Waste: Write Less Code</title><link href="https://blog.shaunfinglas.co.uk/2015/09/waste-write-less-code.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-09-01:/2015/09/waste-write-less-code.html</id><summary type="html">&lt;p&gt;One of the biggest &lt;a href="https://en.wikipedia.org/wiki/Lean_manufacturing#Types_of_waste"&gt;forms of
waste&lt;/a&gt;
is code. &lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley-ebook/dp/B00HNB3VQE"&gt;An estimated 80% of features in a software project are never
or rarely
used&lt;/a&gt;.
This makes code the software development equivalent of inventory. Having
a warehouse full of inventory is not a benefit, neither is having a
repository full of code …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the biggest &lt;a href="https://en.wikipedia.org/wiki/Lean_manufacturing#Types_of_waste"&gt;forms of
waste&lt;/a&gt;
is code. &lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley-ebook/dp/B00HNB3VQE"&gt;An estimated 80% of features in a software project are never
or rarely
used&lt;/a&gt;.
This makes code the software development equivalent of inventory. Having
a warehouse full of inventory is not a benefit, neither is having a
repository full of code.&lt;/p&gt;
&lt;h4&gt;How to Have Less Code?&lt;/h4&gt;
&lt;h5&gt;Delete it!&lt;/h5&gt;
&lt;p&gt;As much as you can within reason of course, tests must pass and features
must still work. Deleting feels great when you can successfully remove
some legacy code. You'll be surprised at what can be removed. Commented
out code, unused classes and methods are the obvious first candidates.&lt;/p&gt;
&lt;h5&gt;Say &lt;em&gt;No&lt;/em&gt; To Features by Default&lt;/h5&gt;
&lt;p&gt;Only add them if the benefit outweighs planning, designing, development,
testing and maintenance costs combined. Even then, do you really need
it? The advice here is &lt;a href="http://www.amazon.com/ReWork-Change-Way-Work-Forever-ebook/dp/B003ELY7PG/"&gt;do not listen to your customers regarding which
features to
add&lt;/a&gt;,
instead listen to their problems.&lt;/p&gt;
&lt;h5&gt;Libraries/Frameworks&lt;/h5&gt;
&lt;p&gt;Try and see if a library or framework can handle your use case. They may
not be a perfect fit, but if isolated correctly the use of third party
code can mean a massive reduction in code you need to write. You still
need to maintain and configure third party code however.&lt;/p&gt;
&lt;h4&gt;Benefits of Less Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Quicker to compile/parse.&lt;/li&gt;
&lt;li&gt;Tests run quicker.&lt;/li&gt;
&lt;li&gt;Easier on-boarding - less to understand and familiarise with.&lt;/li&gt;
&lt;li&gt;Less chance of bugs - more code is more likely to have bugs.&lt;/li&gt;
&lt;li&gt;Potential performance related problems should be reduced.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember - code is a liability. The job of software developer is not to
write code, it is to solve problems. Sometimes this takes thousands of
lines of code, other times it can take a simple conversation.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Loops vs Functional Programming Styles</title><link href="https://blog.shaunfinglas.co.uk/2015/08/loops-vs-functional-programming-styles.html" rel="alternate"></link><published>2015-08-01T00:00:00+02:00</published><updated>2015-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-08-01:/2015/08/loops-vs-functional-programming-styles.html</id><summary type="html">&lt;p&gt;The following examples are four of the most common functional
programming patterns that appear in mainstream languages though they may
be known under different names.&lt;/p&gt;
&lt;p&gt;Being a &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;fan of CQS and
CQRS&lt;/a&gt;,
queries work great when coding using the functional style. While this is
completely subjective in terms of style …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The following examples are four of the most common functional
programming patterns that appear in mainstream languages though they may
be known under different names.&lt;/p&gt;
&lt;p&gt;Being a &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;fan of CQS and
CQRS&lt;/a&gt;,
queries work great when coding using the functional style. While this is
completely subjective in terms of style there is another benefit -
composition. In other words the functional styles below can all be
joined together with minimal changes. A traditional loop would require
additional modifications. The benefit composition provides is similar to
the &lt;a href="http://www.enterpriseintegrationpatterns.com/PipesAndFilters.html"&gt;pipes and filter
architecture&lt;/a&gt;
- it is very easy to change the behaviour of the pipeline by simply
adding or removing statements.&lt;/p&gt;
&lt;p&gt;Composition and concise code aside, traditional loops should not be
avoided fully. Each scenario will have different solutions. Sometimes
you really just want a standard loop.&lt;/p&gt;
&lt;p&gt;The benefit of learning the key concepts behind &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;,
&lt;code&gt;ForEach&lt;/code&gt; and &lt;code&gt;Reduce&lt;/code&gt; is the ability to translate these styles and
idioms into other languages that may have the same functionality just
behind a different interface.&lt;/p&gt;
&lt;h4&gt;Map&lt;/h4&gt;
&lt;p&gt;Also known as Projection. Convert the array into a new array based on
the callback provided.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/76da9beecc3f482daf20.js"&gt;&lt;/script&gt;

&lt;h4&gt;Filter&lt;/h4&gt;
&lt;p&gt;Filter the array based on the callback if the result is true. In the
same manner as Map, the non functional version of this code is an
extremely common pattern so the functional version really shines here.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/1347cd4e6b5fb318429c.js"&gt;&lt;/script&gt;

&lt;h4&gt;ForEach&lt;/h4&gt;
&lt;p&gt;Invokes the callback for each member of the array. This is another very
common pattern that really benefits from the functional form.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/cd49450677bd2583dffe.js"&gt;&lt;/script&gt;

&lt;h4&gt;Reduce&lt;/h4&gt;
&lt;p&gt;Converts the array into a single value by taking the current index and
the next index as parameters to be applied.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/41ebbc74a83232227db8.js"&gt;&lt;/script&gt;</content><category term="javascript"></category><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Production Code is Dirty</title><link href="https://blog.shaunfinglas.co.uk/2015/08/production-code-is-dirty.html" rel="alternate"></link><published>2015-08-01T00:00:00+02:00</published><updated>2015-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-08-01:/2015/08/production-code-is-dirty.html</id><summary type="html">&lt;p&gt;Production code is dirty. &lt;em&gt;Dirty&lt;/em&gt; may be the wrong word however. Complex
could be more suitable. Unlike code that is not yet in production, it is
weathered, proven, and full of edge cases including numerous bug fixes.
After some time this build up of additions can cause the code to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Production code is dirty. &lt;em&gt;Dirty&lt;/em&gt; may be the wrong word however. Complex
could be more suitable. Unlike code that is not yet in production, it is
weathered, proven, and full of edge cases including numerous bug fixes.
After some time this build up of additions can cause the code to be
considered dirty or legacy.&lt;/p&gt;
&lt;p&gt;Greenfield development used to appeal so much more. Small classes. Small
methods. Few dependencies. Just simple, clean code. Except this is not
the case. Get into production and that clean code starts to weather.
You'll handle edge cases, fix bugs and stabilize the functionality. That
lovely, small, well factored application starts to accumulate dirt. The
new code smell wears off and you're back waiting for the next new
project so you can do it properly a second time around.&lt;/p&gt;
&lt;p&gt;This does not have to be the case however. Long living software such as
operating systems, browsers and embedded systems are maintained and
extended well after they were created. Production code can be
complicated but still clean with redeemable qualities. In order to do
this you should write tests, &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;control
dependencies&lt;/a&gt;
and get into production or the hands of the user as soon as possible.
This may seem an obvious solution but sadly many software projects fall
into this trap of dirty code after a handful of iterations.&lt;/p&gt;</content><category term="retro"></category><category term="code-quality"></category></entry><entry><title>Queue Centric Work Pattern</title><link href="https://blog.shaunfinglas.co.uk/2015/08/queue-centric-work-pattern.html" rel="alternate"></link><published>2015-08-01T00:00:00+02:00</published><updated>2015-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-08-01:/2015/08/queue-centric-work-pattern.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern"&gt;Queue Centric Work Pattern
(QCWP)&lt;/a&gt;
is simple. Send a message declaring the intent of the command,
acknowledge the message and proceed. All work takes place in a
background process so the user is not kept waiting for the request to
return. Acknowledgement usually takes the form of persistence to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern"&gt;Queue Centric Work Pattern
(QCWP)&lt;/a&gt;
is simple. Send a message declaring the intent of the command,
acknowledge the message and proceed. All work takes place in a
background process so the user is not kept waiting for the request to
return. Acknowledgement usually takes the form of persistence to ensure
that no messages are lost. Real life examples of the QCWP in action
would be the sending of an email or the confirmation of an order being
accepted from an online retailer.&lt;/p&gt;
&lt;p&gt;The QCWP will introduce the concept of &lt;a href="https://en.wikipedia.org/wiki/Eventual_consistency"&gt;eventual
consistency&lt;/a&gt;, which
surprisingly is not an issue in most cases. The queue itself should be
implemented via some form of message queue that handles some of the more
complicated technical issues regarding message meta data, routing,
persistence and so on. Once a message queue has been chosen the code
required to implement QCWP does not differ to far from simple
request-response examples in terms of both complexity and lines of code.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;h5&gt;Reduced Latency&lt;/h5&gt;
&lt;p&gt;Transferring the message, confirming acknowledgement and returning to
user with some form of confirmation can be very quick. If the process is
long running, it can be vastly quicker to use the QCWP. Even for low
latency scenarios, the use of the QCWP introduces other benefits.&lt;/p&gt;
&lt;h5&gt;Retry&lt;/h5&gt;
&lt;p&gt;If something fails you can retry the command in a background process.
Nothing is lost when one or more systems are down. If the command fails
consistently, then you can simply notify the user or perform some other
compensating action.&lt;/p&gt;
&lt;h5&gt;Decoupled&lt;/h5&gt;
&lt;p&gt;If one system is offline the message is just stored and the queue builds
up. Once back online the queue will be emptied. The temporal coupling
between the two systems is now removed. Coupling has been reduced so
much that you can switch consumer with another system and the client
would be unaware as long as the message formats remain the same. This
allows different languages to read and populate the queues.&lt;/p&gt;
&lt;h5&gt;Scaling&lt;/h5&gt;
&lt;p&gt;To increase throughput you can simple introduce a competing consumer
until the appropriate amount of messages is handled within a SLA
boundary. The inverse is also true. The QCWP allows throttling. Rather
than peak load from web server traffic hitting the back end services,
these can be scaled independently. As the consumer of the messages will
handle each message at its own pace, there is no chance that other
dependencies such as databases would become overwhelmed.&lt;/p&gt;
&lt;h4&gt;Downsides&lt;/h4&gt;
&lt;p&gt;These benefits don't come for free however. The main issue with the QCWP
is the time it takes to get to grips with this change of conceptual
model. Testing asynchronous code is a lot harder, introducing problems
such as polling shared resources for changes. The very same issue means
simply debugging asynchronous systems can be challenging even with good
monitoring and auditing in place.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;QCWP was a real change in terms of how I think about two services
communicating. This change in pattern is not hard, merely different.
Once you adjust to the challenges, the benefits enable some truly
resilient systems when communication must occur out of process.&lt;/p&gt;</content><category term="microservices"></category><category term="distributed-systems"></category><category term="SOA"></category></entry><entry><title>Why I Don't Like Mocking Frameworks</title><link href="https://blog.shaunfinglas.co.uk/2015/08/why-i-dont-like-mocking-frameworks.html" rel="alternate"></link><published>2015-08-01T00:00:00+02:00</published><updated>2015-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-08-01:/2015/08/why-i-dont-like-mocking-frameworks.html</id><summary type="html">&lt;p&gt;Disclaimer: By &lt;em&gt;mocking&lt;/em&gt; framework I generalize anything that includes
support for stubs and mock objects.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The use of mocking frameworks was a difficult part of my TDD journey.
Not only are newcomers expected to get their head around the basics of
the practice there are now new tools to contend …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Disclaimer: By &lt;em&gt;mocking&lt;/em&gt; framework I generalize anything that includes
support for stubs and mock objects.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The use of mocking frameworks was a difficult part of my TDD journey.
Not only are newcomers expected to get their head around the basics of
the practice there are now new tools to contend with. To make matters
worse there is a lot of mocking frameworks out there with differing
quality qualities and suitability.&lt;/p&gt;
&lt;p&gt;The use of mocking frameworks includes a variety of disadvantages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Readability suffers in most cases. You often find yourself asking
    &lt;em&gt;what is exactly happening here?&lt;/em&gt; The frameworks themselves usually
    impose these constraints and make the issue worse.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ploeh.dk/2010/12/02/Interfacesarenotabstractions/"&gt;The use of frameworks tends to lead to header interfaces and not
    role interfaces being
    used&lt;/a&gt;.
    IDE's usually have a factor in this as they make this anti pattern
    so very easy to introduce.&lt;/li&gt;
&lt;li&gt;A lot of developers are not aware of what these frameworks are doing
    behind the scenes. This can lead to confusing tests and a general
    lack of understanding.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;My preference is to use hand crafted test doubles. While these are
looked down upon by some, they offer numerous benefits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/6674671"&gt;Stubs and Fakes are easier to
    understand&lt;/a&gt;, write and maintain
    when hand crafted.&lt;/li&gt;
&lt;li&gt;Manual test doubles read easier. The key benefit here being able to
    name implementations after their use and function.&lt;/li&gt;
&lt;li&gt;Hand crafted test doubles promote reuse. It is likely that such
    doubles will be used across numerous tests. Once created code
    duplication actually reduces.&lt;/li&gt;
&lt;li&gt;Hand crafted test doubles are a &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;prerequisite to enable contract
    testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The actual implementation of these hand crafted doubles is minimal. In
most cases simply providing the arguments as constructor or method
parameters works. For more complicated scenarios &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/dry-vs-damp-in-tests.html"&gt;DAMP
tests&lt;/a&gt;
can be used.&lt;/p&gt;
&lt;p&gt;One area where frameworks provide a benefit is that of mock objects. In
non trivial examples the requirements to verify numerous parameters and
configurations can be verbose to hand craft. However there are
alternatives to hand crafted test doubles such as the self shunt pattern
which will be expanded upon in a future post.&lt;/p&gt;</content><category term="tdd"></category><category term="unit-testing"></category></entry><entry><title>DRY vs Coupling in Production Code</title><link href="https://blog.shaunfinglas.co.uk/2015/06/dry-vs-coupling-in-production-code.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-07-01:/2015/06/dry-vs-coupling-in-production-code.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;Duplication in tests can be a good
thing&lt;/a&gt;.
The same can be said for production code as well in some cases. No. I'm
not going mad. I probably wouldn't believe this if you showed me this
several years ago either. More experience has shown me that loose
coupling is often …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;Duplication in tests can be a good
thing&lt;/a&gt;.
The same can be said for production code as well in some cases. No. I'm
not going mad. I probably wouldn't believe this if you showed me this
several years ago either. More experience has shown me that loose
coupling is often more desirable than removing duplication. In other
words, the more duplication you remove, the more coupling you introduce
inadvertently.&lt;/p&gt;
&lt;p&gt;Duplication of logic is bad and will always be the case. I am not
debating this. You should only have one logical place for any domain
logic. As always follow the DRY principle. However just because two
pieces of code look the same, does not mean there is duplication.&lt;/p&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;p&gt;A system from my past had two places where an address was required for
display and serialization. Billing and Delivery addresses.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/d8d327e65dc0620cb372.js"&gt;&lt;/script&gt;

&lt;p&gt;My gut reaction was to introduce a common address model that could be
used for serialization and display. After all this screams of
duplication. However a billing address and delivery address are two
conceptually different things despite appearing identical.&lt;/p&gt;
&lt;p&gt;Given time the needs of the billing functionality may very well differ
from the needs of the delivery domain. Duplication of models/contracts
is weak duplication. There is no logic here.&lt;/p&gt;
&lt;p&gt;In DDD each bounded context will have different needs. As it turned out
the Billing Address began to have specific billing related functionality
added such as "IsDefaultAddress" and "IsSameAsDelivery". At this point
the two models are very different. This was a problem.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/f5606f1f8a68f7caef78.js"&gt;&lt;/script&gt;

&lt;p&gt;Sharing via a common library would have removed the total lines of code
but increase the number of dependencies. The Address is now coupled to a
single form meaning updates and new requirements are harder. Versioning
and packaging are now a concern. Any updates would need to be
coordinated across teams. Udi Dahan has warned about this previously in
what is summarized as "&lt;a href="http://programmer.97things.oreilly.com/wiki/index.php/Beware_the_Share"&gt;Beware the
Share&lt;/a&gt;".&lt;/p&gt;
&lt;h5&gt;Inheritance?&lt;/h5&gt;
&lt;p&gt;This example makes inheritance look like a good fit. While the use of
inheritance when applied correctly is not a bad thing, this scenario is
not appropriate. Inheritance is one of the strongest forms of coupling.
Applying inheritance across a type that we don't own is risky for the
reasons detailed previously. Now change is not only harder, it would
potentially be a breaking change. How would we model a delivery address
with multiple addresses? Why should both the billing and delivery domain
use the same terminology for its fields? If we accept that both
addresses are conceptually different despite looking identical at
present, we can side step these issues.&lt;/p&gt;
&lt;h5&gt;What to Share?&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Domain types should be shared. Using the previous example a
    PostalCode would make a good type to share. The functionality here
    is identical regardless of the type of address. PostalCode would
    likely have logic associated with the type which would not make
    sense to duplicate or implement in each sub system.&lt;/li&gt;
&lt;li&gt;Shared functionality that must be consistent makes a good candidate
    also. Examples such as UI widgets including headers and footers.&lt;/li&gt;
&lt;li&gt;Crossing cutting concerns such as logging, security and
    configuration can be shared when appropriate. A downside to this is
    you now force your consumers to take specific dependency versions
    which may or may not be acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Shared Kernel&lt;/h5&gt;
&lt;p&gt;DDD has the concept of a Shared Kernel. The dictionary definition of a
kernel is "&lt;em&gt;the central or most important part of something&lt;/em&gt;". Shared
Kernel's make sense to share the common functionality previously. The
name "common" is poorly thought out however. Most codebases will have a
common or utility library but by there very nature these will grow into
large components.&lt;/p&gt;
&lt;p&gt;The reason for this growth is everything is common across applications.
All applications need some sort of data access, so stick it in the
common library. All applications need some sort of serialization
mechanisms, so stick it in the common library. All applications need
some sort of web technology, so stick it in the common library. You
should be able to see where this is going.&lt;/p&gt;
&lt;h5&gt;Conclusion&lt;/h5&gt;
&lt;p&gt;As always when dealing with duplication apply the &lt;a href="http://c2.com/cgi/wiki?RuleOfThree"&gt;Rule of
Three&lt;/a&gt; where appropriate. If you
really must create a shared component, a small, concise library is
better than a library that handles multiple concerns. This will allow
consumers to adopt a "&lt;em&gt;plug 'n play&lt;/em&gt;" approach with which components
they require. Even then, try to fight removing duplication unless you
can be really sure there is a good reason to increase coupling. That
reuse you are striving for might not even come to fruition.&lt;/p&gt;</content><category term="tutorial"></category><category term="programming"></category></entry><entry><title>Integration Tests</title><link href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-07-01:/2015/07/integration-tests.html</id><summary type="html">&lt;p&gt;It is well documented you need a balance between different categories of
automated tests. The split is usually in the form.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;70% unit&lt;/li&gt;
&lt;li&gt;20% integration&lt;/li&gt;
&lt;li&gt;10% acceptance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While unit tests make up the majority of tests, there is a limit to
their effectiveness. As soon as you leave the system …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is well documented you need a balance between different categories of
automated tests. The split is usually in the form.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;70% unit&lt;/li&gt;
&lt;li&gt;20% integration&lt;/li&gt;
&lt;li&gt;10% acceptance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While unit tests make up the majority of tests, there is a limit to
their effectiveness. As soon as you leave the system boundary you need
integration tests. Examples of when integration tests are required is
code that interacts with databases, web services or the file system.&lt;/p&gt;
&lt;p&gt;These integration tests should not test logic, this is a mistake. They
will become brittle and slow to execute otherwise. Instead of checking
domain logic, test at a lower level. Go as low as you can without
leaking implementation details of the subject under test. By going as
low as possible you will radically reduce the number of integration
tests required. Less tests means easier maintenance. Less tests also
means faster tests.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Assuming a SQL database, invoke the repository and test as lightly as
possible. Do not indirectly test this repository by invoking the code
higher levels in the stack. Avoid concerning yourself with what is
happening behind the scenes. Simply test that you can insert a record,
and retrieve the newly inserted record. Any other code that is involved
at higher levels can suffice at a unit level.&lt;/p&gt;
&lt;p&gt;Assertions should be loose enough to verify that the code is working,
but not asserting basic correctness. In other words prefer assertions
that check for the presence of results, rather than what those results
look like. If the value is of concern, convert into a fast, isolated
unit test.&lt;/p&gt;
&lt;h4&gt;Integration Tests are a Scam&lt;/h4&gt;
&lt;p&gt;The term &lt;em&gt;Integrated Tests&lt;/em&gt; is my preference given that &lt;a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/"&gt;integration
tests are a
scam&lt;/a&gt;.
This slight change in terminology helps keep these tests focused. Rather
than spiraling out of control, they are small in number and simply
verify that "&lt;em&gt;something is working&lt;/em&gt;". This is done by pushing all tests
of logic to the unit level.&lt;/p&gt;
&lt;p&gt;The key point here is that integration tests are required. Strongly
resist the urge to write all tests at the integrated level. Likewise do
not fall into the trap that thinking all tests must be done at the unit
level. The key here is balance.&lt;/p&gt;
&lt;p&gt;There is a fatal flaw with integration tests however. They can be wrong.
Given tests at a unit level will stub out anything that is out of
process, how do you stop such tests falling out of sync with the real
implementation? This is where &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;Contract
Tests&lt;/a&gt;
come into play.&lt;/p&gt;</content><category term="testing"></category><category term="unit-testing"></category></entry><entry><title>Static Code</title><link href="https://blog.shaunfinglas.co.uk/2015/07/static-code.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-07-01:/2015/07/static-code.html</id><summary type="html">&lt;p&gt;Static code is considered a bad thing by developers. This is especially
true when working with legacy code. The use of static code is often seen
as a smell and should not be used.&lt;/p&gt;
&lt;p&gt;This is not as black and white as it first seems. Static code can be
problematic …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Static code is considered a bad thing by developers. This is especially
true when working with legacy code. The use of static code is often seen
as a smell and should not be used.&lt;/p&gt;
&lt;p&gt;This is not as black and white as it first seems. Static code can be
problematic when global state is involved. Not only is it hard to
change, static code is very hard to test in an automated fashion. Bad
examples of static code include persistence, third party services, and
out of process calls. These examples should avoid static code where
possible.&lt;/p&gt;
&lt;p&gt;One guideline that served me very well in my early days of TDD was
treating &lt;a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/"&gt;static code as a death to
testability&lt;/a&gt;.
Unfortunately some developers don't move on from this guideline and
treat any use of static code as bad.&lt;/p&gt;
&lt;p&gt;In fact static code can have a benefit. If a method within a class can
be promoted to a public static method (PSM) it shows that the code is
stateless. This allows the "extract class" refactoring to be performed.
Without a PSM such refactoring is much more difficult. IDEs can automate
this step and if in a dynamic language you can simply lean on the
runtime to catch issues.&lt;/p&gt;
&lt;p&gt;The steps to perform this refactor are easy. If at any stage this is not
possible the method contains state.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the method public.&lt;/li&gt;
&lt;li&gt;Make the method static.&lt;/li&gt;
&lt;li&gt;Move the public static method to the new class.&lt;/li&gt;
&lt;li&gt;Update usage of the previous calls.&lt;/li&gt;
&lt;li&gt;Optionally remove the static modifier and update previous call
    sites.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the code cannot be promoted to a PSM then state exists. Increasingly
the code I write leads itself to a functional paradigm despite not be
written in a strictly functional language. Small, focused classes that
tend to be immutable. The use of PSM makes transition to this style of
code easy. There is no reason to avoid the use of static code as an
intermediate step to get to this position.&lt;/p&gt;</content><category term="programming"></category><category term="code-quality"></category></entry><entry><title>The Benefits of Contract Testing</title><link href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-07-01:/2015/07/the-benefits-of-contract-testing.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;I previously claimed that you need some integrated tests but as few as
possible&lt;/a&gt;.
There are huge benefits to this approach, but there is a problem. How do
you stop your test doubles falling out of line with the real
implementations? The answer is to use Contract Tests.&lt;/p&gt;
&lt;h4&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Create …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;I previously claimed that you need some integrated tests but as few as
possible&lt;/a&gt;.
There are huge benefits to this approach, but there is a problem. How do
you stop your test doubles falling out of line with the real
implementations? The answer is to use Contract Tests.&lt;/p&gt;
&lt;h4&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Create a base test fixture, this is where your tests live. All
    assertions belong here.&lt;/li&gt;
&lt;li&gt;Subclass this base class with each implementation.&lt;/li&gt;
&lt;li&gt;Override each setup step to provide the implementation that is to be
    tested.&lt;/li&gt;
&lt;li&gt;All tests should pass for each instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;In this example there is a SQL repository and an in memory repository.
It is not possible to change either in any manner that causes them to
behave differently. We can safely use the in memory repository for
tests, with confidence that the test double matches the contract of the
real implementation.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/63a042dd2a20487410ab.js"&gt;&lt;/script&gt;

&lt;p&gt;The test double implementations can be executed on every test run. While
real implementations can be relegated to execution prior to commit or
during continuous integration. This trade off allows for fast feedback
cycles while ensuring all tests are run against production like
implementations.&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.thecodewhisperer.com/2009/10/08/who-tests-the-contract-tests/"&gt;Contract
    Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arlobelshee/ArsEditorExample/blob/master/SimulatableApi.Tests/FileSystemCanLocateFilesAndDirs.cs"&gt;No Mocks
    Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="testing"></category><category term="contracts"></category><category term="unit-testing"></category></entry><entry><title>You Still Need Manual Tests</title><link href="https://blog.shaunfinglas.co.uk/2015/07/you-still-need-manual-tests.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-07-01:/2015/07/you-still-need-manual-tests.html</id><summary type="html">&lt;p&gt;This blog has numerous examples of why unit,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;integration&lt;/a&gt;and
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;contract&lt;/a&gt;testing
is essential. However you still need manual tests. It is foolish to
believe that all testing can be covered by automated tests despite the
bias in this area.&lt;/p&gt;
&lt;h4&gt;Why?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Manual tests can catch anything you may have missed …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This blog has numerous examples of why unit,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;integration&lt;/a&gt;and
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;contract&lt;/a&gt;testing
is essential. However you still need manual tests. It is foolish to
believe that all testing can be covered by automated tests despite the
bias in this area.&lt;/p&gt;
&lt;h4&gt;Why?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Manual tests can catch anything you may have missed at an automation
    level.&lt;/li&gt;
&lt;li&gt;Manual tests can be unique. Use exploratory testing to try
    &lt;em&gt;different&lt;/em&gt; scenarios.&lt;/li&gt;
&lt;li&gt;Manual tests that fail become automated tests, so they can never
    regress.&lt;/li&gt;
&lt;li&gt;Manual tests exercise the full stack. Many areas such as DI
    conventions, logging, and other framework related configuration are
    better suited to manual verification.&lt;/li&gt;
&lt;li&gt;UI changes require visual verification - automation is near
    impossible here.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;More Than Just Functionality&lt;/h4&gt;
&lt;p&gt;Over the years, manual testing has caught numerous bugs, issues or
things I've just plain missed. When you are deep in a problem it can be
hard to see the wood for the tress. A second party manually testing
provides an unbiased check of your code for a second time.&lt;/p&gt;
&lt;p&gt;The key with manual tests is to ensure any issue is converted into an
automated test. This offsets the fact that manual testing is expensive
both in terms of time and cost. By doing so any regressions will be
prevented.&lt;/p&gt;
&lt;p&gt;QA includes more than functional testing. Security, performance and
usability to name a few are equally important. Do not avoid the manual
test step. Automated tests are only as good as the tests themselves.
Embrace manual and automated testing for the best of both worlds.&lt;/p&gt;</content><category term="acceptance-testing"></category><category term="unit-testing"></category></entry><entry><title>Branch by Abstraction</title><link href="https://blog.shaunfinglas.co.uk/2015/06/branch-by-abstraction.html" rel="alternate"></link><published>2015-06-01T00:00:00+02:00</published><updated>2015-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-06-01:/2015/06/branch-by-abstraction.html</id><summary type="html">&lt;p&gt;Feature toggles are great for new features or features that are either
enabled or disabled. Branch by Abstraction offers the &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;same benefits as
feature
toggles&lt;/a&gt;
but the seam to introduce the change is the abstraction itself. Unlike
Feature Toggles, the use of Branch by Abstraction allows a gradual
transition to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Feature toggles are great for new features or features that are either
enabled or disabled. Branch by Abstraction offers the &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;same benefits as
feature
toggles&lt;/a&gt;
but the seam to introduce the change is the abstraction itself. Unlike
Feature Toggles, the use of Branch by Abstraction allows a gradual
transition to new functionality.&lt;/p&gt;
&lt;p&gt;Start by duplicating the type or implementing a new version of the
abstraction. The work in progress changes can be made safely while the
system is using the original implementations. In order to demonstrate
the new functionality, rely on automated tests or wire up the new
version. Once fully integrated and tested, simply remove the old
implementation. The addition or removal of implementations acts as the
toggle in this case.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/779dc06ff19e7e842ff6.js"&gt;&lt;/script&gt;

&lt;p&gt;To extend the &lt;code&gt;SimpleReceiptWriter&lt;/code&gt; a new version is made. This work in
progress implementation has no limit on the time to complete. The new
implementation will only take effect once configured.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/bfe505e8f7946fa9b2fc.js"&gt;&lt;/script&gt;

&lt;p&gt;Configuration takes the form of composition root or dependency injection
container changes. Given your code does not know the concrete
implementation (apart from tests) you should be fine to make these
switches.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;If no abstraction exists you can introduce one if
valid&lt;/a&gt;. If no
valid abstraction exists you can simply fallback to feature toggles.&lt;/p&gt;
&lt;p&gt;Branch by Abstraction plays nicely with &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;Walking
Skeletons&lt;/a&gt;.
Your first implementation will most likely be a simple first pass
attempt. Overtime these can be replaced with more fleshed out versions.&lt;/p&gt;
&lt;p&gt;Anytime you feel the need to create a branch in source, Branch by
Abstraction can be a valid alternate in most cases. &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;UI changes are
better suited as Feature
Toggles&lt;/a&gt;
due to the nature of the code.&lt;/p&gt;</content><category term="tutorial"></category><category term="programming"></category></entry><entry><title>Do you really need a Microservice?</title><link href="https://blog.shaunfinglas.co.uk/2015/06/do-you-really-need-microservice.html" rel="alternate"></link><published>2015-06-01T00:00:00+02:00</published><updated>2015-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-06-01:/2015/06/do-you-really-need-microservice.html</id><summary type="html">&lt;p&gt;Lately there has been two sets of advice around the use of
Microservices. &lt;a href="http://martinfowler.com/bliki/MonolithFirst.html"&gt;Some advise that Microservices should be built after the
fact&lt;/a&gt;. &lt;a href="http://www.martinfowler.com/articles/dont-start-monolith.html"&gt;Others advise
the opposite
solution&lt;/a&gt;.
In conjunction there is a third option that deserves more attention. Do
you even need a Microservice at all? A &lt;a href="https://twitter.com/natpryce/status/593763168977088513"&gt;recent
tweet …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately there has been two sets of advice around the use of
Microservices. &lt;a href="http://martinfowler.com/bliki/MonolithFirst.html"&gt;Some advise that Microservices should be built after the
fact&lt;/a&gt;. &lt;a href="http://www.martinfowler.com/articles/dont-start-monolith.html"&gt;Others advise
the opposite
solution&lt;/a&gt;.
In conjunction there is a third option that deserves more attention. Do
you even need a Microservice at all? A &lt;a href="https://twitter.com/natpryce/status/593763168977088513"&gt;recent
tweet&lt;/a&gt; sparked
off the exact thought I have found myself conveying.&lt;/p&gt;
&lt;p&gt;Creating a Microservice is no easy feat. Despite the limited code or
functionality that is involved. There is a whole host of things that
need consideration; source control, project setup, databases, project
conventions, monitoring, logging, deployment, hosting and security to
name a few.&lt;/p&gt;
&lt;p&gt;The so called monolith or "application" as it was known before is a
tried and tested way of structuring applications. One of the big
criticisms levelled against monolithic applications is coupling. Having
worked with some terribly coupled applications I agree fully with this
complaint, but there are steps you can take to prevent this.&lt;/p&gt;
&lt;p&gt;A whole application does not need to live inside one logical project,
but instead can be split appropriately. In DDD a Bounded Context makes
sense. Using this model you would end up with a Customer and Products
project rather than a single project containing both.&lt;/p&gt;
&lt;p&gt;An easy step is the &lt;a href="https://blog.shaunfinglas.co.uk/2014/07/i-need-to-stop-misusing-namespaces.html"&gt;correct use of namespaces that are structured by
features rather than technology
choices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Education is also important, simply put in agreements across teams such
as "&lt;em&gt;nothing from the customer project will directly reference the
products functionality&lt;/em&gt;". This can be taken a step further by
introducing assertions into the build process that will fail if
"&lt;em&gt;project A references project B&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;There is no correct answer on whether you should or should not start
with a Microservice architecture. Each team will need to judge and base
their answer on their needs which will most likely vary over time. As it
has been said before - &lt;a href="http://www.codingthearchitecture.com/2014/07/06/distributed_big_balls_of_mud.html"&gt;if you can't structure a monolith what makes you
think you can structure Microservices any
better?&lt;/a&gt;&lt;/p&gt;</content><category term="microservices"></category><category term="retro"></category></entry><entry><title>Feature Toggles</title><link href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html" rel="alternate"></link><published>2015-06-01T00:00:00+02:00</published><updated>2015-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-06-01:/2015/06/feature-toggles.html</id><summary type="html">&lt;p&gt;I'm a fan of regular releasing. My background and experience leads me to
release as regularly as possible. There are numerous benefits to regular
releases; limited risk, slicker release processes and the ability to
change as requirements evolve.&lt;/p&gt;
&lt;p&gt;The problem with this concept is how can you release when features …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm a fan of regular releasing. My background and experience leads me to
release as regularly as possible. There are numerous benefits to regular
releases; limited risk, slicker release processes and the ability to
change as requirements evolve.&lt;/p&gt;
&lt;p&gt;The problem with this concept is how can you release when features are
not functionally complete?&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;If there is still work in progress, one solution to allow frequent
releases is to use &lt;a href="http://martinfowler.com/bliki/FeatureToggle.html"&gt;feature
toggles&lt;/a&gt;. Feature
toggles are simple conditional statements that are either enabled or
disabled based on some condition.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/89438d0ec51aff4149d0.js"&gt;&lt;/script&gt;

&lt;p&gt;This simple example shows a feature toggle for an "Edit User" feature.
If the boolean condition is false, then we only show the "New User"
feature and the "Admin" feature. This boolean value will be provided by
various means, usually a configuration file. This means at certain
points we can change this value in order to demonstrate the "Edit User"
functionality. Our demo environment could have this enabled, while the
live system would be disabled until the feature is fully complete.&lt;/p&gt;
&lt;p&gt;If the feature to edit users took more than an ideal release cycle the
code could still be released. As long as all the tests and other release
checks pass there is no reason to defer this task. This is after all one
of the benefits of continuous integration. Any consumer of this code
base would always be working with up to date code, merge conflicts would
be next to non existent. Our new code would be integrated regularly.&lt;/p&gt;
&lt;p&gt;Ideally feature toggles live as high as possible in the dependency graph
of your application. In most cases this would be the composition root of
the application or within UI/presentation logic. This simplifies the
addition of toggles, but you need to be careful that just because the UI
hides a feature it is not truly disabled. In scenarios where security is
a concern the feature toggles may need to live further down the stack.&lt;/p&gt;
&lt;p&gt;It's best to remove feature toggles once the feature is complete
otherwise they can become a maintenance burden. Is this feature enabled
or disabled? Can we delete this code? These sort of questions can cause
legacy code to live unquestioned. One way to aid in their removal is to
add assertions to fail the build at a certain point in the future or
include a toggle with built in date/time logic.&lt;/p&gt;
&lt;p&gt;Feature Toggles help with demonstrating features, but they can be more
complex. For risky features you may want to slowly ramp up the number of
users who are exposed to the feature. In this case the actual toggle may
perform some basic logic such as "&lt;em&gt;one out of ten requests&lt;/em&gt;" enable the
new feature. Overtime this ratio can be increased until the feature is
fully enabled and proven.&lt;/p&gt;
&lt;p&gt;Another technique to allow fast, regular releases is to rely on &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/branch-by-abstraction.html"&gt;Branch
by
Abstraction&lt;/a&gt;.
This works great when the toggles live in the composition root or the
team have the ability to split work around features.&lt;/p&gt;</content><category term="tutorial"></category><category term="releasing"></category></entry><entry><title>FirstOrDefault in LINQ</title><link href="https://blog.shaunfinglas.co.uk/2015/06/firstordefault-in-linq.html" rel="alternate"></link><published>2015-06-01T00:00:00+02:00</published><updated>2015-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-06-01:/2015/06/firstordefault-in-linq.html</id><summary type="html">&lt;p&gt;Explicit null checking is a code smell in most cases. It should be
limited where possible, or pushed to the edge of the system. A common
anti pattern I've noticed is the incorrect use of &lt;code&gt;First()&lt;/code&gt; in LINQ,
which I have used myself on many occasions in this manner.&lt;/p&gt;
&lt;p&gt;Assuming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Explicit null checking is a code smell in most cases. It should be
limited where possible, or pushed to the edge of the system. A common
anti pattern I've noticed is the incorrect use of &lt;code&gt;First()&lt;/code&gt; in LINQ,
which I have used myself on many occasions in this manner.&lt;/p&gt;
&lt;p&gt;Assuming a collection of items that you wish to query, the incorrect
approach is to explicitly check for a null return value and act
accordingly.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/0ab1ace9e1d582047485.js"&gt;&lt;/script&gt;

&lt;p&gt;The use of &lt;code&gt;FirstOrDefault()&lt;/code&gt; is redundant because no default is
actually set. The default value of a reference type would be null.
Meaning the explicit null checked is required. We could use &lt;code&gt;First()&lt;/code&gt;
alone, but this will throw an exception if there are no elements to
query against.&lt;/p&gt;
&lt;p&gt;A better solution is to set the default. As long as our initial query is
not operating on a null reference this is safe. Here the explicit null
check is gone. We have replaced it with a more functional solution which
is after all what LINQ is based upon. While both are equivalent, the
second example is much cleaner as well as being open to further chained
statements.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/f8622201f6cd44af138d.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;First()&lt;/code&gt; relies on one or more items being in the sequence. When you
are only ever dealing with one result &lt;code&gt;Single()&lt;/code&gt; is more appropriate.
This method will throw an exception if more than one result is found,
acting as a form of assertion. Like &lt;code&gt;First()&lt;/code&gt;, &lt;code&gt;Single()&lt;/code&gt; offers
&lt;code&gt;SingleOrDefault()&lt;/code&gt; which would work in the same manner as above.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Mob Programming</title><link href="https://blog.shaunfinglas.co.uk/2015/05/mob-programming.html" rel="alternate"></link><published>2015-05-01T00:00:00+02:00</published><updated>2015-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-05-01:/2015/05/mob-programming.html</id><summary type="html">&lt;p&gt;I first saw this video of &lt;a href="http://mobprogramming.org/mob-programming-time-lapse-video-a-day-of-mob-programming/"&gt;Mob
Programming&lt;/a&gt;
a couple of years back. Mob Programming is pair programming taken one
step further, the whole team is based around a single machine. The
developers rotate regularly and those who are not driving can add
feedback, make suggestions or simply watch and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I first saw this video of &lt;a href="http://mobprogramming.org/mob-programming-time-lapse-video-a-day-of-mob-programming/"&gt;Mob
Programming&lt;/a&gt;
a couple of years back. Mob Programming is pair programming taken one
step further, the whole team is based around a single machine. The
developers rotate regularly and those who are not driving can add
feedback, make suggestions or simply watch and learn. Everyone should be
placed on a level playing field. I will admit to being highly sceptical
of Mob Programming at first.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;I advocate walking skeletons to ensure we are on the "right path" when
developing&lt;/a&gt;.
We wanted to do these as a team, during our planning and tasking phase.
I suggested mobbing rather than watching a solo developer on a projector
and it turned out to be quite fun. We also learned a few new tricks such
as keyboard shortcuts or IDE techniques along the way.&lt;/p&gt;
&lt;p&gt;There were a few rough edges, mainly due to the setup used. A laptop
around a screen proved difficult and this in turned seemed to put
pressure on individuals. In repeat sessions we have used a dedicated
space, with a proper machine and large screen or projector. The ten
minute rotation is enough to allow focus, while not being too long
between switching.&lt;/p&gt;
&lt;p&gt;While Mob Programming is a relatively new experience for myself, it is
proving quite valuable as technique to help develop a walking skeleton.
Currently we have not used Mob Programming for full time development. As
it stands, I would find it hard to recommend this for some development
tasks. Additionally I can think of developers and managers that would
simply resist any suggestion of mob programming. Unfortunately for some
teams this may be too much of a hard sell.&lt;/p&gt;
&lt;p&gt;The end result of a mobbing session is a task board filled up with minor
tasks such as improving test coverage, refactoring, or edge cases. The
core functionality is delivered as a team. Combined with the walking
skeleton Mob Programming solves some of the key &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/tasking-in-software-development.html"&gt;problems that
traditional tasking and planning
introduces&lt;/a&gt;
and is well worth an experiment.&lt;/p&gt;</content><category term="development"></category><category term="team"></category></entry><entry><title>Tasking in Software Development</title><link href="https://blog.shaunfinglas.co.uk/2015/05/tasking-in-software-development.html" rel="alternate"></link><published>2015-05-01T00:00:00+02:00</published><updated>2015-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-05-01:/2015/05/tasking-in-software-development.html</id><summary type="html">&lt;p&gt;Tasking is core part of XP, Kanban, Scrum and other software development
methodologies. It is required when more than one developer is working on
a feature. I consider it to be the most wasteful part of the development
process as practiced in the mainstream.&lt;/p&gt;
&lt;p&gt;Tasking typically involves the team sitting …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tasking is core part of XP, Kanban, Scrum and other software development
methodologies. It is required when more than one developer is working on
a feature. I consider it to be the most wasteful part of the development
process as practiced in the mainstream.&lt;/p&gt;
&lt;p&gt;Tasking typically involves the team sitting around a
machine/desk/whiteboard/projector. From past experience this can take
anywhere from an hour up to a day or more. Engagement is often low and
this process can be both mentally and physically tiring. During which
many assumptions about what should be done is made.&lt;/p&gt;
&lt;p&gt;The end result is nothing but index cards, scribbled diagrams or other
lightweight documentation. These artifacts are often transformed into
digital versions.&lt;/p&gt;
&lt;h4&gt;Problems&lt;/h4&gt;
&lt;p&gt;The foolish understanding is that now any developer can pick up a task
and start work. This leads to dependent tasks being worked on in an
independent manner. Team members then find themselves being impeded
until a certain piece of code is in place. No amount of swarming or pair
programming can help in most cases.&lt;/p&gt;
&lt;p&gt;The biggest failure that poor tasking encourages is a task board with
numerous items moved to complete, &lt;a href="http://ronjeffries.com/articles/2015-01-02-hours-estimation/"&gt;yet the actual functionality is
broken and stood no chance of
working&lt;/a&gt;.
In my past experience, this is unfortunately very common.&lt;/p&gt;
&lt;p&gt;An equally common scenario is when task cards are stationary for long
periods, until they all move across to "done" very suddenly. This is
usually a symptom of a unidentified problem or change coming into play.&lt;/p&gt;
&lt;p&gt;Ultimately poor tasking results in waste.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;p&gt;Due to the frustrations of experiencing these problems week after week,
across numerous teams, I have experimented with a variety of solutions.&lt;/p&gt;
&lt;p&gt;Possibly the most controversial and difficult to sell is to have small
enough stories and features that mean a single developer/pair can work
on. Tasking becomes organic, just part of the day to day work. A simple
check list of tasks can suffice here. Both team members stay in sync
because the overhead of other team members has been removed. Ultimately
you still need to integrate these small(er) features but there are ways
to slimline this.&lt;/p&gt;
&lt;p&gt;A less dramatic solution is to task in a ad-hoc basis, per story/feature
and limit WIP to include tasking. In other words, if you are aiming to
deliver three features over several weeks, task the first feature and
move onto coding. If during this coding phase you change plans or
discover a problem, limited work is lost. Additionally tasking in
smaller chunks is better for the teams' morale.&lt;/p&gt;
&lt;p&gt;The two other solutions are the most powerful at combating the tasking
problem I have described, these are to utilize a &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;Walking
Skeleton&lt;/a&gt;
and try &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/mob-programming.html"&gt;Mob
Programming&lt;/a&gt;.
Both of which will be detailed in future posts.&lt;/p&gt;</content><category term="retro"></category><category term="team"></category></entry><entry><title>Testing Private Code</title><link href="https://blog.shaunfinglas.co.uk/2015/05/testing-private-code.html" rel="alternate"></link><published>2015-05-01T00:00:00+02:00</published><updated>2015-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-05-01:/2015/05/testing-private-code.html</id><summary type="html">&lt;p&gt;A common problem many people ask is - should you test private code? In
short, you shouldn't. You should always test the public api of your code
where possible. This is not always easy. Based on the context of the
code in question there are a few options available.&lt;/p&gt;
&lt;h5&gt;Don't Test …&lt;/h5&gt;</summary><content type="html">&lt;p&gt;A common problem many people ask is - should you test private code? In
short, you shouldn't. You should always test the public api of your code
where possible. This is not always easy. Based on the context of the
code in question there are a few options available.&lt;/p&gt;
&lt;h5&gt;Don't Test&lt;/h5&gt;
&lt;p&gt;Either don't test the private code or rely on manual testing. This will
not be ideal in many cases, but if the code is covered in higher level
tests you may be able to get away with it. If the code will be stable,
short lived or low risk you can default to this option.&lt;/p&gt;
&lt;h5&gt;Test via Public Tests&lt;/h5&gt;
&lt;p&gt;Simply test the private code by adding assertions or verifications to
exisiting public behaviour tests. If the setup requires a lot of work,
many edge cases or much duplication you may want to avoid this
technique.&lt;/p&gt;
&lt;h5&gt;Make the Code Public&lt;/h5&gt;
&lt;p&gt;Once public, the code is easily testable. Are we making this code public
just for the sake of an automated test? Yes, but there are valid times
to do this. Providing the behaviour is logically part of the object in
question there is no harm, the single responsibility principle is not
violated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.ploeh.dk/2011/02/28/Interfacesareaccessmodifiers/"&gt;Interfaces can be used to control visibility
here&lt;/a&gt;.
For testing you always use a concrete instance, while your production
code should hold references to interfaces only. To simply hide the
method, don't add it to the interface. For dynamic langauges this is as
simple as "&lt;em&gt;don't invoke it&lt;/em&gt;" or relying on naming conventions to
denoate implementation details.&lt;/p&gt;
&lt;h5&gt;Make a Public Class&lt;/h5&gt;
&lt;p&gt;When single responsibility principle would be violated in the technique
above, this is your other option. &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Beware the power of just adding a new
class and making it
public&lt;/a&gt;.
While it will allow testing in one place, &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;each public dependency you
introduce further increases
coupling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If the code that needs testing is a service, the act to introduce a
public object should be considered thoughtfully. Once the class is
pubic, you simply need to verify the use of the class, rather than what
it does. However &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;Value Objects can help limit the tests you need to
write&lt;/a&gt;
entirely and should be used whenever possible.&lt;/p&gt;</content><category term="testing"></category><category term="tdd"></category><category term="unit-testing"></category></entry><entry><title>Walking Skeleton</title><link href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html" rel="alternate"></link><published>2015-05-01T00:00:00+02:00</published><updated>2015-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-05-01:/2015/05/walking-skeleton.html</id><summary type="html">&lt;p&gt;&lt;a href="http://alistair.cockburn.us/Walking+skeleton"&gt;A Walking Skeleton is the thinnest possible slice of new functionality
that can be delivered end to
end&lt;/a&gt;. The term "&lt;em&gt;walking&lt;/em&gt;"
refers to the ability for the feature to "&lt;em&gt;stand on its own&lt;/em&gt;". You
should be able to deploy a Walking Skeleton and demonstrate it. Just
like a human skeleton …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://alistair.cockburn.us/Walking+skeleton"&gt;A Walking Skeleton is the thinnest possible slice of new functionality
that can be delivered end to
end&lt;/a&gt;. The term "&lt;em&gt;walking&lt;/em&gt;"
refers to the ability for the feature to "&lt;em&gt;stand on its own&lt;/em&gt;". You
should be able to deploy a Walking Skeleton and demonstrate it. Just
like a human skeleton is an incomplete body, a Walking Skeleton is an
incomplete piece of software with many internals stubbed, not
implemented or consisting of basic functionality.&lt;/p&gt;
&lt;p&gt;While the software won't do much it provides rapid feedback. It allows
your build and deploy pipeline to be set up if not already in place.
More importantly it gives developers a framework or scaffold to work
with.&lt;/p&gt;
&lt;p&gt;Production of a Walking Skeleton should be fast. Components such as
&lt;a href="https://blog.shaunfinglas.co.uk/2014/02/top-down-vs-bottom-up.html"&gt;which objects to introduce should ideally be developed top
down&lt;/a&gt;,
however the actual direction each solution takes will vary. Some design
will still be required, but the choice of patterns or implementation
details should be deferred where possible. Core interfaces such as
application services, domain models and data access will naturally fall
out of this process.&lt;/p&gt;
&lt;h4&gt;Tasking&lt;/h4&gt;
&lt;p&gt;Each new story or feature should be implemented as a Walking Skeleton
whenever possible. The first task a team should implement should be to
create the skeleton itself. An optional step during implementation is to
wrap the functionality in a acceptance test. Once the skeleton is
complete, a task per object can be created with clear inputs, outputs
and responsibilities.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Highlights problems that tasking often misses.&lt;/li&gt;
&lt;li&gt;Tasks can be implemented in parallel once a framework is in place.&lt;/li&gt;
&lt;li&gt;Implementing or replacing stubbed code is easy given a stable API.&lt;/li&gt;
&lt;li&gt;Provides working software very quickly and cheaply, which is great
    for feedback or exploration.&lt;/li&gt;
&lt;li&gt;Puts the whole team on the same page.&lt;/li&gt;
&lt;li&gt;Code trumps documentation.&lt;/li&gt;
&lt;li&gt;Leads to a more stable API.&lt;/li&gt;
&lt;li&gt;TDD is a natural fit once the skeleton is complete.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Producing a Walking Skeleton is not perfect, problems still crop up, but
they can be handled in a more controlled manner. Most issues relate to
implementation details at lower levels, rather than integration or
functional failures which are often symptoms of tasking before writing
any code.&lt;/p&gt;</content><category term="development"></category><category term="team"></category></entry><entry><title>Abstractions</title><link href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-04-01:/2015/02/abstractions.html</id><summary type="html">&lt;p&gt;This is the first part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Coupling is one of the enemies of a healthy code base. One way to combat
high coupling is to introduce abstractions.&lt;/p&gt;
&lt;p&gt;Too few abstractions is bad. Your code can become …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Coupling is one of the enemies of a healthy code base. One way to combat
high coupling is to introduce abstractions.&lt;/p&gt;
&lt;p&gt;Too few abstractions is bad. Your code can become coupled. Some of the
worst code I've worked with was highly coupled to either the database,
UI or both. Working with such code is difficult.&lt;/p&gt;
&lt;p&gt;Too many abstractions is equally as bad. Abstraction behind abstraction
can become so difficult to work with the benefit of abstracting in the
first place is lost. Some of the worst code I've worked with was so
convoluted with needless abstractions it made any development a tricky
process.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.ploeh.dk/2010/12/02/Interfacesarenotabstractions/"&gt;Most abstractions are not really abstractions at
all&lt;/a&gt;, but
nothing more than simple indirection. Indirection is sometimes required,
though it is wrong to confuse with abstraction. &lt;code&gt;IFileWriter&lt;/code&gt; is not an
abstraction. &lt;code&gt;IReciept&lt;/code&gt; that happens to write to the file system when
implemented as &lt;code&gt;FileSystemReceipt&lt;/code&gt; is an abstraction. &lt;code&gt;IFileWriter&lt;/code&gt;
&lt;em&gt;could&lt;/em&gt; be an abstraction if the software we were writing involved
working directly with the file system, such as a text editor. In the
case of printing receipts, where they are printed is simply an
implementation detail.&lt;/p&gt;
&lt;p&gt;Finding a balance between the right level of abstraction can be tricky.
From my experience there a few techniques that can be used.&lt;/p&gt;
&lt;h4&gt;Techniques&lt;/h4&gt;
&lt;h5&gt;Embrace Coupling&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://www.udidahan.com/?blog=true"&gt;Udi Dahan&lt;/a&gt; makes this point in his
presentations. If you have a traditional application with a UI, domain
and data layer why bother adding further layers to abstract these? If we
wish to retrieve a new field from the database and display the value we
have three places to change, adding further models and mapping layers
does nothing but increase coupling. &lt;a href="https://blog.shaunfinglas.co.uk/2014/07/i-need-to-stop-misusing-namespaces.html"&gt;Applying namespaces
correctly&lt;/a&gt;
can also help here, if everything that needs to change at the same time
is logically grouped, such changes are easier.&lt;/p&gt;
&lt;h5&gt;Apply YAGNI&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://codeopinion.com/simplify-your-code/"&gt;Do you truly need a database model mapped into a domain model, mapped
into a view model and back?&lt;/a&gt;
Applying YAGNI can limit many abstractions by simply not worrying about
"&lt;em&gt;what if&lt;/em&gt;" scenarios until they actually occur.&lt;/p&gt;
&lt;h5&gt;CQRS&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://martinfowler.com/bliki/CQRS.html"&gt;Command Query Responsibility Separation or
CQRS&lt;/a&gt; deserves an explanation
on its own, but for now applying CQRS reduces unnecessary coupling by
embracing it. For querying data and displaying it on a screen my default
choice is to use CQRS to simply read from the database and populate a
view model. This limits abstractions and helps keep the code focused,
flexible and open to change. &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;I will expand on CQRS in a future
post&lt;/a&gt;.&lt;/p&gt;</content><category term="abstractions-series"></category><category term="code-quality"></category></entry><entry><title>Cool URI's Don't Change</title><link href="https://blog.shaunfinglas.co.uk/2015/04/cool-uris-dont-change.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-04-01:/2015/04/cool-uris-dont-change.html</id><summary type="html">&lt;p&gt;I switched domains back in June 2013. This was out of my control. A lot
of links were lost despite an attempt to backlink in order to keep the
traffic from the old links and new links crossing over. The previous
domain also broke content without consideration, there are links …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I switched domains back in June 2013. This was out of my control. A lot
of links were lost despite an attempt to backlink in order to keep the
traffic from the old links and new links crossing over. The previous
domain also broke content without consideration, there are links around
that simply point to nothing.&lt;/p&gt;
&lt;p&gt;To compound the issue I switched this blogs platform back in June 2014.
This was much overdue, but an issue fully in my control. This yet again,
broke links despite being for the better. My link management has been
poor and given how annoyed I become at other sites breaking links, it's
time to make a stand.&lt;/p&gt;
&lt;p&gt;A recent example was when I was on holiday with a limited wifi
connection of an evening. &lt;a href="https://twitter.com/mdpopescu/status/576647332671946752"&gt;A couple of users on Twitter wanted to share
some of my
content&lt;/a&gt;, but
the link was broken. After some delay and flip flopping I was finally
able to share the post they were after. I am extremely happy that Paul
thought of a blog post I wrote, so the fact that he was unable to share
it was embarrassing.&lt;/p&gt;
&lt;p&gt;An old mentor of mine introduced me to &lt;a href="http://www.w3.org/Provider/Style/URI.html"&gt;Cool
URI's&lt;/a&gt; early on in my career
and highlighted the importance of choosing a good URI scheme. From this
post onwards no links to my content both past and future will break,
despite hosting or platform choices. I've introduced an automated
process to check each post when the blog is backed up, to ensure this
never happens again.&lt;/p&gt;
&lt;p&gt;The lesson here is simple. If you publish content on a site under your
control, it's your duty to ensure you handle breaking changes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I debated the use of URL or URI for this post initially. For future
reference, &lt;a href="http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn"&gt;URI's identify, URL's identify and
locate&lt;/a&gt;.&lt;/p&gt;</content><category term="blogging"></category></entry><entry><title>CQRS - The Simplest Introduction</title><link href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-04-01:/2015/04/cqrs-simplest-introduction.html</id><summary type="html">&lt;p&gt;&lt;a href="http://martinfowler.com/bliki/CQRS.html"&gt;CQRS or Command Query Responsibility
Separation&lt;/a&gt; is easy to
understand but it can become complex due to various levels to which
developers take the principle behind it. Simply - &lt;a href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS is two models,
where the used to be
one&lt;/a&gt;.
Nothing more at its heart.&lt;/p&gt;
&lt;p&gt;Take the Customer aggregate below. This exposes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://martinfowler.com/bliki/CQRS.html"&gt;CQRS or Command Query Responsibility
Separation&lt;/a&gt; is easy to
understand but it can become complex due to various levels to which
developers take the principle behind it. Simply - &lt;a href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS is two models,
where the used to be
one&lt;/a&gt;.
Nothing more at its heart.&lt;/p&gt;
&lt;p&gt;Take the Customer aggregate below. This exposes both commands as void
methods and queries as methods with return types. Public state is
leaked, but needed in order to display or persist the data. Many
frameworks or libraries require public accessibility in order to
function.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/c1d94351de393f782435.js"&gt;&lt;/script&gt;

&lt;p&gt;CQRS states we split commands from queries. This means we end up with a
pure Customer aggregate root that exposes behaviour only. Likewise we
end up with a basic application service that simply returns data.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/dd2ff5c706847c3f4734.js"&gt;&lt;/script&gt;

&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;h5&gt;Commands&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Domain model is purely behaviour.&lt;/li&gt;
&lt;li&gt;No data is exposed, public fields/methods gone (no getters/setters)&lt;/li&gt;
&lt;li&gt;Only way to modify customers is via the commands - encapsulation is
    preserved.&lt;/li&gt;
&lt;li&gt;Less relationships simply for querying/persistence (has-a
    relationships)&lt;/li&gt;
&lt;li&gt;Testing is easier, check event raised/command issued rather than
    state&lt;/li&gt;
&lt;li&gt;Allows task based UI's, rather than CRUD focused interactions.&lt;/li&gt;
&lt;li&gt;If you use repositories, you only need a GetById method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Queries&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Queries can be simplified - in many cases by a huge amount. Just
    read from the data store, no need to create relationships between
    models.&lt;/li&gt;
&lt;li&gt;You can &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;use direct data access, rather than repositories or other
    abstractions&lt;/a&gt;.
    This has a lot of benefit.&lt;/li&gt;
&lt;li&gt;It's easy to develop, less layers and moving parts.&lt;/li&gt;
&lt;li&gt;You can independently replace persistent storage mechanisms per
    query based on use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Complexity&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CQRS is not architecture - it is a pattern, often used within
    boundaries of a system.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/"&gt;Event Sourcing and Eventual Consistency don't need to be
    used&lt;/a&gt;,
    but they can be employed if needed. Many examples of CQRS include
    these, making CQRS appear more complicated than it really is.&lt;/li&gt;
&lt;li&gt;You can separate read and write stores. For example, store the read
    data in document store, while storing write data in a relational
    database. This increases complexity and means that seeding/feeding
    data becomes an issue. &lt;a href="http://www.udidahan.com/2011/04/22/when-to-avoid-cqrs/"&gt;A collaborative domain can signal the need
    to do this&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CQRS is an easy concept, that introduces many benefits. However
implementation of this pattern can vary from simple, to complicated. The
extent to which CQRS is implemented should be judged on a case by case
basis. Many systems can get away without separating read and write
stores, yet still enjoy the benefits that this pattern provides.&lt;/p&gt;</content><category term="programming"></category><category term="SOA"></category><category term="tutorial"></category></entry><entry><title>DRY vs DAMP in Tests</title><link href="https://blog.shaunfinglas.co.uk/2015/04/dry-vs-damp-in-tests.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-04-01:/2015/04/dry-vs-damp-in-tests.html</id><summary type="html">&lt;p&gt;In the &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;previous post I mentioned that duplication in tests is not
always
bad&lt;/a&gt;.
Sometimes duplication becomes a problem. Tests can become large or
virtually identically excluding a few lines. Changes to these tests can
take a while and increase the maintenance overhead. At this point, DRY
violations need to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;previous post I mentioned that duplication in tests is not
always
bad&lt;/a&gt;.
Sometimes duplication becomes a problem. Tests can become large or
virtually identically excluding a few lines. Changes to these tests can
take a while and increase the maintenance overhead. At this point, DRY
violations need to be resolved.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;h5&gt;Test Helpers&lt;/h5&gt;
&lt;p&gt;A common solution is to extract common functionality into setup methods
or other helper utilities. While this will remove and reduce duplication
this can make tests a bit harder to read as the test is now split
amongst unrelated components. There is a limit to how useful such
extractions can help as each test may need to do something slightly
differently.&lt;/p&gt;
&lt;h5&gt;DAMP - Descriptive and Meaningful Phrases&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://www.pluralsight.com/courses/advanced-unit-testing"&gt;Descriptive and Meaningful
Phrases&lt;/a&gt; is
the alter ego of DRY. DAMP tests often use the builder pattern to
construct the System Under Test. This allows calls to be chained in a
fluent API style, similar to the &lt;a href="https://blog.shaunfinglas.co.uk/2014/05/flexible-selenium-tests-via-page-objects.html"&gt;Page Object
Pattern&lt;/a&gt;.
Internally the implementation will still use literals or value objects,
but each test can provide just the differences it needs in order to
execute. The key point regardless of how DAMP tests are implemented is
to favor readability over anything else, while still eliminating
duplication where possible.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/d9308078e672ce5fd64f.js"&gt;&lt;/script&gt;

&lt;p&gt;The example shows a typical arrange aspect of a test written in the DAMP
style. The end result of this builder is we will have the ability to now
act and assert against the result - a controller instance. If further
tests were required we could use the same setup but simply provide
different order dates for example. Additionally we could add or remove
further chained calls. Behind the scenes the &lt;a href="https://github.com/Finglas/Playground/blob/master/SutBuilder/SutBuilderExample.cs"&gt;implementation of these
builders is
straightforward&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tend to introduce this pattern after the third time of seeing
duplication between tests. There is a bit of an overhead otherwise, the
builder itself requires implementation and careful construction. Once
you go past three tests the overhead pays itself off by allowing you to
rapidly add new tests and make large, structural changes.&lt;/p&gt;
&lt;p&gt;Beware the builders becoming too big or complex. If this starts to
happen you may wish to refactor as there may be missing abstractions in
your design. DAMP tests have numerous advantages, but they should be
applied where required rather than for every scenario. Tests for objects
that are lower in the dependency graph tend to fit into the more
traditional testing patterns, while higher up your stack DAMP tests can
prove useful.&lt;/p&gt;</content><category term="programming"></category><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Getters and Setters are Evil - Redux</title><link href="https://blog.shaunfinglas.co.uk/2015/04/getters-and-setters-are-evil-redux.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-04-01:/2015/04/getters-and-setters-are-evil-redux.html</id><summary type="html">&lt;p&gt;Back in early 2011 I wrote one of my &lt;a href="https://blog.shaunfinglas.co.uk/2011/04/getters-and-setters-are-evil.html"&gt;most viewed and commented posts at
the time - Getters and Setters are
Evil&lt;/a&gt;.
Four years later it's time to review this.&lt;/p&gt;
&lt;p&gt;The feedback within the team was generally positive. Production code was
written in this style to great success. The core …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back in early 2011 I wrote one of my &lt;a href="https://blog.shaunfinglas.co.uk/2011/04/getters-and-setters-are-evil.html"&gt;most viewed and commented posts at
the time - Getters and Setters are
Evil&lt;/a&gt;.
Four years later it's time to review this.&lt;/p&gt;
&lt;p&gt;The feedback within the team was generally positive. Production code was
written in this style to great success. The core benefit was
encapsulation was preserved as Business Objects were the sole source of
domain logic. As an additional side effect testing was easier.&lt;/p&gt;
&lt;p&gt;However not everyone within the team agreed that the benefits were worth
the extra hassle or believed in the benefits of encapsulation. I always
found the addition of an &lt;code&gt;IRender&lt;/code&gt; interface or similar broke the SRP,
even if you moved the logic to a separate class. The OCP suffered too,
if view requirements changed, you need dig out your business object. The
biggest failing is that legacy code and frameworks still require public
getters/setters to function.&lt;/p&gt;
&lt;p&gt;Overtime I found myself and others slipping back to the "old ways" of
applying getters/setters without thought.&lt;/p&gt;
&lt;h4&gt;2015&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;I now simply use two models, where the used to be
one&lt;/a&gt;.
Changes go to the domain model in the form of commands. Queries get
returned as view models. The big change here is to simply split commands
from queries and embrace the second model, everything else falls into
place. This style works without a rich domain model also. The commands
can be expressed as Transaction Scripts or similar if desired.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a9bdd46c394ac06032fe.js"&gt;&lt;/script&gt;

&lt;p&gt;This is not new, I've applied this style in the past, but the big
difference is the business object is never mapped or converted into a
view model. There is no relationship between the two. They are two
distinct paths in the code. This is the difference that CQRS brings -
limited coupling.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;p&gt;Encapsulation is preserved as before, but the view model can be tailored
to requirements. SOLID principles are not broken, while still having the
huge benefit of playing nicely with frameworks due to exposing public
getter/setters in order to facilitate model binding.&lt;/p&gt;
&lt;p&gt;Getters and Setters are not evil as I've concluded before. It just turns
out there are better ways of embracing the benefits of thinking they are
evil.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The term Business Object is also known as Domain Object. The later being
my preferred term now. I stuck with the original terminology to match
the original post's code example.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Randomly Generated Values in Tests</title><link href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-04-01:/2015/04/randomly-generated-values-in-tests.html</id><summary type="html">&lt;p&gt;The use of randomly generated test data seems like a good thing at first
glance. Having worked with several teams that have used this concept I
generally discourage the practice. Consider a simple method that joins
together two strings. A test using random values may look like this.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a52ff8867d6af0757059.js"&gt;&lt;/script&gt;

&lt;h4&gt;Problems&lt;/h4&gt;
&lt;h5&gt;Harder …&lt;/h5&gt;</summary><content type="html">&lt;p&gt;The use of randomly generated test data seems like a good thing at first
glance. Having worked with several teams that have used this concept I
generally discourage the practice. Consider a simple method that joins
together two strings. A test using random values may look like this.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a52ff8867d6af0757059.js"&gt;&lt;/script&gt;

&lt;h4&gt;Problems&lt;/h4&gt;
&lt;h5&gt;Harder to Read&lt;/h5&gt;
&lt;p&gt;While this is a toy example to demonstrate the problem, in more
realistic scenarios the lack of literal values harms the readability of
the tests. It is worth noting the lack of literals causes more lines of
code as anything that has importance needs to be stored in a variable or
field. My biggest concern is when assertions start to become complicated
or even worse, duplicate production code in order to pass. If we wish to
treat tests as examples, this is pretty poor.&lt;/p&gt;
&lt;h5&gt;Edge Cases&lt;/h5&gt;
&lt;p&gt;Generating a random string seems easy enough. Overtime the edge cases in
question start to ramp up. You have whitespace, special characters, new
lines, numbers and much more to worry about if you wish to do this
properly. The code to actually generate random values is often shared
via inheritance or composition, this makes changes tricky and dangerous
as you can inadvertently change more than one test when modifying this
common code. If the two inputs need to be different then you could
potentially generate the same string each time, leading to flaky tests
if you're not careful.&lt;/p&gt;
&lt;h5&gt;Psuedo Random&lt;/h5&gt;
&lt;p&gt;The random aspect of these tests can confuse developers. In the example
above, there is only ever one value for each variable. In other words
this test can run many times locally and pass, but fail when executed
elsewhere. There may be a subtle bug that is only found after the code
is declared complete. This issue often causes failures in the build, at
which developers declare "&lt;em&gt;it's just a random failure&lt;/em&gt;" before
re-triggering the build because a value may be invalid for a specific
scenario.&lt;/p&gt;
&lt;h5&gt;Date/Times can be Tricky&lt;/h5&gt;
&lt;p&gt;Date/Times are hard enough as it is. Trying to randomly generate these
is not worth the hassle.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;My recommendation is to rely on literal values or &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;value
objects&lt;/a&gt;
where possible, these make the test much more readable and act like an
example or specification. Additionally their use allows the inline
variable refactor to take place, meaning shorter, conciser tests.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/35666813e84b920420e3.js"&gt;&lt;/script&gt;

&lt;h5&gt;Test Cases/Parameterized Tests&lt;/h5&gt;
&lt;p&gt;If you wish to test similar scenarios in one go then &lt;a href="http://www.nunit.org/index.php?p=testCase&amp;amp;r=2.5"&gt;test
cases&lt;/a&gt; can help. This
is usually the case when you cannot name a test easily because the
functionality is the same as an existing test.&lt;/p&gt;
&lt;h5&gt;Bugs&lt;/h5&gt;
&lt;p&gt;The assumption that randomly generated tests catch bugs and cover more
ground is wrong. If you really do discover a bug after manual testing or
on a live system just write a new test exposing that bug and fix it.
Thinking you cover more scenarios by using random values is false.&lt;/p&gt;
&lt;h5&gt;Property Based Testing&lt;/h5&gt;
&lt;p&gt;I cannot comment on &lt;a href="http://www.scalatest.org/user_guide/property_based_testing"&gt;Property Based
Testing&lt;/a&gt;
fully, but this is certainly an interesting area and does not suffer
from the issues above. Worth looking into.&lt;/p&gt;
&lt;h5&gt;DRY?&lt;/h5&gt;
&lt;p&gt;This solution certainly violates DRY. There is clear duplication. If
this was production code I would remove it, however for tests my stance
for a long time has been to allow this duplication to remain.
Readability and expressiveness is much more important. There are valid
times when duplication between tests is a bad thing. While this simple
example doesn't suffer from this problem &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/dry-vs-damp-in-tests.html"&gt;I will expand on how to keep
your tests expressive but DRY in a future
post&lt;/a&gt;.&lt;/p&gt;</content><category term="testing"></category><category term="tdd"></category><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Dependency Elimination Principle</title><link href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html" rel="alternate"></link><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-03-01:/2015/03/dependency-elimination-principle.html</id><summary type="html">&lt;p&gt;This is the third, and final part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I've wrote about what &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;good dependencies are before, and the benefits if
you can limit and remove them where
possible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can take this idea further though, by applying concepts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the third, and final part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I've wrote about what &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;good dependencies are before, and the benefits if
you can limit and remove them where
possible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can take this idea further though, by applying concepts from
functional programming such as "&lt;em&gt;depend on values rather than
dependencies&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;A wise colleague started me down this path of passing values, rather
than dependencies on collaborators after we repeatedly found ourselves
depending on implementation details. This meant our high level domain
logic was tightly coupled to low level implementation details.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/briangeihsler"&gt;Brian Geihsler&lt;/a&gt; reminded me of this
concept with an &lt;a href="http://qualityisspeed.blogspot.co.uk/2015/02/the-dependency-elimination-principle-a-canonical-example.html"&gt;excellent demonstration of this in
practice&lt;/a&gt;
and has allowed me to put a name to this practice.&lt;/p&gt;
&lt;p&gt;Additionally &lt;a href="http://blog.thecodewhisperer.com/2013/11/23/beyond-mock-objects/"&gt;J.B. Rainsberger's example is with a virtual
clock&lt;/a&gt;,
another common dependency we often need. In this case, ask for the time,
not how you get the time. The example also highlights another common
problem with conventions when using a framework or library.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/ca5bbde5a06f6c7c627b.js"&gt;&lt;/script&gt;

&lt;p&gt;Here we can handle commands but only those that match the signature of
taking a single command, and returning no response. In order to apply
the Dependency Elimination Principle (DEP) and remove the clock wrapper
we can introduce an overload. Our tests will be expressed using the
overload, while the production code will make use of the standard
method. If the class in question has a relevant set of interfaces, the
overload would be omitted from this to ensure that consumers have a
clean, focused API to consume.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/9fe933e771fad1c3a693.js"&gt;&lt;/script&gt;

&lt;p&gt;When the DEP is applied to other dependencies such as configuration
details, flexibility is achieved by the ability to provide these values
from any source. As a side effect, coupling has been reduced, while also
removing an unnecessary abstraction from the codebase.&lt;/p&gt;
&lt;p&gt;Try to apply the DEP where possible. Remove as many dependencies as
possible for flexible, maintainable code. Not all dependencies can be
eliminated, but unless the dependency is a valid abstraction it may be
worth considering removing or reducing use.&lt;/p&gt;</content><category term="abstractions-series"></category><category term="tutorial"></category></entry><entry><title>Remote Meetings - Balancing the Act</title><link href="https://blog.shaunfinglas.co.uk/2015/03/remote-meetings-balancing-act.html" rel="alternate"></link><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-03-01:/2015/03/remote-meetings-balancing-act.html</id><summary type="html">&lt;p&gt;Meetings are hard when some team members are remote and are physically
based in the same location.&lt;/p&gt;
&lt;p&gt;It is easy for the remote user to feel second class in terms of the
meeting. Remote workers can find it hard to add to the meeting without
interrupting or getting left behind …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Meetings are hard when some team members are remote and are physically
based in the same location.&lt;/p&gt;
&lt;p&gt;It is easy for the remote user to feel second class in terms of the
meeting. Remote workers can find it hard to add to the meeting without
interrupting or getting left behind.&lt;/p&gt;
&lt;p&gt;One practice to balance the process of remote meeting is to ensure that
&lt;strong&gt;if one or more parties are remote, all participants remote into
meeting&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Levels playing field - everyone should have equal opportunity to
    contribute.&lt;/li&gt;
&lt;li&gt;Removes lag - everyone has the same experience of time/delay.&lt;/li&gt;
&lt;li&gt;Includes online benefits such as message logs, sharing of screen.&lt;/li&gt;
&lt;li&gt;Comfort of own desk/environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This idea was taken from &lt;a href="http://blog.stackoverflow.com/2013/02/why-we-still-believe-in-working-remotely/"&gt;Stack Exchange's
post&lt;/a&gt;
detailing why they still believe in remote working.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Reused Abstraction Principle</title><link href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html" rel="alternate"></link><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-03-01:/2015/03/reused-abstraction-principle.html</id><summary type="html">&lt;p&gt;This is the second part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The Reused Abstraction Principle is a simple in concept in practice, but
oddly rarely followed in typical enterprise development. I myself have
been incredibly guilty of this in the past.&lt;/p&gt;
&lt;p&gt;Most code …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The Reused Abstraction Principle is a simple in concept in practice, but
oddly rarely followed in typical enterprise development. I myself have
been incredibly guilty of this in the past.&lt;/p&gt;
&lt;p&gt;Most code bases have a 1:1 mapping of interfaces to implementations.
Usually this is the sign of TDD or automated testing being applied
badly. The majority of these interfaces are wrong. &lt;a href="http://blog.ploeh.dk/2010/12/02/Interfacesarenotabstractions/"&gt;1:1 mappings between
interfaces and implementations is a code
smell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Such situations are usually the result of extracting an interface from
an implementation, rather than having the client drive behaviour.&lt;/p&gt;
&lt;p&gt;These interfaces are also often bad abstractions, known as "leaky
abstractions". As &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;I've discussed previously, these abstractions tend to
offer nothing more than simple
indirection&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Apply the "&lt;em&gt;rule of three&lt;/em&gt;". If there is only ever one implementation,
then you don't need the interface/base class. If you do need to
introduce an interface, have the client provide it. Try to resist the
urge to extract from an implementation. Any stubs or testing
implementations should be treated as valid implementations, despite no
use within the production code directly.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/53d16d4bcadaa6eda702.js"&gt;&lt;/script&gt;

&lt;p&gt;In the first example there is a 1:1 mapping. &lt;a href="http://www.codemanship.co.uk/parlezuml/blog/?postid=934"&gt;This is clutter and
needless
indirection&lt;/a&gt;.
As we have nothing to replace &lt;code&gt;FooService&lt;/code&gt; with, the interface offers no
value. The second example shows multiple implementations of &lt;code&gt;IFoo&lt;/code&gt;. Here
different implementations have unique responsibilities. We could use a
test stub, or use the decorator pattern whenever we use &lt;code&gt;IFoo&lt;/code&gt;. The
abstraction is valuable.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.ploeh.dk/2010/12/03/Towardsbetterabstractions/"&gt;If you can introduce a composite or decorator this is probably a sign
of a good abstraction at
work&lt;/a&gt;.
Likewise the ability to replace your implementation and have the code
still function is a good sign. Such an example would be &lt;code&gt;SqlRepository&lt;/code&gt;
replaced with &lt;code&gt;MongoRepository&lt;/code&gt; when &lt;code&gt;IRepository&lt;/code&gt; is required.&lt;/p&gt;
&lt;p&gt;Additionally just because you opt to use dependency injection, there is
no rule stating said dependency must be an interface or base class.&lt;/p&gt;
&lt;p&gt;The final point is to &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;remember what good dependencies
are&lt;/a&gt;,
everything else can be an implementation detail leading to more flexible
and resilient code.&lt;/p&gt;</content><category term="abstractions-series"></category><category term="code-quality"></category><category term="tutorial"></category></entry><entry><title>Acceptance Testing need not use the Full Stack</title><link href="https://blog.shaunfinglas.co.uk/2014/08/acceptance-testing-need-not-use-full.html" rel="alternate"></link><published>2015-02-10T20:15:00+01:00</published><updated>2015-02-10T20:15:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-02-10:/2014/08/acceptance-testing-need-not-use-full.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Joined a team with thousands of unit tests (\~10k)&lt;/li&gt;
&lt;li&gt;But bugs still got through our QA process&lt;/li&gt;
&lt;li&gt;How could this be?&lt;/li&gt;
&lt;li&gt;Team had a small number of full end to end live service tests&lt;/li&gt;
&lt;li&gt;So my answer was to just increase the number of these&lt;/li&gt;
&lt;li&gt;Surely this would solve our …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Joined a team with thousands of unit tests (\~10k)&lt;/li&gt;
&lt;li&gt;But bugs still got through our QA process&lt;/li&gt;
&lt;li&gt;How could this be?&lt;/li&gt;
&lt;li&gt;Team had a small number of full end to end live service tests&lt;/li&gt;
&lt;li&gt;So my answer was to just increase the number of these&lt;/li&gt;
&lt;li&gt;Surely this would solve our problem?&lt;/li&gt;
&lt;li&gt;Not quite&lt;/li&gt;
&lt;li&gt;The maintenance of these tests were a great burden&lt;/li&gt;
&lt;li&gt;Each day many tests would fail, but nothing would be "broken".&lt;/li&gt;
&lt;li&gt;Data would have changed in the DB&lt;/li&gt;
&lt;li&gt;The UI could have changed&lt;/li&gt;
&lt;li&gt;The browser could have been slightly slower&lt;/li&gt;
&lt;li&gt;And so on&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Delete the majority of live service tests - limit the tests to the
    core user journey through the application&lt;/li&gt;
&lt;li&gt;As long as the pages load up, without an error we shouldn't care&lt;/li&gt;
&lt;li&gt;Stopped testing logic or behaviour - made the tests loose, e.g. as
    long as value is not null or empty we are OK, we don't actually care
    what the value is.&lt;/li&gt;
&lt;li&gt;Made use of &lt;a href="http://martinfowler.com/bliki/IntegrationContractTest.html"&gt;contract
    testing&lt;/a&gt;
    to substitute boundaries with in memory fakes, e.g. persistent
    storage. This allowed fast, stable acceptance tests to be run
    against the system without the brittle nature described above.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Benefits&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Small handful of live service tests (using real DB, UI) caught the
    majority of the serious flaws that snuck through&lt;/li&gt;
&lt;li&gt;Future bugs were missing unit tests thanks to contract testing&lt;/li&gt;
&lt;li&gt;Faster to write&lt;/li&gt;
&lt;li&gt;Easier to debug&lt;/li&gt;
&lt;li&gt;Faster to execute!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key point was the use of contract testing. Without contract testing,
writing automated acceptance tests is a pretty awful process.&lt;/p&gt;
&lt;p&gt;Data requires setup and tear down. Any data changes can break your tests
and the UI is often in flux.&lt;/p&gt;
&lt;p&gt;By substituting the UI layer, or the DB access with fakes such as a
console view, or in memory hash table, your tests can still cover the
whole stack, but in a more stable, bite size manner. You simply test
your real view or data access separately to prove they work, and can in
fact be swapped out thanks to the &lt;a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle"&gt;Liskov Substitution Principle
(LSP&lt;/a&gt;) by
running the same suite of tests against your fakes!&lt;/p&gt;
&lt;p&gt;I'll be expanding on how and what contract testing is in a future post.&lt;/p&gt;</content><category term="testing"></category><category term="retro"></category></entry><entry><title>Value Object Refactoring</title><link href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html" rel="alternate"></link><published>2015-02-03T20:36:00+01:00</published><updated>2015-02-03T20:36:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-02-03:/2015/02/value-object-refactoring.html</id><summary type="html">&lt;p&gt;After extract method or extract class introducing a value object is one
of the most powerful refactorings available. A value object encapsulates
a value or concept within your domain. While the term is more formally
known from Domain Driven Design, DDD is not a pre-requresite for use.
Introducing a value …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After extract method or extract class introducing a value object is one
of the most powerful refactorings available. A value object encapsulates
a value or concept within your domain. While the term is more formally
known from Domain Driven Design, DDD is not a pre-requresite for use.
Introducing a value object can be applied to any code base.&lt;/p&gt;
&lt;p&gt;Some excellent examples of value objects would include &lt;code&gt;CustomerId&lt;/code&gt;,
&lt;code&gt;Money&lt;/code&gt;, &lt;code&gt;OrderId&lt;/code&gt; and &lt;code&gt;PhoneNumber&lt;/code&gt;. These could all be identified as
integers, strings or decimal numbers, but doing so would lead to a
series of downsides.&lt;/p&gt;
&lt;p&gt;Making use of primitive data types to express concepts within an
application is a code smell known as primitive obsession. Replacing
primitives with value objects is the solution to this smell.&lt;/p&gt;
&lt;h4&gt;Primitive Obsession&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Duplication will be thrown throughout the codebase. Both in the form
    of simple guard clauses, or core domain logic.&lt;/li&gt;
&lt;li&gt;More tests are required. This ties into the duplication above.&lt;/li&gt;
&lt;li&gt;Your domain lends itself towards an anaemic model, full of utility
    classes that operate upon state.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/e36d0ffc473d1dc12088.js"&gt;&lt;/script&gt;

&lt;p&gt;The implementation of &lt;code&gt;PersonalDetails&lt;/code&gt; would be straight forward to
begin with.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/5a37ae3fe12211d2b527.js"&gt;&lt;/script&gt;

&lt;p&gt;Over time areas of logic can slowly migrate and move towards the class.
In most IDE's, simply wrapping a primitive type as the first step can be
carried out in a few keystrokes.&lt;/p&gt;
&lt;p&gt;The constructor performs basic validation on a technical level. Once
complete we can carry out any domain logic. Likewise the behaviour
attached to this object (hidden for beravity) would include various
domain specific logic. For example, when changing surnames any leading
or trailing whitespace is removed.&lt;/p&gt;
&lt;p&gt;One recommendation would be to expose the underlying primitive. In this
example &lt;code&gt;ToString&lt;/code&gt; has been overridden to return the string value that
is being used. This should be a read only operation idealy, and enables
the object to play nicely with third parties. Such use cases for this
would be serialization, or writing the value to a persistent store.&lt;/p&gt;
&lt;p&gt;Equality (and hashcode in this case) should also be implemented. This is
because the nature of value objects allows them to be equal to other
instances that share the same value, despite being different references
in memory. The beauty of this is that value objects can be used as
needed, no need for injection or other patterns.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Removes duplication. Only the object in question will be the source
    of truth.&lt;/li&gt;
&lt;li&gt;Less tests need to be written. As the duplication has been removed,
    only one test per behaviour is required. Rather than duplicating
    checks for validation or formatting this can be contained to the
    object. As the rest of the system deals with our value object, we
    don't have to worry about dealing with an invalid representation.&lt;/li&gt;
&lt;li&gt;In statically typed languages you can lean on the compiler. It's
    impossible to supply anything other than PersonalDetails when we ask
    for an instance. Even for dynamic languages, the stack trace
    presented upon error would be far more useful than had a primitive
    type been provided.&lt;/li&gt;
&lt;li&gt;The surface area of mis-configuring arguments is smaller also.
    Previously we would accept two strings that are order dependant. Now
    this configuration has been reduced to a few areas.&lt;/li&gt;
&lt;li&gt;Using the example above, we can now rely on class pre-conditions to
    simplify our expectations when working with this type. Given any
    instance of &lt;code&gt;PersonalDetails&lt;/code&gt; we can be sure that the forename and
    surname are never null or empty, and that each personal details
    instance will have a forename of at least one character long. A
    simple string can never guarantee such conditions.&lt;/li&gt;
&lt;li&gt;Making value objects public generally makes sense. This provides an
    excellent seam for testing and integration.&lt;/li&gt;
&lt;li&gt;The introduction of a value object plays nicely with my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;three basic
    steps to code
    quality&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Consistency</title><link href="https://blog.shaunfinglas.co.uk/2015/02/consistency.html" rel="alternate"></link><published>2015-02-01T00:00:00+01:00</published><updated>2015-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-02-01:/2015/02/consistency.html</id><summary type="html">&lt;p&gt;Striving for consistency within a codebase is a &lt;strong&gt;good thing&lt;/strong&gt;. I'm very
much someone who believes in applying a consistent formatting style,
patterns and practices. However there are two sides to this view.&lt;/p&gt;
&lt;p&gt;One colleague used to hate different apps that used different
frameworks, styles and conventions. This is a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Striving for consistency within a codebase is a &lt;strong&gt;good thing&lt;/strong&gt;. I'm very
much someone who believes in applying a consistent formatting style,
patterns and practices. However there are two sides to this view.&lt;/p&gt;
&lt;p&gt;One colleague used to hate different apps that used different
frameworks, styles and conventions. This is a fair point, it made
switching between them harder. In their eyes, a change to the
development process should cascade across all applications.&lt;/p&gt;
&lt;p&gt;Another colleague used to state that without breaking consistency then
improvements and progress would never happen. An equally fair point.
However this lead to scenarios where some of the code would be in
differing states of consistency, or improvements were avoided because
they were too large to implement safely.&lt;/p&gt;
&lt;p&gt;Like most things in software development, there is &lt;strong&gt;rarely a true
answer&lt;/strong&gt;. The best of both worlds is to apply both concepts at varying
levels.&lt;/p&gt;
&lt;p&gt;Applying consistency at package/assembly/module/namespace level works
well from my experience. &lt;strong&gt;Different boundaries can have different
consistency rules&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This approach allows incremental evolution, but still keeps consistency
within a boundary. This enables both benefits of favouring consistency,
while still allowing the code to evolve over time.
&lt;a href="https://blog.shaunfinglas.co.uk/2014/11/ratcheting.html"&gt;Ratcheting&lt;/a&gt; can
be used to ensure future work is aligned consistently. Rather than big
bang implementation, you can perform larger, long term changes steadily.&lt;/p&gt;
&lt;p&gt;Remember; software development is like gardening, it takes time to see
the results sometimes and blindly applying a coding convention to
conform to consistency requires thought.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Guard Clauses and Assertions</title><link href="https://blog.shaunfinglas.co.uk/2015/02/guard-clauses-and-assertions.html" rel="alternate"></link><published>2015-02-01T00:00:00+01:00</published><updated>2015-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-02-01:/2015/02/guard-clauses-and-assertions.html</id><summary type="html">&lt;p&gt;Two simple techniques to increase code quality, resilience, and ease
debugging scenarios is to use guard clauses effectively and ensure that
assertions are used liberally.&lt;/p&gt;
&lt;h4&gt;Guard Clauses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Any public method should perform guard clauses to ensure pre
    conditions are met.&lt;/li&gt;
&lt;li&gt;Ensures the code's invariants are not broken.&lt;/li&gt;
&lt;li&gt;Throw exceptions, because …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Two simple techniques to increase code quality, resilience, and ease
debugging scenarios is to use guard clauses effectively and ensure that
assertions are used liberally.&lt;/p&gt;
&lt;h4&gt;Guard Clauses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Any public method should perform guard clauses to ensure pre
    conditions are met.&lt;/li&gt;
&lt;li&gt;Ensures the code's invariants are not broken.&lt;/li&gt;
&lt;li&gt;Throw exceptions, because these are exceptional issues.&lt;/li&gt;
&lt;li&gt;Developer and user assistance as it is possible for these clauses to
    fail at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/Finglas/5b784bd2782d1478fa40.js"&gt;&lt;/script&gt;

&lt;p&gt;Here we enforce that any &lt;code&gt;PersonalDetails&lt;/code&gt; instance has a forename and
surname. A forename must also be at least one character long. As long as
these conditions are met, we finally assign the values internally. Guard
clauses should also be used on dependencies that are services, checking
that a service is not a null instance for example.&lt;/p&gt;
&lt;h4&gt;Assertions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Used within private methods/functions where required.&lt;/li&gt;
&lt;li&gt;Should be used for situations that should never happen, e.g the
    presence of a bug or invalid scenario.&lt;/li&gt;
&lt;li&gt;Developer only assistance, the user should never see these ideally
    because automated/manual testing should have detected them.&lt;/li&gt;
&lt;li&gt;Usually removed for release builds, though open to debate, best to
    judge on context. Is it better for the program to crash and inform
    the user, or carry on in an invalid state?&lt;/li&gt;
&lt;li&gt;Great for documenting assumptions, e.g. code a level above ensures
    object is in a certain state.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/Finglas/2a59051e9c3d566185f1.js"&gt;&lt;/script&gt;

&lt;p&gt;While this method is private, we have essentially stated that we take no
responsibility for validating that a name has been provided. This is the
concern of another part of the code (the constructor in this case).
However this simple assert statement means that if the method is used in
a different manner, it will fail spectacularly at runtime. This will
point at the incorrect use of the method and allow the developer to make
the required changes.&lt;/p&gt;
&lt;h5&gt;Summary&lt;/h5&gt;
&lt;p&gt;Code quality will improve because less invalid scenarios should be
allowed to happen. Due to clauses and assertions always being present
they go hand in hand with automated tests, often catching scenarios that
automated tests may miss. Debugging is easier because the stack trace
points you at the source of the problem, rather than an initial problem
hidden in layers of exceptions caused by invalid state. While applying
clauses and assertions increases lines of code, they are easy to
implement, and the return on investment is high. There are no excuses
not to use them.&lt;/p&gt;</content><category term="code-quality"></category><category term="tutorial"></category></entry><entry><title>Abstract Data Use Not Data Access</title><link href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html" rel="alternate"></link><published>2015-01-01T00:00:00+01:00</published><updated>2015-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-01-01:/2015/01/abstract-data-use-not-data-access.html</id><summary type="html">&lt;p&gt;Common data access abstractions I've come across and been guilty of
implementing myself are the likes of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IDatabase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPersistentStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDataStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IRepository&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is, these are not really abstractions. If anything they add
an extra layer of indirection. One such benefit of this level of
indirection is each concrete …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Common data access abstractions I've come across and been guilty of
implementing myself are the likes of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IDatabase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPersistentStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDataStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IRepository&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is, these are not really abstractions. If anything they add
an extra layer of indirection. One such benefit of this level of
indirection is each concrete implementation can be substituted. This
makes testing easy. Other than this, such generic solutions introduce a
&lt;strong&gt;whole host of problems&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Problems&lt;/h4&gt;
&lt;h5&gt;Abstraction&lt;/h5&gt;
&lt;p&gt;Such examples are said to be at the &lt;a href="http://blog.codinghorror.com/the-wrong-level-of-abstraction/"&gt;wrong level of
abstraction&lt;/a&gt;.
This indirection &lt;strong&gt;forces&lt;/strong&gt; developers to work at the wrong level of
abstraction. For example, a controller has no right to be directly
querying your data store directly. If the same query is required
somewhere else you introduce duplication.&lt;/p&gt;
&lt;h5&gt;Big Bang Upgrade&lt;/h5&gt;
&lt;p&gt;Given such indirection offers a poor abstraction, upgrading to use a
different implementation is tricky. If we assume one hundred usages of
&lt;code&gt;IDatabase&lt;/code&gt;, all of these code paths need to be migrated and tested.
This can be such a huge undertaking that upgrades are often left as
technical debt, &lt;strong&gt;never to be fulfilled&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;Leaky Abstractions&lt;/h5&gt;
&lt;p&gt;In a similar manner to the previous point, these abstractions are poor.
&lt;a href="http://www.joelonsoftware.com/Articles/LeakyAbstractions.html"&gt;They leak implementation
details&lt;/a&gt;.
Due to this they &lt;strong&gt;cannot be considered as valid abstractions&lt;/strong&gt;.
Consider a SQL implementation of &lt;code&gt;IDatabase&lt;/code&gt;, we may have a &lt;code&gt;FindById&lt;/code&gt;
method that takes an integer as the Id. If we wished to update to a
NoSQL solution the lack of a primary key causes problems. &lt;code&gt;FindById&lt;/code&gt; for
the NoSQL implementation may require a Guid. There interface is now
broken.&lt;/p&gt;
&lt;h5&gt;Interface Bloat&lt;/h5&gt;
&lt;p&gt;Another downside of coding at the wrong level of abstraction is that the
amount of use cases increase constantly. What might begin as a humble
interface consisting of a handful of query methods soon becomes a
&lt;strong&gt;dumping ground&lt;/strong&gt; for all sorts of exotic behaviour - specific to niche
use cases.&lt;/p&gt;
&lt;h5&gt;Lowest Common Denominator&lt;/h5&gt;
&lt;p&gt;Different data access providers have different capabilities, but in
order to stay "decoupled" only core functionality present in all
providers can be used. This leads to &lt;strong&gt;dull, limited interfaces&lt;/strong&gt;
consisting of standard data access functionality. The limited feature
set can mean a poor integration. Why avoid the advanced features your
library offers?&lt;/p&gt;
&lt;p&gt;A poor abstraction that exhibits the problems above may look like this.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/2ad697bce48b01a17a8f.js"&gt;&lt;/script&gt;

&lt;p&gt;To retrieve a user based on the Id.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/320fa71003931d994099.js"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;If we abstract how the data is used and not how the data access is
performed we can avoid these pitfalls. By staying at the right level of
abstraction and not leaking implementation details we end up with a
different looking interface.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a8183a4b9accc5fb4862.js"&gt;&lt;/script&gt;

&lt;p&gt;The concrete implementation in this example will be a SQL implementation
using &lt;a href="https://github.com/StackExchange/dapper-dot-net"&gt;Dapper.NET&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/c36fd801f48bb8e6588c.js"&gt;&lt;/script&gt;

&lt;p&gt;The usage is similar.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/cec4daf23ef4aea11a96.js"&gt;&lt;/script&gt;

&lt;p&gt;The key point here is that we solve the problems of the "generic"
solution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IUserQuery&lt;/code&gt; is a better abstraction, it allows selective upgrades.
    This use case will have limited use, meaning updating a handful of
    references is easier than updating every data access component in
    one go.&lt;/li&gt;
&lt;li&gt;The fact we use a SQL database as our store is hidden, no details
    leak. &lt;code&gt;UserId&lt;/code&gt; encapsulates how we identify users, if we were to
    switch to a NoSQL store our consumers would be unaware.&lt;/li&gt;
&lt;li&gt;One of the biggest benefits is the ability to use our third party
    library to its fullest. Rather than wrapping Dapper we can make use
    of it directly, making use of any special features it offers, rather
    than conforming to a limited subset of an API.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5&gt;Aren't We Introducing Lots of Classes?&lt;/h5&gt;
&lt;p&gt;More, but not "lots". However this is a common complaint when the above
solution is proposed, though given the vast benefits included this trade
off is certainly worth it. Additionally, each query or repository that
is implemented in this manner is easier to develop and test due to
closer adherence to the Single Responsibility Principle.&lt;/p&gt;
&lt;h5&gt;How Do We Unit Test SqlUserQuery?&lt;/h5&gt;
&lt;p&gt;You don't. In this example we make use of the third party library
directly. The benefits discussed prior justify this, though it means
unit testing is not possible. Therefore you should apply integration
testing against a real data store. The rest of the system will be coded
against the abstraction, so unit tests can be applied as normal here.
Any attempt to "abstract" or wrap the third party will remove many of
the benefits of this solution, so don't worry about it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For a great discussion on this topic, check out a talk by &lt;a href="http://ayende.com/blog/166594/ravendb-conf-videos-abstracting-ravendb-dont-do-it"&gt;Kijana
Woodard&lt;/a&gt;
for more examples.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Caching</title><link href="https://blog.shaunfinglas.co.uk/2015/01/caching.html" rel="alternate"></link><published>2015-01-01T00:00:00+01:00</published><updated>2015-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-01-01:/2015/01/caching.html</id><summary type="html">&lt;p&gt;The naive approach to implement caching is to just store everything in
an in memory collection such as a hashtable. After all it works on my
machine.&lt;/p&gt;
&lt;p&gt;I've worked on systems in the past that used this technique but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bring in two processes and this falls apart&lt;/li&gt;
&lt;li&gt;No Time to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The naive approach to implement caching is to just store everything in
an in memory collection such as a hashtable. After all it works on my
machine.&lt;/p&gt;
&lt;p&gt;I've worked on systems in the past that used this technique but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bring in two processes and this falls apart&lt;/li&gt;
&lt;li&gt;No Time to Live (TTL)&lt;/li&gt;
&lt;li&gt;No cache eviction, memory will grow until it crashes the process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This sort of caching meant the system needed daily restarts due to each
worker process starting to eat up more and more RAM. At the time I
didn't realise this was the problem as to why daily restarts were
required. These were automated so the team just sort of forgot about the
problem after a while. This never felt right.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Improper use of caching is the major cause of memory leaks, which
turn into &lt;strong&gt;horrors like daily server restarts&lt;/strong&gt;" - &lt;a href="https://twitter.com/mtnygard"&gt;@mtnygard in
Release It!&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scale this system up, and daily becomes twice daily and so on. In a
global market where software shouldn't be constrained by time zones or
"working hours" this is wrong.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;p&gt;There are numerous easy ways to solve these problems depending on the
application in question.&lt;/p&gt;
&lt;h5&gt;Don't Roll your Own, Try a Third Party&lt;/h5&gt;
&lt;p&gt;Easy. Just use an off the shelf solution that solves the problems above
plus includes a whole host of additional features.&lt;/p&gt;
&lt;h5&gt;Use your Standard Library&lt;/h5&gt;
&lt;p&gt;For example .NET includes caching functionality within the
&lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.caching%28v=vs.110%29.aspx"&gt;System.Runtime.Caching&lt;/a&gt;
namespace. While there are limitations to this, it will work for some
scenarios and solves some of the problems above.&lt;/p&gt;
&lt;h5&gt;Soft References&lt;/h5&gt;
&lt;p&gt;I've overlooked &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/lang/ref/SoftReference.html"&gt;soft
references&lt;/a&gt;
in the past but for caching they can be incredibly useful. Use soft
references for anything that isn't important or that can be
recalculated. An example would be content displayed within an MVC view
using the web servers session. Here if each item stored is a weak
reference we introduce some benefits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stops your web server running of of memory - references will be
    reclaimed if memory starts to become a bottleneck.&lt;/li&gt;
&lt;li&gt;Greater scalability with the same amount of memory - great for a
    sudden spike in traffic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A web server's session being full of references that won't expire for a
set period is a common cause of downtime. If soft references are used
all we need to do is perform a simple conditional check prior to
retrieval from the session. Different languages have similar features,
e.g. &lt;a href="http://msdn.microsoft.com/en-us/library/system.weakreference%28v=vs.110%29.aspx"&gt;Weak
References&lt;/a&gt;
in .NET.&lt;/p&gt;
&lt;h5&gt;Pre-Computation&lt;/h5&gt;
&lt;p&gt;Caching isn't always the best solution, in some cases pre-computation
can be much easier and offer better performance. In other words at least
some users will experience a slow response until the cache is warm,
other techniques can be used to avoid this completely. I will expand on
pre-computation in a future post.&lt;/p&gt;
&lt;h4&gt;Reference&lt;/h4&gt;
&lt;p&gt;More information can be found in the excellent book &lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release
It!&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Recommended Reading List 2014</title><link href="https://blog.shaunfinglas.co.uk/2015/01/recommended-reading-list-2014.html" rel="alternate"></link><published>2015-01-01T00:00:00+01:00</published><updated>2015-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-01-01:/2015/01/recommended-reading-list-2014.html</id><summary type="html">&lt;p&gt;I've read some great books in the last twelve months, here they are in
no particular order.&lt;/p&gt;
&lt;h4&gt;Process&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity/dp/0749922648/"&gt;Getting Things
    Done&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/ReWork-Change-Way-Work-Forever/dp/0091929784"&gt;Rework - Change the Way You Work
    Forever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Soft-Skills-software-developers-manual/dp/1617292397"&gt;Soft Skills - The Software Developer's Life
    Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Release-It-Production-Ready-Pragmatic-Programmers/dp/0978739213"&gt;Release
    It!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577"&gt;Implementing Domain Driven
    Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829"&gt;REST in
    Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742"&gt;Javascript the Good
    Parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Core-HTML5-Canvas-Animation-Development/dp/0132761610"&gt;Core …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I've read some great books in the last twelve months, here they are in
no particular order.&lt;/p&gt;
&lt;h4&gt;Process&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity/dp/0749922648/"&gt;Getting Things
    Done&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/ReWork-Change-Way-Work-Forever/dp/0091929784"&gt;Rework - Change the Way You Work
    Forever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Soft-Skills-software-developers-manual/dp/1617292397"&gt;Soft Skills - The Software Developer's Life
    Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Release-It-Production-Ready-Pragmatic-Programmers/dp/0978739213"&gt;Release
    It!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577"&gt;Implementing Domain Driven
    Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829"&gt;REST in
    Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742"&gt;Javascript the Good
    Parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Core-HTML5-Canvas-Animation-Development/dp/0132761610"&gt;Core HTML5
    Canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Building-Microservices-Sam-Newman/dp/1491950358"&gt;Building Micro
    Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Learning-NServiceBus-David-Boike/dp/1782166343"&gt;Learning
    NServiceBus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="reading"></category></entry><entry><title>Why Technical Blogging?</title><link href="https://blog.shaunfinglas.co.uk/2015/01/why-technical-blogging.html" rel="alternate"></link><published>2015-01-01T00:00:00+01:00</published><updated>2015-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2015-01-01:/2015/01/why-technical-blogging.html</id><summary type="html">&lt;p&gt;Given this is my fifth year of blogging I figured it would be worth
while answering "&lt;em&gt;Why bother with technical blogging?&lt;/em&gt;".&lt;/p&gt;
&lt;h4&gt;Get Writing&lt;/h4&gt;
&lt;p&gt;Write about anything. Just get started, providing it fits your core
focus. This blog focuses on programming and software development related
topics, so anything that falls within …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Given this is my fifth year of blogging I figured it would be worth
while answering "&lt;em&gt;Why bother with technical blogging?&lt;/em&gt;".&lt;/p&gt;
&lt;h4&gt;Get Writing&lt;/h4&gt;
&lt;p&gt;Write about anything. Just get started, providing it fits your core
focus. This blog focuses on programming and software development related
topics, so anything that falls within this category is fair game. Take a
single idea and from this one blog post you can generate many more
ideas. This is where my &lt;a href="https://blog.shaunfinglas.co.uk/p/upcoming.html"&gt;upcoming
list&lt;/a&gt; comes from. A
single post can spawn many others and the process will repeat itself.&lt;/p&gt;
&lt;p&gt;Honest posts, that focus on your experiences tend to be the most well
received. Quality over quantity also factors. I try to focus posts,
rather than going for length or in depth topics. My early posts are very
rough around the edges, they will continue to improve as time goes by.
Ultimately the more you blog, the better you'll become at it.&lt;/p&gt;
&lt;h4&gt;Schedule&lt;/h4&gt;
&lt;p&gt;Finding the time to create posts is quite difficult. Making and sticking
to a schedule can help immensely though. Since adopting a weekly
schedule, this has lead to a steady stream of posts. In turn these posts
lead to a steady stream of views. Being completely honest, getting
started was hard. Following a schedule and using the advice in this post
can help though. Initially you may spend a long time working on content,
but overtime this will reduce.&lt;/p&gt;
&lt;h4&gt;Views&lt;/h4&gt;
&lt;p&gt;The best advice is to ignore view counts. High view counts make you feel
great, but there is much more to writing content than simply generating
stats. Your highest viewed posts may very well surprise you, likewise
content you feel should be seen by everyone can struggle. Rather than
views, interactions are much more rewarding. Any content that gets a
retweet, reply or email is much more satisfying.&lt;/p&gt;
&lt;h4&gt;People&lt;/h4&gt;
&lt;p&gt;In the area of technical blogging the majority of interactions are good
natured. People are overwhelmingly nice in most cases. Twitter tends to
yield positive comments or retweets partly due to the use of real names
in most cases. Article submission sites can be a mixed bag, but for any
negativity the view count to comment ratio will balance out. A lot of
interesting followers are discovered thanks to this blog.&lt;/p&gt;
&lt;h4&gt;Benefit Yourself&lt;/h4&gt;
&lt;p&gt;Regular posts allows you to practice writing, which is a surprisingly
enjoyable activity when you enjoy the content.&lt;/p&gt;
&lt;p&gt;I learn a lot from doing, but I also find writing down what I have
learned or discovered is incredibly valuable. Having an archive of
content that I find important is a huge help. If you've learned
something new? Blog about it. If you've talked about something relevant?
Blog about it. This helps with the generation of new content.&lt;/p&gt;
&lt;p&gt;Having an archive of posts is great for reflection. Looking back over
old posts and confirming whether or not I still agree helps with
learning. Have I discovered anything new since? Just the act of
re-reading and refreshing myself with a concept can be useful. This
tactic combined with a &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/developer-diaries.html"&gt;developer
diary&lt;/a&gt;
has proved a powerful combination.&lt;/p&gt;
&lt;h4&gt;Career Benefits&lt;/h4&gt;
&lt;p&gt;Additionally to personal benefits, regularly blogging has had a big
impact on my career. It has helped me during job interviews as it helps
provide evidence for my claims. Most surprisingly eighteen months ago I
was offered the chance to help write a book. Unfortunately due to a new
house and job I was forced to decline the offer at the time, however
without technical blogging and other writing there is no chance I would
have had this opportunity.&lt;/p&gt;
&lt;p&gt;Within the last couple of weeks I have received contacts from numerous
recruiters. As part of these there was a personalised email, which not
only detailed my blog but clearly saw other online contributions. This
recruiter went above and beyond the norm. While I never worked with
them, this polite and encouraging email is yet another benefit of
technical blogging.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The book &lt;a href="https://pragprog.com/book/actb/technical-blogging"&gt;Techinical
Blogging&lt;/a&gt; by
&lt;a href="https://twitter.com/acangiano"&gt;@acangiano&lt;/a&gt; is a great starting place
for more information and advice.&lt;/p&gt;</content><category term="blogging"></category><category term="retro"></category></entry><entry><title>A Unit is Not Always a Method or Class</title><link href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html" rel="alternate"></link><published>2014-12-01T00:00:00+01:00</published><updated>2014-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-12-01:/2014/12/a-unit-is-not-always-method-or-class.html</id><summary type="html">&lt;p&gt;Part three of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via TDD
series&lt;/a&gt;.
The most important concept when coupled with the previous two points -
not every unit will relate to a method or class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Stop Making Everything
    Public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;Limit the Amount of Dependencies you
    Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Most introductions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Part three of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via TDD
series&lt;/a&gt;.
The most important concept when coupled with the previous two points -
not every unit will relate to a method or class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Stop Making Everything
    Public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;Limit the Amount of Dependencies you
    Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Most introductions into TDD use simple examples. Even the excellent &lt;a href="http://www.amazon.co.uk/Driven-Development-Addison-Wesley-Signature-Series/dp/0321146530"&gt;TDD
by
Example&lt;/a&gt;
uses a value object in terms of Domain Driven Design. Most introductory
articles on the Internet suffer the same fate. While these are great for
demonstrations, they don't relate to what most developers need to code
on a day to day basis. It's around this point where people proclaim that
the benefit of automated testing (even after the fact) is a waste of
time.&lt;/p&gt;
&lt;p&gt;One of my biggest &lt;a href="http://www.stevefenton.co.uk/Content/Blog/Date/201305/Blog/My-Unit-Testing-Epiphany/"&gt;revelations with
TDD&lt;/a&gt;
was that each unit does not need to equate to a single method or class.
For a long time I followed what others did. Each collaborator would be
injected and replaced with a test double. Each class would have a
corresponding test file. However as I have &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;stated in the introduction,
this leads to
problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We should test units of behaviour, not units of implementation. Given we
know we should be using as &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;few dependencies as
possible&lt;/a&gt;,
and we know we should &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;limit
visibility&lt;/a&gt;,
each test should be simple to write. As part of the refactor step if we
choose to introduce a new class that is fine. There is no need in most
cases to extract this and introduce a test double. Every time this is
done we tie the test closer and closer to the implementation details.
Every class having a corresponding test file is wrong.&lt;/p&gt;
&lt;p&gt;By testing a unit of behaviour we can chop and change the internals of
the system under test without breaking anything. This allows the
merciless refactoring automated testing advertises as a benefit.&lt;/p&gt;
&lt;h5&gt;Aren't you describing integration testing?&lt;/h5&gt;
&lt;p&gt;No. &lt;a href="https://blog.shaunfinglas.co.uk/2012/05/achieving-more-isolated-unit-testing.html"&gt;Tests should be isolated as I've documented
before&lt;/a&gt;,
but there is nothing stating they should be isolated from the components
they work with. If we isolate at the method or class level we make
testing and refactoring much harder. Due to the term "unit" being so
closely linked with a class or method, I like the &lt;a href="http://www.amazon.co.uk/Google-Tests-Software-James-Whittaker/dp/0321803027"&gt;naming convention
Google
use&lt;/a&gt;
for their tests - small, medium and large.&lt;/p&gt;
&lt;p&gt;Additionally an excellent &lt;a href="http://martinfowler.com/bliki/UnitTest.html"&gt;article from Martin Fowler on the subject of
unit testing&lt;/a&gt; introduces
two new terms, solitary and sociable tests. Neither one style alone
works so the type of test you write should be based on context.
Unfortunately the industry seems to be fixated on solitary testing.&lt;/p&gt;
&lt;h4&gt;Sociable Tests&lt;/h4&gt;
&lt;p&gt;Work great at the aggregate root level. Does the object do what we
expect it to? It can use zero or many collaborators behind the scenes
but these are implementation details. Here we would limit the use of
test doubles as much as possible but still have fast, isolated tests. As
generalization - most automated testing should fall into this category
as the core domain of your application is likely to have the most amount
of logic present.&lt;/p&gt;
&lt;h4&gt;Solitary Tests&lt;/h4&gt;
&lt;p&gt;Useful at the adapter or system edge. For example, does the controller
invoke the correct application service? We don't care how it works
behind the scenes. Anything beyond this service would be a test double.
These sort of tests are more closely coupled to implementation details
so should be used sparingly.&lt;/p&gt;
&lt;h5&gt;Doesn't this lead to huge tests?&lt;/h5&gt;
&lt;p&gt;No, not really. As you will limit implementation details leaking into
the public API the use of test doubles will reduce. This will shrink
test setup and in most cases improve readability. Worrying about large
tests shouldn't be a problem with this style of testing. You will not
reduce the amount of tests required, however you will find them to be
much more stable and resilient than before.&lt;/p&gt;</content><category term="3-steps-code-quality"></category><category term="tdd"></category></entry><entry><title>Factory Obsession</title><link href="https://blog.shaunfinglas.co.uk/2014/12/factory-obsession.html" rel="alternate"></link><published>2014-12-01T00:00:00+01:00</published><updated>2014-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-12-01:/2014/12/factory-obsession.html</id><summary type="html">&lt;p&gt;I have noticed a pattern over the years with developers of which I will
refer to as factory obsession. Everything is a factory or builder
object. To some, the use of &lt;code&gt;new&lt;/code&gt; is &lt;strong&gt;banned&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Consider a object that is responsible for some business logic and
finally saves the result to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have noticed a pattern over the years with developers of which I will
refer to as factory obsession. Everything is a factory or builder
object. To some, the use of &lt;code&gt;new&lt;/code&gt; is &lt;strong&gt;banned&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Consider a object that is responsible for some business logic and
finally saves the result to a persistent store.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/8f4f9dba2320e3d5ad57.js"&gt;&lt;/script&gt;

&lt;p&gt;Message here is a value object, however the new can cause an odd fear
within developers. Therefore a factory is required. Or is it? How can we
test the repository is updated with the new message without reference
equality?&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/4b43d5af771b9d13701c.js"&gt;&lt;/script&gt;

&lt;p&gt;An example test in C#, using the Mock framework with this newly
introduced factory would look like:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/44cc9e70e2f9f5b47528.js"&gt;&lt;/script&gt;

&lt;p&gt;This fear of &lt;code&gt;new&lt;/code&gt; is wrong.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instantiating value types is a good thing.&lt;/li&gt;
&lt;li&gt;Instantiating entities is a good thing.&lt;/li&gt;
&lt;li&gt;Instantiating services can depend - if the service is expensive we
    don't want to create lots of instances on a whim.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here the factory offers nothing but a more strongly coupled solution.&lt;/p&gt;
&lt;p&gt;If we ignore the factory the test becomes easier to write. To do this
equality should be correctly implemented upon the message value type. I
have questioned this in the past but for correct Domain Driven Design
(DDD) semantics this is a good thing to follow.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/91f346d41ba5055891c4.js"&gt;&lt;/script&gt;

&lt;p&gt;We can take this further though. If we ditch the factory idea all
together and replace the repository with a fake implementation we can
have an even cleaner test fixture. You would still need equality but the
design retains its flexibility.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a8513ecc8a7790d12ee2.js"&gt;&lt;/script&gt;

&lt;p&gt;Factories have their place, like all design patterns, however they
should be introduced as part of the refactor step in most cases. Hiding
the new keyword is not a goal. The fact that mocking frameworks default
to reference equality shouldn't force you to make a more complicated or
coupled solution to a problem.&lt;/p&gt;</content><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Limit the Amount of Dependencies you Use</title><link href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html" rel="alternate"></link><published>2014-12-01T00:00:00+01:00</published><updated>2014-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-12-01:/2014/12/limit-amount-of-dependencies-you-use.html</id><summary type="html">&lt;p&gt;Part two of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via
TDD&lt;/a&gt;
series and ties very closely into step one, limiting the visibility of
your classes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Stop Making Everything
    Public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;A Unit is Not Always a Method or
    Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The more dependencies you use the more your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Part two of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via
TDD&lt;/a&gt;
series and ties very closely into step one, limiting the visibility of
your classes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Stop Making Everything
    Public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;A Unit is Not Always a Method or
    Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The more dependencies you use the more your tests are coupled to
implementation.&lt;/p&gt;
&lt;p&gt;Consider the constructor below.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/78bf9d35ef691f642d29.js"&gt;&lt;/script&gt;

&lt;p&gt;Code like this is common and difficult to work with. Each dependency you
inject requires a mock, stub or fake when writing tests. This couples
the implementation to the test despite the use of interfaces or abstract
base classes.&lt;/p&gt;
&lt;p&gt;Every public dependency here increases the resistance for change. If I
was to remove the builder and replace with some equivalent code to
construct a &lt;code&gt;Bar&lt;/code&gt; instance, the test would fail despite being
functionally equivalent. This is wrong.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.ploeh.dk/2011/02/28/Interfacesareaccessmodifiers/"&gt;A constructor is part of the public API of an object even though this
is not detailed as part of
interfaces&lt;/a&gt;
in languages such as C#/Java. Every collaborator that is provided by a
constructor should have a reason for being exposed as part of the the
public API.&lt;/p&gt;
&lt;h4&gt;What Are Good Dependencies?&lt;/h4&gt;
&lt;p&gt;Good dependencies are things that are out of your control or process
such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Databases (repositories, queries)&lt;/li&gt;
&lt;li&gt;Web Services&lt;/li&gt;
&lt;li&gt;Third Parties&lt;/li&gt;
&lt;li&gt;Strategies (anything that needs to change dynamically)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As part three of the series will detail - isolate your tests from these
sorts of dependencies, don't isolate your code from itself.&lt;/p&gt;
&lt;h5&gt;Doesn't this mean you end up with God classes?&lt;/h5&gt;
&lt;p&gt;No. As step one detailed - small, well focused classes are a good thing.
They just should remain as implementation details.&lt;/p&gt;</content><category term="3-steps-code-quality"></category><category term="tdd"></category></entry><entry><title>Pair Programming vs Pairing</title><link href="https://blog.shaunfinglas.co.uk/2014/12/pair-programming-vs-pairing.html" rel="alternate"></link><published>2014-12-01T00:00:00+01:00</published><updated>2014-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-12-01:/2014/12/pair-programming-vs-pairing.html</id><summary type="html">&lt;p&gt;I'm a fan of pair programming. I owe a lot of this practice to my
improvement early on in my career. I define pair programming as two
developers working on a task using one or more machines at the same
time.&lt;/p&gt;
&lt;p&gt;I have had some excellent pair programming sessions. I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm a fan of pair programming. I owe a lot of this practice to my
improvement early on in my career. I define pair programming as two
developers working on a task using one or more machines at the same
time.&lt;/p&gt;
&lt;p&gt;I have had some excellent pair programming sessions. I can even remember
some of them in great detail. Here I went away learning something new,
solved a difficult problem, or just generally had a fun time.&lt;/p&gt;
&lt;p&gt;On the other hand I've also had some awful experiences, which
unfortunately I can still remember. Here my partner wouldn't play the
role of the driver or navigator correctly, wouldn't be engaged, or just
generally didn't get into the flow of pair programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Team's mandating 100% pair programming is bad&lt;/strong&gt;. Some tasks don't need
two developers to be working on them concurrently. Here pairing should
be used.&lt;/p&gt;
&lt;p&gt;Pairing is two developers working together to solve a task, but doing so
separately. During pairing regularly communication, design sessions and
feedback should be used. You can even join up to pair program on complex
areas. The difference is that unlike pair programming you don't need to
have two developers working on the same part of a task at all times.
&lt;strong&gt;Pair programming and pairing are two very distinct concepts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The key takeaway here is to know when to use pairing over pair
programming and vice versa. Both have their merits and should be applied
in the correct context.&lt;/p&gt;</content><category term="developers"></category><category term="retro"></category></entry><entry><title>Stop Making Everything Public</title><link href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html" rel="alternate"></link><published>2014-12-01T00:00:00+01:00</published><updated>2014-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-12-01:/2014/12/stop-making-everything-public.html</id><summary type="html">&lt;p&gt;Part one of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via TDD
series&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;Limit the Amount of Dependencies you
    Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;A Unit is Not Always a Method or
    Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;We always default to public class when creating a new class. Why? The
concept of visibility in OO …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Part one of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via TDD
series&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;Limit the Amount of Dependencies you
    Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;A Unit is Not Always a Method or
    Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;We always default to public class when creating a new class. Why? The
concept of visibility in OO languages appears very early on in
programming books, yet more often than not most of the classes we create
default to public visibility.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/simonbrown"&gt;@simonbrown&lt;/a&gt; stated that each time you
make something public you need to make a donation to charity. In other
words we should think more about why the class we are making should be
visible to everyone. I really like this idea that the use of the public
keyword should be a well thought out decision.&lt;/p&gt;
&lt;p&gt;Server side development has a part to play in the lack of concern given
to visibility issues. Library or framework developers on the other hand
must carefully consider what is part of the public API. Any changes made
after are considered breaking and require careful consideration. Yet in
the land of server side development this is see as a non issue. This is
wrong. If we treat our tests as consumers of our public API, constantly
updating them or modifying them should be a warning symbol.&lt;/p&gt;
&lt;p&gt;Use internal or private classes for details and public classes for your
API. The beauty of this is that TDD drives your public API, which should
be fairly stable. Internally however you want the ability to refactor
without a suite of tests breaking, otherwise what is the point of
writing automated tests?&lt;/p&gt;
&lt;p&gt;Implementation details are introduced as part of the refactor step.
Ideally they should never be introduced without a passing test in place,
as previously the simplest possible thing should have been done.&lt;/p&gt;
&lt;h4&gt;What Should be Public Then?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Application services (use cases) that adapters talk to.&lt;/li&gt;
&lt;li&gt;Adapters - controllers, console application, presentation layer.&lt;/li&gt;
&lt;li&gt;Domain concepts - money or customer for example&lt;/li&gt;
&lt;li&gt;Strategies - things you need to inject, repositories, third parties&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Doesn't this lead to god classes?&lt;/h5&gt;
&lt;p&gt;No. As part of the TDD cycle, when refactoring you can extract
implementation details. There is no reason why the public types should
suffer.&lt;/p&gt;
&lt;h5&gt;Doesn't this lead to large tests on the public types?&lt;/h5&gt;
&lt;p&gt;No. You'll use less test doubles (stubs, mocks, fakes) and in turn
reduce setup. For any logic that appears to be painful or common you can
introduce domain concepts which can and should be public. The tests can
be wrote at this level then. Just find the right test seam.&lt;/p&gt;
&lt;h5&gt;What is the benefit?&lt;/h5&gt;
&lt;p&gt;The ability to switch implementation details without breaking public
functionality. A whole world of refactoring options are available,
inline method, extract method, extract class, inline class, replace with
library and so forth. As long as the tests pass, you can be confident.&lt;/p&gt;</content><category term="3-steps-code-quality"></category><category term="tdd"></category></entry><entry><title>Three Steps to Code Quality via TDD</title><link href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html" rel="alternate"></link><published>2014-12-01T00:00:00+01:00</published><updated>2014-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-12-01:/2014/12/three-steps-to-code-quality-via-tdd.html</id><summary type="html">&lt;p&gt;Common complaints and problems that I've both encountered and hear other
developers raise when it comes to the practice of Test Driven
Development are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impossible to refactor without all the tests breaking&lt;/li&gt;
&lt;li&gt;Minor changes require hours of changes to test code&lt;/li&gt;
&lt;li&gt;Test setup is huge, slow to write and difficult …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Common complaints and problems that I've both encountered and hear other
developers raise when it comes to the practice of Test Driven
Development are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impossible to refactor without all the tests breaking&lt;/li&gt;
&lt;li&gt;Minor changes require hours of changes to test code&lt;/li&gt;
&lt;li&gt;Test setup is huge, slow to write and difficult to understand&lt;/li&gt;
&lt;li&gt;The use of test doubles (mocks, stubs and fakes is confusing)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over the next three posts I will demonstrate three easy steps that can
resolve the problems above. In turn this will allow developers to gain
one of the benefits that TDD promises - the ability to refactor your
code mercifully in order to improve code quality.&lt;/p&gt;
&lt;h4&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Stop Making Everything
    Public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;Limit the Amount of Dependencies you
    Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;A Unit is Not Always a Method or
    Class&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Code quality is a tricky subject and highly subjective, however if you
follow the three guidelines above you should have the ability to
radically change implementation details and therefore improve code
quality when needed.&lt;/p&gt;</content><category term="3-steps-code-quality"></category><category term="tdd"></category></entry><entry><title>Dependency Injection (DI) Containers</title><link href="https://blog.shaunfinglas.co.uk/2014/11/dependency-injection-di-containers.html" rel="alternate"></link><published>2014-11-01T00:00:00+01:00</published><updated>2014-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-11-01:/2014/11/dependency-injection-di-containers.html</id><summary type="html">&lt;h2&gt;Strengths&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;One place for configuration&lt;/dt&gt;
&lt;dd&gt;Rather than scattered through out the system. Most DI containers
have some sort of "module" system where you group associated
components together.&lt;/dd&gt;
&lt;dt&gt;Scoping&lt;/dt&gt;
&lt;dd&gt;Different types of lifestyle can be achieved. Per request, per
thread, singleton and others. Usually other frameworks have the
ability to plug …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;h2&gt;Strengths&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;One place for configuration&lt;/dt&gt;
&lt;dd&gt;Rather than scattered through out the system. Most DI containers
have some sort of "module" system where you group associated
components together.&lt;/dd&gt;
&lt;dt&gt;Scoping&lt;/dt&gt;
&lt;dd&gt;Different types of lifestyle can be achieved. Per request, per
thread, singleton and others. Usually other frameworks have the
ability to plug into these containers, meaning such features
integrate nicely.&lt;/dd&gt;
&lt;dt&gt;Feature rich&lt;/dt&gt;
&lt;dd&gt;Included along with the basic DI components is usually a large
amount of additional features which may or may not be needed.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr&gt;
&lt;h2&gt;Weaknesses&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Heavyweight&lt;/dt&gt;
&lt;dd&gt;Usually in the form of frameworks or libraries. DI is a simple
concept, but such containers can make getting to grips with it
tremendously difficult.&lt;/dd&gt;
&lt;dt&gt;Config&lt;/dt&gt;
&lt;dd&gt;Configuration can be difficult. Rather than just applying DI you
need to learn the tooling. XML configuration has widely fell out of
favour, but even code based configurations can be costly to setup.&lt;/dd&gt;
&lt;dt&gt;Runtime errors&lt;/dt&gt;
&lt;dd&gt;Any errors that might have occurred at compile time (in a static
language) now become runtime errors. Circular references are easily
introduced if you are not careful. Made a mistake during
configuration? The system will be out of action. If you're lucky the
stacktrace can point you in the right direction, but usually these
are vague and/or confusing.&lt;/dd&gt;
&lt;dt&gt;Magic&lt;/dt&gt;
&lt;dd&gt;With the container in charge you lose control of what should be an
easy part of your development process. The more convention based
configuration you apply, the more chance things can go wrong. Simple
changes such as multiple implementations of an interface can prove
difficult to configure without breaking previous conventions. Much
of the time adding a new class to the system feels risky - you won't
know until runtime if you've got it working.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr&gt;
&lt;h2&gt;Alternatives&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;KISS&lt;/dt&gt;
&lt;dd&gt;Keep your dependency wiring at your application root - most likely
main. This is my preferred, default approach to begin with.&lt;/dd&gt;
&lt;/dl&gt;
&lt;script src="https://gist.github.com/Finglas/db42de9f16000e638315.js"&gt;&lt;/script&gt;

&lt;dl&gt;
&lt;dt&gt;KISS - Modules&lt;/dt&gt;
&lt;dd&gt;If this configuration starts to get out of hand - use modules. Need
to modify how the kitchen is built? Just open up KitchenModule.cs.
With direct access to the references of these dependencies you can
control scoping. For example you can re-use the same kitchen
instance between house instances.&lt;/dd&gt;
&lt;/dl&gt;
&lt;script src="https://gist.github.com/Finglas/f93f595960e8158ba8f2.js"&gt;&lt;/script&gt;

&lt;dl&gt;
&lt;dt&gt;Refacator&lt;/dt&gt;
&lt;dd&gt;As always you can &lt;a href="http://blog.thecodewhisperer.com/2011/12/07/refactor-your-way-to-a-dependency-injection-container/"&gt;refactor towards an DI
container&lt;/a&gt;
if you feel the need to use one.&lt;/dd&gt;
&lt;/dl&gt;</content><category term="programming"></category></entry><entry><title>Ratcheting</title><link href="https://blog.shaunfinglas.co.uk/2014/11/ratcheting.html" rel="alternate"></link><published>2014-11-01T00:00:00+01:00</published><updated>2014-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-11-01:/2014/11/ratcheting.html</id><summary type="html">&lt;p&gt;Some tasks in software development are mundane such as formatting and
code conventions. Where possible tooling should take away some of this
pain, however sometimes you need a developer to take on a task that
requires a great deal of time and/or effort to complete. Tooling will
only get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some tasks in software development are mundane such as formatting and
code conventions. Where possible tooling should take away some of this
pain, however sometimes you need a developer to take on a task that
requires a great deal of time and/or effort to complete. Tooling will
only get you so far.&lt;/p&gt;
&lt;p&gt;An example of this would be declaring that all projects build and
compile with zero warnings. I've tried this in the past after a team
retrospective. We had hundreds of errors per project, covering about
fifteen projects at the time. Spending several weeks of development time
resolving these would not have be fun nor financially viable. However we
really wanted to implement this change&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I wrote a single test which would execute as part of the build
    process that asserted the count of the errors per project.&lt;/li&gt;
&lt;li&gt;Every now and then whenever I had some slack time (10 mins before a
    meeting, 30 mins at the end of the day etc...) I would open up a
    project and fix some errors. Then run the test and try and lower the
    number of errors it was asserting against until I hit the lower
    limit.&lt;/li&gt;
&lt;li&gt;Rinse repeat this process and after a while a project would assert
    that there are no errors.&lt;/li&gt;
&lt;li&gt;From here on it was impossible for a developer to commit in a change
    that would raise a warning.&lt;/li&gt;
&lt;li&gt;The limit would ensure that during this period no new errors were
    added, increasing the work load.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a month or so all the projects reported zero warnings. Going
forward the test was modified so that new projects added to source
control would be checked and have the same tests run against them,
meaning no new projects can have a warning count greater than zero.&lt;/p&gt;
&lt;p&gt;It turns out this has been documented before - its called
&lt;a href="http://martinfowler.com/articles/useOfMetrics.html#MetricsAsARatchet"&gt;Ratcheting&lt;/a&gt;.
While I didn't know it at the time its nice to have a name to use when
&lt;a href="http://bugroll.com/ratcheting.html"&gt;describing this technique&lt;/a&gt;.&lt;/p&gt;</content><category term="testing"></category><category term="programming"></category></entry><entry><title>Characterization Tests</title><link href="https://blog.shaunfinglas.co.uk/2014/10/characterization-tests.html" rel="alternate"></link><published>2014-10-01T00:00:00+02:00</published><updated>2014-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-10-01:/2014/10/characterization-tests.html</id><summary type="html">&lt;p&gt;Having worked with some truly awful codebases a common problem tends to
arise every now and then. You need to make a change within some legacy
component that most likely has limited or no automated tests around.
This can be a scary process.&lt;/p&gt;
&lt;p&gt;There are a few techniques you can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having worked with some truly awful codebases a common problem tends to
arise every now and then. You need to make a change within some legacy
component that most likely has limited or no automated tests around.
This can be a scary process.&lt;/p&gt;
&lt;p&gt;There are a few techniques you can use to limit the fear of breaking
some legacy code such as &lt;a href="http://xunitpatterns.com/Sprout%20Class.html"&gt;sprout methods or
classes&lt;/a&gt;, however these
aren't always optimal in all scenarios.&lt;/p&gt;
&lt;p&gt;Another option is &lt;a href="http://en.wikipedia.org/wiki/Characterization_test"&gt;characterization
tests&lt;/a&gt; or "what is
this bit of code actually doing?".&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with a simple test such as "ItWorks".&lt;/li&gt;
&lt;li&gt;Run the test - watch it fail.&lt;/li&gt;
&lt;li&gt;Using the stacktrace or error reported, write some additional setup.&lt;/li&gt;
&lt;li&gt;Run the test - watch it get past the previous error.&lt;/li&gt;
&lt;li&gt;Rinse and repeat step 3 - 4 until green.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As part of the first step you should keep the initial test as simple as
possible. For example if an input to the system under test (SUT) takes a
Foo object, just instantiate Foo. Don't start setting values or fields
on Foo. Let the failing test indicate what needs to be set such as a
BarException informing you that "bar must be greater than zero" as part
of step three.&lt;/p&gt;
&lt;p&gt;By now you should have exercised a good chunk of the system under test.
However you may need to add additional tests. For example if the code
contained an "if" statement, you would need at least two
characterization tests. A good way to detect how many tests you need is
a code coverage tool, or manually inserting assertions into the SUT to
show any missing coverage. Likewise a good manual review is required to
fully detect any other tests you may have missed such as boundary cases.&lt;/p&gt;
&lt;p&gt;Now the fun can begin. You can refactor like crazy.&lt;/p&gt;
&lt;p&gt;Afterwards you should have a nicely refactored component that you can
easily extend or modify to add your new feature. You also have a solid
suite of tests to prove you've not broken anything. These tests will
also document the current behaviour of the system - bugs included.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=J4dlF0kcThQ"&gt;Therapeutic
    Refactoring&lt;/a&gt; - an
    excellent video showing this process in action.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052"&gt;Working Effectively with Legacy
    Code&lt;/a&gt; -
    a must read book for anyone working with legacy code.&lt;/li&gt;
&lt;/ul&gt;</content><category term="testing"></category><category term="programming"></category></entry><entry><title>Do it right - violate YAGNI</title><link href="https://blog.shaunfinglas.co.uk/2014/10/do-it-right-violate-yagni.html" rel="alternate"></link><published>2014-10-01T00:00:00+02:00</published><updated>2014-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-10-01:/2014/10/do-it-right-violate-yagni.html</id><summary type="html">&lt;p&gt;You Ain't Gonna Need It or YAGNI is about not writing code that is not
needed. I've gone on to realise how important this is when it comes to
&lt;a href="https://blog.shaunfinglas.co.uk/2014/08/program-for-change.html"&gt;programming for
change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of my biggest pet peeves that I have experienced working on agile
teams is the excuse of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You Ain't Gonna Need It or YAGNI is about not writing code that is not
needed. I've gone on to realise how important this is when it comes to
&lt;a href="https://blog.shaunfinglas.co.uk/2014/08/program-for-change.html"&gt;programming for
change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of my biggest pet peeves that I have experienced working on agile
teams is the excuse of YAGNI.&lt;/p&gt;
&lt;p&gt;YAGNI is no excuse for doing a "proper job". The third step of the TDD
cycle allows you to take the simplest thing that could possible work and
refactor it into something more dynamic, flexible or just plain better.&lt;/p&gt;
&lt;p&gt;If you spend your time writing the simplest thing possible such as brain
dead procedural statements one after the next, the whole benefit of
using TDD or writing automated tests is gone. You'd be more than capable
of doing this yourself.&lt;/p&gt;
&lt;p&gt;My discover here was simple. Don't skip the refactor part of TDD. Don't
allow someone to play the YAGNI card. Do it right.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Practice, Practice, Practice</title><link href="https://blog.shaunfinglas.co.uk/2014/10/practice-practice-practice.html" rel="alternate"></link><published>2014-10-01T00:00:00+02:00</published><updated>2014-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-10-01:/2014/10/practice-practice-practice.html</id><summary type="html">&lt;p&gt;The final part of my "&lt;a href="https://blog.shaunfinglas.co.uk/2013/04/3-years-at-codeweavers.html"&gt;4 years as a Dev
series&lt;/a&gt;"
has the same conclusion as the &lt;a href="https://blog.shaunfinglas.co.uk/2011/08/ten-things-graduate-will-experience.html"&gt;last set of retrospective
posts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Continuous learning, practice and improvement is required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Books&lt;/li&gt;
&lt;li&gt;Blogs&lt;/li&gt;
&lt;li&gt;Videos&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;Conferences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these mediums help, but as I've said before, practice, practice,
practice.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The final part of my "&lt;a href="https://blog.shaunfinglas.co.uk/2013/04/3-years-at-codeweavers.html"&gt;4 years as a Dev
series&lt;/a&gt;"
has the same conclusion as the &lt;a href="https://blog.shaunfinglas.co.uk/2011/08/ten-things-graduate-will-experience.html"&gt;last set of retrospective
posts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Continuous learning, practice and improvement is required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Books&lt;/li&gt;
&lt;li&gt;Blogs&lt;/li&gt;
&lt;li&gt;Videos&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;Conferences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these mediums help, but as I've said before, practice, practice,
practice.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Reinvent the Wheel, Often</title><link href="https://blog.shaunfinglas.co.uk/2014/10/reinvent-wheel-often.html" rel="alternate"></link><published>2014-10-01T00:00:00+02:00</published><updated>2014-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-10-01:/2014/10/reinvent-wheel-often.html</id><summary type="html">&lt;p&gt;We are often never told to reinvent the wheel. In other words, if your
job is solve problems within Domain X you shouldn't spend your time
recreating or solving problems that fall outside of this domain.&lt;/p&gt;
&lt;p&gt;For production code, this I agree with this statement fully. Software
development is hard …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are often never told to reinvent the wheel. In other words, if your
job is solve problems within Domain X you shouldn't spend your time
recreating or solving problems that fall outside of this domain.&lt;/p&gt;
&lt;p&gt;For production code, this I agree with this statement fully. Software
development is hard enough. The last thing we want is to waste resources
such as time or money on anything we can get away with not implementing.
For example, creating your own web framework is a project within itself.
All you'll end up with is a slow, buggy, badly implemented version of a
web framework that happens to power your domain. Sadly I have been on
the receiving end of such decisions.&lt;/p&gt;
&lt;p&gt;There are two times however, when reinventing the wheel is a good thing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can't get the product off the shelf&lt;/li&gt;
&lt;li&gt;Learning or personal benefit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chances there is no web framework, database client, caching layer or so
forth that you can use is very slim. Some systems become so bespoke or
scale to such volumes that recreating such components makes sense. These
are the Netflix/Facebook/Google of the world. Most enterprise software
will never reach a slither of this sort of scale.&lt;/p&gt;
&lt;p&gt;The biggest benefit of recreating well known, solved solutions is the
vast amount of learning and knowledge you will obtain. In the past I
have re-invented numerous wheels, but each time taken away something of
value.&lt;/p&gt;
&lt;p&gt;Systems that seem simple at first such as static website generator, turn
out to be incredibly complex once you understand the full set of
scenarios and edge cases you must handle. The key point here is these
wheels, never make it into production for the reasons detailed
previously.&lt;/p&gt;
&lt;p&gt;In turn you will come to appreciate library and framework developers if
you can fight the urge to resist &lt;a href="http://en.wikipedia.org/wiki/Not_invented_here"&gt;Not Invented Here
Syndrome&lt;/a&gt;. Their full
time project is the delivery of that solution. They have the time to
solve all the edge cases you don't. Not to mention the vast amount of
other users that will have debugged and improved the solution going
forwards. By not reinventing wheels you get as much time as possible to
focus on delivering your solution to the domain problem in question,
which after all is your job.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>DDD Validation</title><link href="https://blog.shaunfinglas.co.uk/2014/09/ddd-validation.html" rel="alternate"></link><published>2014-09-01T00:00:00+02:00</published><updated>2014-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-09-01:/2014/09/ddd-validation.html</id><summary type="html">&lt;p&gt;Validation within an application (specifically in terms of &lt;a href="http://en.wikipedia.org/wiki/Domain-driven_design"&gt;Domain
Driven Design - DDD&lt;/a&gt;)
can be solved in a variety of ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A validate method on the entity/value type in question&lt;/li&gt;
&lt;li&gt;An IsValid property/accessor on the entity/value type in question&lt;/li&gt;
&lt;li&gt;A separate service could be used&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Validate Method&lt;/h4&gt;
&lt;p&gt;Adding …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Validation within an application (specifically in terms of &lt;a href="http://en.wikipedia.org/wiki/Domain-driven_design"&gt;Domain
Driven Design - DDD&lt;/a&gt;)
can be solved in a variety of ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A validate method on the entity/value type in question&lt;/li&gt;
&lt;li&gt;An IsValid property/accessor on the entity/value type in question&lt;/li&gt;
&lt;li&gt;A separate service could be used&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Validate Method&lt;/h4&gt;
&lt;p&gt;Adding a validate method would work, but the flaw with this approach is
that you lack any context of what is happening to the object in
question.&lt;/p&gt;
&lt;h4&gt;Validate Flag&lt;/h4&gt;
&lt;p&gt;Some sort of flag on the object that denotes whether or not the object
is in a valid state is undesirable. Firstly it forces the developer to
ensure they check this at the correct time. If the object is invalid,
exactly what do you do at this point? This approach is often used with a
combination of a validate method that returns the exact error messages.&lt;/p&gt;
&lt;h4&gt;Validator Services&lt;/h4&gt;
&lt;p&gt;A separate service seems less than ideal at first when you consider
developing a richer domain model, but this solution has numerous
benefits. Firstly unlike the two solutions above you always have the
context in which validation is being performed. For example, if you are
saving a customer you will most likely want to perform different
validation to what you would perform when loading up an aggregate.&lt;/p&gt;
&lt;p&gt;An additional point to consider is that most validation is not business
logic. In other words, &lt;a href="https://blog.shaunfinglas.co.uk/2016/01/application-validation-and-domain.html"&gt;checking for null references is not a business
concern. Therefore separating this from your domain objects makes a lot
of
sense.&lt;/a&gt;
The only logic the domain objects should contain is business logic.&lt;/p&gt;
&lt;p&gt;As each service is a separate object, you gain the benefits of the
single responsibility principle (SRP). Meaning testing, development and
future changes are easier.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/e522caca787c75cdea0f.js"&gt;&lt;/script&gt;

&lt;p&gt;The beauty here is that each validator (a simple function in this case)
can be used in the correct context. E.g. when the PersonController POST
handler is invoked, we use the person saving validator.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Developer Diaries</title><link href="https://blog.shaunfinglas.co.uk/2014/09/developer-diaries.html" rel="alternate"></link><published>2014-09-01T00:00:00+02:00</published><updated>2014-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-09-01:/2014/09/developer-diaries.html</id><summary type="html">&lt;p&gt;A few weeks back I stumbled across a tweet which I unfortunately cannot
find to give credit to. It talked about the benefit of keeping a
developer diary.&lt;/p&gt;
&lt;p&gt;At the same time I was reading &lt;a href="http://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity/dp/0749922648"&gt;Getting Things Done
(GTD)&lt;/a&gt;.
I felt inspired to take note of everything related to development …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few weeks back I stumbled across a tweet which I unfortunately cannot
find to give credit to. It talked about the benefit of keeping a
developer diary.&lt;/p&gt;
&lt;p&gt;At the same time I was reading &lt;a href="http://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity/dp/0749922648"&gt;Getting Things Done
(GTD)&lt;/a&gt;.
I felt inspired to take note of everything related to development that I
do during my day to day time. This would satisfy the criteria I had for
my GTD system, along with trying to emulate the success the original
tweet was referring to.&lt;/p&gt;
&lt;p&gt;I don't have a fancy system. Rather I have a text file that is
distributed between the numerous desktops and laptops I have access to.
Here the file is synced, so I should always be up to date. Dropbox
handles this for me.&lt;/p&gt;
&lt;p&gt;Each day I simply make a note of anything I think "&lt;em&gt;I must remember
that&lt;/em&gt;" or anything that happens to be useful, interesting or new. There
is no complex system to this in order to keep in aligned with GTD, new
points are simply appended at the bottom of the file. At the end of each
week I simply group up related notes. For example, if I've got a few
bullet points about databases, I move these to fit under a "Database"
heading. &lt;a href="https://blog.shaunfinglas.co.uk/2016/02/why-you-need-developer-diary.html"&gt;This system works for now, though I might have to re-asses
this in the
future&lt;/a&gt;.
An example of the file is below.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/7fd33b6aa2738f293c91.js"&gt;&lt;/script&gt;

&lt;p&gt;The most surprising thing about this, is that even on a dull day I
absorb a lot of "stuff" related to development. Equally surprising is
how awful my memory is regarding it. If I skim across the document now,
I'm alarmed at the stuff that I would have forgotten had I not taken a
note. It's quite possible that I would remember some of this information
in the long term, but regular skim readings of the diary is proving very
helpful.&lt;/p&gt;</content><category term="retro"></category><category term="tutorial"></category></entry><entry><title>Program for Change</title><link href="https://blog.shaunfinglas.co.uk/2014/08/program-for-change.html" rel="alternate"></link><published>2014-08-01T00:00:00+02:00</published><updated>2014-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-08-01:/2014/08/program-for-change.html</id><summary type="html">&lt;p&gt;We should program for change AKA the &lt;a href="http://en.wikipedia.org/wiki/Open/closed_principle"&gt;Open/Closed
Principle&lt;/a&gt;. In my
opinion, the OCP is one of the lesser respected SOLID principles. One of
my biggest, and earliest failures fresh out of university was ignoring
this concept.&lt;/p&gt;
&lt;p&gt;At the time I was applying
&lt;a href="http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt; to some
code myself and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We should program for change AKA the &lt;a href="http://en.wikipedia.org/wiki/Open/closed_principle"&gt;Open/Closed
Principle&lt;/a&gt;. In my
opinion, the OCP is one of the lesser respected SOLID principles. One of
my biggest, and earliest failures fresh out of university was ignoring
this concept.&lt;/p&gt;
&lt;p&gt;At the time I was applying
&lt;a href="http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt; to some
code myself and a couple of other developers were working on. After all
agile methodologies promote this concept heavily. This made sense to me.
My solution was to solve the problem with the minimal amount of fuss,
however in doing so I strongly coupled the code we produced with the
direct business requirements.&lt;/p&gt;
&lt;p&gt;The requirements stated that we would have three different types
expenses. So I promoted that we model these three types of expenses
directly. The UI knew about these expenses. The database knew about
these expenses. The domain logic knew about these expenses.&lt;/p&gt;
&lt;p&gt;Everything worked well for a while. We finished early. We wrote just the
code we needed. I was happy. Until the business requirements changed.
The three types of expenses became four, then three again, then one was
replaced completely. Bugger.&lt;/p&gt;
&lt;p&gt;The code was unusable. Everything knew just enough to get by, so when
the change came in, everything needed to change. My team was confident
this would be OK. After a few hours of analysis, we concluded the code
was a train wreck. We'd need to restart from the beginning in order to
make the proper changes we wanted. I was pretty gutted, however I
learned a very important lesson.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;YAGNI is about features, not code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I was to complete this feature again, I would still start with the
simplest thing that could possibly work. Most likely the code would
explicitly know about each type of expense, yet my tests would be wrote
in an agnostic manner. I would still apply YAGNI, but at a feature
level. In other words, I wouldn't write an expense logger, if all we
need to do is validate and calculate expense totals.&lt;/p&gt;
&lt;p&gt;During each refactor stage of the TDD cycle I would remove any specific
expense knowledge. After a while I would end up with the various parts
of the application working with a generic expense algorithm. The tests
would drive us towards how the algorithm would work.&lt;/p&gt;
&lt;p&gt;The beauty here is that if a new expense was to be introduced, this
change would be data driven. We would be able to give this the business
for "free".&lt;/p&gt;
&lt;p&gt;I still regret this mistake, but this lesson has lived with for some
time and has proved to be a valuable experience.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Stop.Mocking.EVERYTHING</title><link href="https://blog.shaunfinglas.co.uk/2014/08/stopmockingeverything.html" rel="alternate"></link><published>2014-08-01T00:00:00+02:00</published><updated>2014-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-08-01:/2014/08/stopmockingeverything.html</id><summary type="html">&lt;p&gt;I've flip flopped on how to use mock objects since 2008. It's took me
nearly five years to finally claim to have a solid, practical answer on
what is in my opinion, their correct use.&lt;/p&gt;
&lt;h4&gt;Mock Everything&lt;/h4&gt;
&lt;p&gt;Some developers told me to mock everything. Every. Single. Collaborator.
I wasn't sure …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've flip flopped on how to use mock objects since 2008. It's took me
nearly five years to finally claim to have a solid, practical answer on
what is in my opinion, their correct use.&lt;/p&gt;
&lt;h4&gt;Mock Everything&lt;/h4&gt;
&lt;p&gt;Some developers told me to mock everything. Every. Single. Collaborator.
I wasn't sure about this approach.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My tests felt too brittle - tied to implementation details.&lt;/li&gt;
&lt;li&gt;My tests felt like a duplication of my production code.&lt;/li&gt;
&lt;li&gt;Your test count rises rapidly.&lt;/li&gt;
&lt;li&gt;This style of testing will slow you down - more to
    write/execute/debug.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Mock Nothing&lt;/h4&gt;
&lt;p&gt;Some developers told me to mock nothing. Sometimes I never used mocks. I
wasn't sure about this approach either.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My tests felt too loose - it was easy to introduce bugs or defects.&lt;/li&gt;
&lt;li&gt;My production code suffered as I introduced accessors only for
    testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No wonder I was confused. Neither approach seemed to be comfortable with
me.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use mocks for commands&lt;/li&gt;
&lt;li&gt;Use stubs for queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This halfway house is built around the idea of &lt;a href="http://martinfowler.com/bliki/CommandQuerySeparation.html"&gt;command and query
separation&lt;/a&gt;
as detailed by &lt;a href="http://blog.ploeh.dk/2013/10/23/mocks-for-commands-stubs-for-queries/"&gt;Mark
Seeman&lt;/a&gt;.
This simple principle makes a lot of sense, and finally helped me
realise how best to use stubs and mocks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any commands (methods that have no return type) should have a mock
    object verifying their use if they are architecturally significant.&lt;/li&gt;
&lt;li&gt;Any queries (methods that have return types) should have a stub
    object that is returned if their use is architecturally significant.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the collaborator is not significant, or in other words is simply an
implementation detail then no mock or stub is needed. That's right, just
new up (or instantiate) your dependency there and then. This allows you
to refactor the internals aggressively, without the fear of breaking or
rewriting tests.&lt;/p&gt;
&lt;p&gt;This approach has served me well for a while now, and in fact can be
achieved even without the need to use a complicated mocking framework,
though that will be the subject of a future post.&lt;/p&gt;</content><category term="programming"></category><category term="retro"></category><category term="tdd"></category></entry><entry><title>Dont Tie Yourself to a Framework</title><link href="https://blog.shaunfinglas.co.uk/2014/07/dont-tie-yourself-to-framework.html" rel="alternate"></link><published>2014-07-22T19:19:00+02:00</published><updated>2014-07-22T19:19:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-07-22:/2014/07/dont-tie-yourself-to-framework.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
Programming is great

&lt;/li&gt;
&lt;li&gt;
Software development is the crap bit. You'll spend more time
configuring, integrating and faffing rather than writing logic most of
the time.

&lt;/li&gt;
&lt;li&gt;
Test Driven Development makes development easier as it forces you to
decouple your code.

-   Your core logic should be pure, dependency free C\#, Java, Python …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
Programming is great

&lt;/li&gt;
&lt;li&gt;
Software development is the crap bit. You'll spend more time
configuring, integrating and faffing rather than writing logic most of
the time.

&lt;/li&gt;
&lt;li&gt;
Test Driven Development makes development easier as it forces you to
decouple your code.

-   Your core logic should be pure, dependency free C\#, Java, Python
    etc.
-   Your frameworks and libraries should be on the edge of the system.

&lt;/li&gt;
&lt;li&gt;
Most people do this for some of their code, e.g. your data access.

&lt;/li&gt;
&lt;li&gt;
What about the other parts of a system?

&lt;/li&gt;
-   Web frontend
-   REST api's
-   Console applications
-   Desktop clients

&lt;li&gt;
Why should we couple our applications with these layers?

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Hexagonal Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
[Hexagonal
Architecture](http://alistair.cockburn.us/Hexagonal+architecture) is a
solution to limit coupling

&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;
Easily switch out your delivery mechanism, e.g. test runner adapter for
testing, HTML adapter for production.

&lt;/li&gt;
&lt;li&gt;
[Great
example](http://silkandspinach.net/2005/03/22/the-middle-hexagon-should-be-independent-of-the-adapters/)
from Kevin Rutherford.

&lt;/li&gt;
&lt;li&gt;
[Excellent video](https://www.youtube.com/watch?v=WpkDN78P884) by Uncle
Bob though terminology differs.

&lt;/li&gt;
&lt;li&gt;
Implementation details should be hidden behind adapters.

&lt;/li&gt;
-   Tested manually in the majority of cases
-   Few integration tests for comfort
-   Third party code after all.

&lt;li&gt;
Inner hexagon should only communicate via ports (interfaces) - keeps
domain pure.

&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;h3&gt;Why?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
Last few major projects involved with were due to the delivery mechanism
becoming out of date.

&lt;/li&gt;
-   Flash to Web
-   Web to Mobile

&lt;li&gt;
Easier to test

&lt;/li&gt;
&lt;li&gt;
Easier to change

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Why not?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CRUD apps - sometimes it's just CRUD.&lt;/li&gt;
&lt;li&gt;Lightweight projects might not need hexagonal architecture&lt;/li&gt;
&lt;li&gt;SOA or Microservices could mean hexagonal architecture actually
    introduces overhead or complexity - judge on context.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category></entry><entry><title>I Need to Stop Misusing Namespaces</title><link href="https://blog.shaunfinglas.co.uk/2014/07/i-need-to-stop-misusing-namespaces.html" rel="alternate"></link><published>2014-07-01T00:00:00+02:00</published><updated>2014-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-07-01:/2014/07/i-need-to-stop-misusing-namespaces.html</id><summary type="html">&lt;p&gt;At the recent &lt;a href="https://skillsmatter.com/conferences/6198-nsbcon"&gt;NSBCon&lt;/a&gt;
one interesting question that came about was how to structure a project.
The panel consisting of various speakers had no answer, after all this
is dependant upon the project in question. Therefore there is no right
or wrong answer.&lt;/p&gt;
&lt;p&gt;However one point they were in unison …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the recent &lt;a href="https://skillsmatter.com/conferences/6198-nsbcon"&gt;NSBCon&lt;/a&gt;
one interesting question that came about was how to structure a project.
The panel consisting of various speakers had no answer, after all this
is dependant upon the project in question. Therefore there is no right
or wrong answer.&lt;/p&gt;
&lt;p&gt;However one point they were in unison about was splitting the domain and
technical implementation of a project apart by the correct use of in
namespaces.&lt;/p&gt;
&lt;p&gt;This is not the first time I've come across this, but I find myself
breaking this principle on a regular basis. For example a typical
project I work on looks like the following.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/0b32973c8a339f283c60.js"&gt;&lt;/script&gt;

&lt;h4&gt;Problems&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The namespace reflects a technical implementation detail, and not
    the problem domain.&lt;/li&gt;
&lt;li&gt;Using Foo as an example, here the namespace is duplicated within the
    name of the types, which in turn defeats the point of namespaces.&lt;/li&gt;
&lt;li&gt;Another issue is that the types can be much longer than they need to
    be, which is often a criticism of enterprise software development,
    when the names of objects roll off the screen because they contain
    so many patterns or conventions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Use namespaces for related domain responsibilities. In turn, group
together the objects and types that are used together.&lt;/p&gt;
&lt;p&gt;An example of a better solution therefore would be:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/b29e133fad03dd9430a7.js"&gt;&lt;/script&gt;

&lt;h5&gt;Benefits&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Things that change at the same rate, would live logically next to
    things that also need changes. In other words if I update the
    FooViewModel, chances are I'll need to update views or controllers.&lt;/li&gt;
&lt;li&gt;Less typing if you don't suffer a namespace clash!&lt;/li&gt;
&lt;li&gt;You can still prefix the namespace where required, e.g.
    Foo.Controller if you have a clash or prefer the readability.&lt;/li&gt;
&lt;li&gt;Shorter type names!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While this is the ideal way of structuring our applications it's not
always possible. Some coding conventions actually encourage the first
example, and depending on the configurability of certain frameworks this
may prove difficult. That aside, I'll be making a strong push towards
structuring my projects correctly going forwards.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>SOA Done Badly vs SOA Done Right</title><link href="https://blog.shaunfinglas.co.uk/2014/07/soa-done-badly-vs-soa-done-right.html" rel="alternate"></link><published>2014-07-01T00:00:00+02:00</published><updated>2014-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-07-01:/2014/07/soa-done-badly-vs-soa-done-right.html</id><summary type="html">&lt;p&gt;I was under the assumption I had been doing SOA for over 3 years.
Previously I have had services which did stuff, these talked to other
services which did other stuff and so on. We would group services around
functionality.&lt;/p&gt;
&lt;p&gt;We would break these services down if they got too …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was under the assumption I had been doing SOA for over 3 years.
Previously I have had services which did stuff, these talked to other
services which did other stuff and so on. We would group services around
functionality.&lt;/p&gt;
&lt;p&gt;We would break these services down if they got too big to handle. Behind
the scenes the services would talk to a single database. When it came to
creating an application or system, these front end applications would
invoke various services, which in turn invoked other services. This
layered style of architecture worked for a while, so everything appeared
to be fine.&lt;/p&gt;
&lt;p&gt;The overall architecture looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bad example of
SOA" src="http://4.bp.blogspot.com/-c5WU2EqQCtY/U8uM98_qD1I/AAAAAAAAAEs/dD5OlDqWdr4/s420/bag.soa.png" title="Bad example of SOA. Messy."&gt;
Over time I began to question the benefit of this style.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I spent more time coding than solving business problems&lt;/li&gt;
&lt;li&gt;I spent more time debugging than solving problems&lt;/li&gt;
&lt;li&gt;I spent more time fixing broken deploys than solving problems&lt;/li&gt;
&lt;li&gt;I spent more time writing infrastructure (to glue services together)
    than solving problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
It turns out this is actually quite a common style to SOA. But there are
some serious flaws with this layered approach.&lt;/p&gt;
&lt;h4&gt;Problems&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If a service fails, the whole system is pretty much broken.&lt;/li&gt;
&lt;li&gt;If the database breaks, the whole system is pretty much broken.&lt;/li&gt;
&lt;li&gt;If a service is slow or breaks SLA, the whole system is pretty much
    broken.&lt;/li&gt;
&lt;li&gt;In order to decouple between services, you need complex, costly
    abstractions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;A solution to solve these problems is to partition the domain
boundaries, vertically. The overall architecture would look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Good example of
SOA" src="http://4.bp.blogspot.com/-OiuVjYL4pqk/U8uI0vIxAKI/AAAAAAAAAEg/Q4Ct8linDEk/s420/good.soa.png" title="A good example of SOA"&gt;&lt;/p&gt;
&lt;h5&gt;Details&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Each domain could consist of one or more "services".&lt;/li&gt;
&lt;li&gt;Each with their own choice of data store, e.g. SQL, NOSQL, file
    system etc...&lt;/li&gt;
&lt;li&gt;No domain can directly communicate with another domain.&lt;/li&gt;
&lt;li&gt;If they do need to communicate, then the pub/sub model would be used
    or an ansyc command could be issued. Think .NET events or the event
    design pattern but across processes, not objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Benefits&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Each service could fail and the impact would be minimal, simply
    rollback the deploy or fix the problem. Once the service comes back
    to life any commands or events that have not yet been processed
    would be handled. Each service would have their own message queues
    to persist commands/events.&lt;/li&gt;
&lt;li&gt;Services could be re-wrote and distributed easily, proving they are
    highly decoupled.&lt;/li&gt;
&lt;li&gt;No complex infrastructure, e.g. no need to map between objects
    because the service owns the whole stack. The same model could be
    used across partitions for example.&lt;/li&gt;
&lt;li&gt;Works really well with agile development methodologies, e.g.
    vertical slicing of stories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is more to this introduction. Microservices are a hot new topic.
Being defined as "SOA done correctly". Using the second example, within
each domain there could be multiple services (or autonomous components)
that coexist. The likes of &lt;a href="http://www.udidahan.com/2012/06/23/ui-composition-techniques-for-correct-service-boundaries/"&gt;UI
composition&lt;/a&gt;
to enable applications to be created from services is another great
benefit. This enables so called "mashups".&lt;/p&gt;
&lt;p&gt;I'll expand on these topics over time, but I am certain this method of
vertically slicing services based upon business capabilities will be my
default approach going forward.&lt;/p&gt;</content><category term="architecture"></category><category term="programming"></category></entry><entry><title>The Importance of Tools</title><link href="https://blog.shaunfinglas.co.uk/2014/07/the-importance-of-tools-one-of-most.html" rel="alternate"></link><published>2014-07-01T00:00:00+02:00</published><updated>2014-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-07-01:/2014/07/the-importance-of-tools-one-of-most.html</id><summary type="html">&lt;p&gt;One of the most influential books I've read on software development has
been &lt;a href="http://www.amazon.co.uk/gp/product/020161622X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=020161622X&amp;amp;linkCode=as2&amp;amp;tag=bloshafin-21"&gt;The Pragmatic
Programmer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the key points raised within the book is that of automation and
tooling. For example, automating the build process is a very worthwhile
undertaking. You should be able to check out some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the most influential books I've read on software development has
been &lt;a href="http://www.amazon.co.uk/gp/product/020161622X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=020161622X&amp;amp;linkCode=as2&amp;amp;tag=bloshafin-21"&gt;The Pragmatic
Programmer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the key points raised within the book is that of automation and
tooling. For example, automating the build process is a very worthwhile
undertaking. You should be able to check out some code and execute a
script that will set up your machine, compile, test and deploy the code
base in question.&lt;/p&gt;
&lt;p&gt;The key benefit of automating even trivial tasks such as automatically
pulling down the latest code daily is that unlike developers, automating
tooling will never perform the task wrong. Nor will they forget to do
it. Ultimately this prevents the dreaded "works on my machine" issue.&lt;/p&gt;
&lt;p&gt;I've become such a fan of this approach to automating away any manual
steps that some of the &lt;a href="https://github.com/Finglas/commit.cmd"&gt;most used code I've
written&lt;/a&gt; has been small scripts
that execute hundreds of times a day. From a development point of view,
the likes of good practices, SOLID, OO etc.. are usually void, such
scripts simply get the job done, allowing myself to focus on the more
important tasks such as delivering business value else where.&lt;/p&gt;
&lt;p&gt;There is not a lot else to say on the subject of tooling. The best tools
should be composable, proven solutions where possible. In other words,
rather than something that must be configured via a GUI, opt for
something that can be automated. Also ensure that you are not
re-inventing the wheel unnecessarily. Save your time and energy on
creating the custom tooling you can't get "off the shelf".&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Flexible Selenium Tests via Page Objects</title><link href="https://blog.shaunfinglas.co.uk/2014/05/flexible-selenium-tests-via-page-objects.html" rel="alternate"></link><published>2014-05-01T00:00:00+02:00</published><updated>2014-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-05-01:/2014/05/flexible-selenium-tests-via-page-objects.html</id><summary type="html">&lt;p&gt;A fast, automated suite of unit and integration tests are not enough. At
some point you'll need to test your presentation logic. Ideally your
domain/business/game logic is stubbed so all you'll need to do at this
point is check that the presentation is complete. For example, does view …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A fast, automated suite of unit and integration tests are not enough. At
some point you'll need to test your presentation logic. Ideally your
domain/business/game logic is stubbed so all you'll need to do at this
point is check that the presentation is complete. For example, does view
X load view Y? Does an error message appear when an error is raised?&lt;/p&gt;
&lt;p&gt;With web sites and web applications the standard tool to use is the
excellent &lt;a href="http://docs.seleniumhq.org/"&gt;Selenium&lt;/a&gt;. The problem with UI
tests in Selenium is they are often slower to write. Not only this the
maintenance cost of such tests can often be much more expensive that
other styles of tests. If the cost of such tests is high, the likely
hood of developers writing UI tests is low. In my experience there are
three types of UI tests in use.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;Low Level&lt;/h3&gt;
&lt;p&gt;Here UI tests are wrote directly against Selenium. This low level
approach means tests are scattered with assertions and UI details.
For example element locators such as divs and ids will be used with
methods on the Selenium driver in question. Despite this low level
approach such tests are often quick and dirty to create. The
downside to this style of test is that as the volume of tests
increase, the cost of maintenance can become very costly. A simple
UI change can cause a ripple that will cascade through many test
cases.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/Finglas/aae1cd850fc37403dbb8.js"&gt;&lt;/script&gt;
-   ### Browser Abstraction&lt;/p&gt;
&lt;p&gt;The next level up from direct use of Selenium's driver is to create
a facade around the browser or UI itself. For example rather than
duplicating the steps to log in within each test you could create a
method &lt;code&gt;PerfromLogin(...)&lt;/code&gt; which each test could make use of.
Another example would be abstracting messier details of UI
automation such as clicking a button and waiting for an event. This
style of test has the benefits of low level tests but gives some
flexibility when it comes to maintenance. The downside with this
facade approach is that UI changes can still cause havoc, as each
test in question will be tied to the UI elements directly.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/Finglas/1063a11c30bc3e7290d8.js"&gt;&lt;/script&gt;
-   ### Page Objects&lt;/p&gt;
&lt;p&gt;Taking the browser abstraction to the next level, &lt;a href="http://code.google.com/p/selenium/wiki/PageObjects"&gt;page objects are
an abstraction over the UI
itself&lt;/a&gt;. These
high level tests are wrote in terms of the domain, rather than
implementation details. There is of course one place where each page
object is bound to a UI element, but as each test uses an object,
rather than element locators you only have to change one place when
your UI changes. Unlike the previous two styles of tests, page
objects incur the most amount of code, though for more than a
handful of tests this style of UI acceptance test will pay for
itself in no time.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/Finglas/6d512240848359c12bc2.js"&gt;&lt;/script&gt;
With the above example the &lt;code&gt;LogInPage&lt;/code&gt; object will be bound to UI
locators. This will vary based on programming language, but using
C# as an example each property would have a specific attribute to
link up each element. The domain specific methods such as &lt;code&gt;Username&lt;/code&gt;
will fill in the correct UI element with the provided value. By
writing the objects in a fluent interface style, you can achieve QA
friendly tests which are easy to debug when they go wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A more fleshed out &lt;a href="https://github.com/Finglas/Playground/blob/master/PageObjects/PageObjects/PageObjects.cs"&gt;example of the Page Object pattern can be found on
Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Choose a style based on context. Given more than a handful of tests then
page objects are worth the extra cost, the ability to evolve your UI
while maintaining end to end tests is worth some additional complexity
at first.&lt;/p&gt;</content><category term="testing"></category></entry><entry><title>Learning Tests</title><link href="https://blog.shaunfinglas.co.uk/2014/05/learning-tests.html" rel="alternate"></link><published>2014-05-01T00:00:00+02:00</published><updated>2014-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-05-01:/2014/05/learning-tests.html</id><summary type="html">&lt;p&gt;At the last &lt;a href="http://www.agilestaffordshire.org/"&gt;Agile Staffordshire&lt;/a&gt; I
attended &lt;a href="http://www.agilestaffordshire.org/agile/january-2014-kata-with-constraints/"&gt;the task was to complete the string calculator with
constraints&lt;/a&gt;.
The group worked in pairs and everything was running smoothly. Until I
heard a few guys behind struggling with something.&lt;/p&gt;
&lt;p&gt;I'd worked with one of the developers previously, so they called me over …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the last &lt;a href="http://www.agilestaffordshire.org/"&gt;Agile Staffordshire&lt;/a&gt; I
attended &lt;a href="http://www.agilestaffordshire.org/agile/january-2014-kata-with-constraints/"&gt;the task was to complete the string calculator with
constraints&lt;/a&gt;.
The group worked in pairs and everything was running smoothly. Until I
heard a few guys behind struggling with something.&lt;/p&gt;
&lt;p&gt;I'd worked with one of the developers previously, so they called me over
to take a look. What he found was pretty shocking - they had found a bug
in the .NET framework. The string class of all things. Bugs exist in all
code. Bugs in the substring method though are probably rarer given how
exhaustively used this particular bit of code is.&lt;/p&gt;
&lt;p&gt;The problem was how they expected the method to behave. When creating a
substring they were getting confused with how the offests worked.&lt;/p&gt;
&lt;p&gt;This is an easy mistake. Different languages or frameworks can have
different methods to do similar tasks. I take no shame in not knowing of
the top of my head whether the offest of the substring method is an
offset of the index, or an offset from the start of the string.&lt;/p&gt;
&lt;p&gt;I managed to spot the issue very quickly but never let on. Instead I
decided to share a technique which I use regularly to great effect.&lt;/p&gt;
&lt;p&gt;Rather than painfully using the debugger and stepping through the code
line by line I suggested he write a simple test around the single line
of code they were convinced was misbehaving.&lt;/p&gt;
&lt;p&gt;After a couple of more tests it was clear how the substring method
worked in .NET. Once this was cleared up, we deleted the tests we just
wrote and modified the production code to use the correct offset. This
whole process took less than sixty seconds.&lt;/p&gt;
&lt;p&gt;I explained afterwards that such a technique of writing &lt;a href="http://blog.thecodewhisperer.com/2011/12/14/when-to-write-learning-tests/"&gt;learning
tests&lt;/a&gt;
or scaffholding tests is incredibly valuable. The feedback cycle here is
very quick. Quicker than explaining to another developer what is wrong;
Quicker than "Googling" the problem; Quicker than looking at the
reference implementation and certainly quicker than using the debugger.&lt;/p&gt;
&lt;p&gt;My rules are pretty explicit when dealing with learning tests. They
should be short lived. Testing implementation details is often a bad
idea, but that is the whole point of such style of testing. Therefore if
you do decided to check these tests in tagging them so they are only run
as part of CI builds is worthwhile. In other words, just like real world
scaffholding, they are temporary. &lt;a href="https://blog.shaunfinglas.co.uk/2012/01/write-unit-tests-start-deleting-them.html"&gt;Don't feel bad about writing some
tests, only to delete them minutes
later&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Learning tests have another nice side effect. They give static languages
which have a slower feedback cycle a form of
&lt;a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"&gt;REPL&lt;/a&gt;.
It's a lot quicker to write a test method and execute than it would be
to spin up a new project in languages such as C# or Java to just try
something out.&lt;/p&gt;
&lt;p&gt;Next time you're stuck, try writing a test.&lt;/p&gt;</content><category term="testing"></category><category term="tdd"></category></entry><entry><title>Design is Important</title><link href="https://blog.shaunfinglas.co.uk/2014/04/design-is-important.html" rel="alternate"></link><published>2014-04-01T00:00:00+02:00</published><updated>2014-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-04-01:/2014/04/design-is-important.html</id><summary type="html">&lt;p&gt;When I was a student I used to cheat. Not in exams or practical
assignments, but I used to cheat when it came to my process to develop
code. Early on I noticed a common pattern. After receiving an assignment
I would perform some analysis, figure out a basic design …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was a student I used to cheat. Not in exams or practical
assignments, but I used to cheat when it came to my process to develop
code. Early on I noticed a common pattern. After receiving an assignment
I would perform some analysis, figure out a basic design and document my
steps. The problem came when to code up the solution. I may have
overlooked something, or made a mistake. Sometimes I would just come up
with a better solution. This meant any time I spent documenting was
lost. It turns out this wasn't cheating, after all there was nothing
within the assignments enforcing a waterfall approach.&lt;/p&gt;
&lt;p&gt;I wasn't alone with this experience. Most of my peers had the same
issue, and the report aspects of an assignment were often disliked for
this very reason. My solution was simple. Code up something, get it
working then document the design aspect. Rinse and repeat. Back in the
early 2004 I wasn't aware of agile methodologies, but this solution
worked a treat. In turn my classmates started to adopt this similar
approach, either from my encouragement or their own discovery.&lt;/p&gt;
&lt;p&gt;Moving from university into a practical environment was a joy. It almost
appeared as if little to no documentation was produced. The
documentation that was produced, was often created by other teams.
Developers simply wrote code. At the time I thought this was great, but
after some reflection the errors of my ways have been highlighted.&lt;/p&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;In my experience a variety anti patterns are to blame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;No or limited design&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;worst&lt;/strong&gt; thing that can be done when it comes to design or
planning is the absence of any design or plan whatsoever.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Coding your way out of problems&lt;/h3&gt;
&lt;p&gt;Given some limited or poor design, I've often experienced scenarios
where 80% of the tasks will be complete, then you hit a roadblock.
In order to progress the team will hack their way around it,
introduce &lt;a href="http://en.wikipedia.org/wiki/Technical_debt"&gt;technical
debt&lt;/a&gt; or put in some
&lt;strong&gt;not so temporary fixes&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;"Weeks of coding can save hours of planning"&lt;/h3&gt;
&lt;p&gt;A colleague I used to work with used this once and I fell in love
with the quote. Take an average web application, if the life cycle
of this would be a meager two years, &lt;strong&gt;spending a few hours putting
a design together is nothing&lt;/strong&gt;. You could argue that spending a few
days would be equally fitting, better yet &lt;strong&gt;a couple of weeks well
thought out design is only a small percentage of the overall cost of
delivery&lt;/strong&gt;. When it's too late you can code your way around the
problem. Though this debt will soon add up, meaning features are
even slower to add going forwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Playing the "Agile" card&lt;/h3&gt;
&lt;p&gt;A misconception of the &lt;a href="http://agilemanifesto.org/"&gt;agile manifesto&lt;/a&gt;
is to favour "&lt;em&gt;working software over comprehensive documentation&lt;/em&gt;".
&lt;strong&gt;Most developers read this as never document anything&lt;/strong&gt;. This is
far from the truth. Documentation, design and planning should be
built into the product in iteration. &lt;a href="http://en.wikipedia.org/wiki/Just_in_time_%28business%29"&gt;Just In
Time&lt;/a&gt;
(JIT), rather than all up front or never at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Greenfield projects&lt;/h3&gt;
&lt;p&gt;Having been involved with a couple of "rewrites" I've seen this
happen first hand. &lt;strong&gt;No design, limited design or bad planning in
the first few iterations of a project can kill it&lt;/strong&gt;. &lt;a href="http://beust.com/weblog/2008/03/03/tdd-leads-to-an-architectural-meltdown-around-iteration-three/"&gt;Only by
iteration three, four or five will you notice something isn't
right&lt;/a&gt;.
At this point you've lost. Suggesting to restart, reboot or refactor
is a hard sell, especially to management teams. &lt;strong&gt;Architectural
changes are very difficult at this point&lt;/strong&gt;, as you'll most likely
have users, automated tests and other teams relying on what you have
produced.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Refactoring can save the day!&lt;/h3&gt;
&lt;p&gt;Give me a bad class or method and I can make it beautiful. Give me a
bad application and we have a problem. &lt;strong&gt;Refactoring is a class or
method based activity&lt;/strong&gt;. &lt;a href="http://www.amazon.co.uk/gp/product/0470684208/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0470684208&amp;amp;linkCode=as2&amp;amp;tag=bloshafin-21"&gt;I don't buy architectural refactoring -
and I'm not
alone&lt;/a&gt;.
Emergent design is a very powerful tool, but without some upfront
planning you'll be stuck in limbo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;There are a few ways to overcome the previous problems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;Whiteboards&lt;/h3&gt;
&lt;p&gt;As much as I love technology you &lt;strong&gt;cannot beat a whiteboard&lt;/strong&gt; (or
piece of paper) and a couple of engineers. Visual collaboration in
this manner is very easy, plus physically having the presence of
another individual helps. You can also snap a picture of these
diagrams to reproduce them in a more friendly, shareable, digital
form afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;CRC's&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card"&gt;Class Responsibility and Collaboration
cards&lt;/a&gt;
are another low tech solution, but one I find incredibly valuable,
yet for some reason don't appear to do enough of. &lt;strong&gt;Best performed
in groups&lt;/strong&gt;, though I've had some success on solo efforts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;JIT documentation&lt;/h3&gt;
&lt;p&gt;Not pages of wiki articles or documents, just lean, self contained
documents that serve a purpose. Develop these in iteration and
you'll avoid a "documentation sprint" from hell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Code itself&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Prototypes are worth their weight in gold&lt;/strong&gt;. Spike solutions when
used across a team are also incredibly effective. Rather than a
single prototype being produced, each team has a crack at the
problem in isolation. After regrouping you present back your
solution and findings. The team then combine to form a "best of
breed" approach.&lt;/p&gt;
&lt;p&gt;Iteration zero is often used for getting the build up and running.
If you take this one step further, the ideal scenario is to produce
a &lt;a href="http://alistair.cockburn.us/Walking+skeleton"&gt;walking skeleton&lt;/a&gt;.
This should consist of empty or basic class/method/function
definitons that have not yet been implemented. &lt;strong&gt;With a basic API in
place, fleshing out the details is rather enjoyable&lt;/strong&gt;. You focus on
the problem, not the design or architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None of these are ground breaking ideas, but combined these approaches
have served me well both personally and professionally.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>TDD is a Tool</title><link href="https://blog.shaunfinglas.co.uk/2014/02/tdd-is-tool.html" rel="alternate"></link><published>2014-02-01T00:00:00+01:00</published><updated>2014-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-02-01:/2014/02/tdd-is-tool.html</id><summary type="html">&lt;p&gt;I remember being introduced to Test Driven Development (TDD) very well.
This is because it had such an &lt;strong&gt;overwhelming change on how I write code
day to day&lt;/strong&gt;. It was incredibly alien, difficult, yet rewarding. On this
journey for the last five years I've changed my style, learned how not …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I remember being introduced to Test Driven Development (TDD) very well.
This is because it had such an &lt;strong&gt;overwhelming change on how I write code
day to day&lt;/strong&gt;. It was incredibly alien, difficult, yet rewarding. On this
journey for the last five years I've changed my style, learned how not
to do it and finally found &lt;a href="https://blog.shaunfinglas.co.uk/2014/02/top-down-vs-bottom-up.html"&gt;my "sweet spot" when it comes to pragmatic
TDD&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Deliver Value&lt;/h3&gt;
&lt;p&gt;Writing code is fun. Developing an application or system is fun. Using
new technology is fun. Despite this &lt;strong&gt;the end goal should always be to
deliver value&lt;/strong&gt;. Delivering business value over religiously following a
practice was a turning point in my journey. After all &lt;strong&gt;the user doesn't
care about what is behind the scenes&lt;/strong&gt;, as long as they can use your
software, they're happy.&lt;/p&gt;
&lt;h3&gt;When to Write Tests?&lt;/h3&gt;
&lt;p&gt;One of the guidelines when starting TDD is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;a href="http://c2.com/cgi/wiki?NeverWriteaLineOfCodeWithoutaFailingTest"&gt;Never write a line of code without a failing
test&lt;/a&gt;"
- Kent Beck&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;This rule is wrong on many levels&lt;/strong&gt;. Firstly it cripples most
developers when starting TDD. Secondly the guideline is broken all the
time by seasoned evangelists. Writing some framework code? Writing data
access code? Writing markup? &lt;strong&gt;Any of these scenarios would be wasted by
writing a failing tests first&lt;/strong&gt;. This rule should be reworded.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Writing logic? Never write a line of code without a failing test" -
me&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;It's OK to not use TDD&lt;/h3&gt;
&lt;p&gt;After adoption TDD practitioners tend to face two challenges. Other
developers looking down on non TDD practices and &lt;strong&gt;feeling as if they
are "cheating" when not using TDD&lt;/strong&gt;. The later was an issue I struggled
with. Newbies tend to find the same problem, and this goes back to the
mantra above. One of the key lessons I've discovered over the past few
years is that &lt;strong&gt;using TDD where appropriate is fine&lt;/strong&gt;. Not all code
needs TDD. Even Kent Beck discusses this when he refers to "&lt;a href="http://programmers.stackexchange.com/questions/108338/does-tdds-obvious-implementation-mean-code-first-test-after"&gt;Obvious
Implementation&lt;/a&gt;".&lt;/p&gt;
&lt;h3&gt;Spike Solutions&lt;/h3&gt;
&lt;p&gt;Another game changer in my journey was the concept of "&lt;a href="http://lizkeogh.com/2012/06/24/beyond-test-driven-development/"&gt;Spike and
Stabilize&lt;/a&gt;".
Using this technique you can deliver business value quickly. Gather
feedback as soon as possible and either &lt;strong&gt;fail fast or wrap the code in
tests and clean it up&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;CRUD&lt;/h3&gt;
&lt;p&gt;Most of the code I (and others) write is very similar. I'd bet this is
the same for different fields of software development. That being said,
for &lt;strong&gt;each CRUD app we create there is a tiny aspect of this that is
unique&lt;/strong&gt;. Using TDD to write yet another CRUD app is tedious. I'd
imagine this is why many ditch the practice of TDD after some time.
However the benefit comes from using TDD for that 20% of domain logic.
Here a combination of obvious implementation and spike and stabilize can
assist in the creation of the other 80%.&lt;/p&gt;
&lt;h3&gt;It's about Design too&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0321146530/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0321146530&amp;amp;linkCode=as2&amp;amp;tag=bloshafin-21"&gt;TDD by
Example&lt;/a&gt;
gives the impression that the practice is primarily a testing
discipline. This is not true. TDD does limit the bugs I introduce and
enforces basic correctness, however &lt;strong&gt;bugs will still slip through&lt;/strong&gt;.
After all the quality of the code is only as good as the quality of the
tests. &lt;a href="http://www.amazon.co.uk/gp/product/0321503627/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0321503627&amp;amp;linkCode=as2&amp;amp;tag=bloshafin-21"&gt;Growing Object Oriented Software: Guided by
Tests&lt;/a&gt;
and others introduce the concept that TDD is also a design process.
Listening to the tests is a core concept. In other words, &lt;strong&gt;if something
is hard to test, chances are the code in question can be improved&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Follow the Risks&lt;/h3&gt;
&lt;p&gt;The final lesson I've come to realise is that even if you happen to work
with those who don't practice TDD, you can reap the benefits. Simply
&lt;strong&gt;test where the risk lives&lt;/strong&gt;. Ignore the framework, standard library
and simply test what has risk. This might be a small, core part of your
application. Aiming for 100% code coverage is not a goal, nor one worth
aiming for.&lt;/p&gt;
&lt;h3&gt;It's a Tool&lt;/h3&gt;
&lt;p&gt;At the end of the day, &lt;strong&gt;TDD is a tool, not a goal&lt;/strong&gt;. In this day and
age many believe that TDD should be mandatory. While I agree, the use
should be restricted to where and when it makes sense. As for when and
where, this is up for the developer to decide. Using some of the
findings above allow me to be pragmatic, yet still have confidence in
the quality of my code.&lt;/p&gt;</content><category term="programming"></category><category term="tdd"></category></entry><entry><title>The Correct Way to use var in C#</title><link href="https://blog.shaunfinglas.co.uk/2014/02/the-correct-way-to-use-var-in-c.html" rel="alternate"></link><published>2014-02-01T00:00:00+01:00</published><updated>2014-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-02-01:/2014/02/the-correct-way-to-use-var-in-c.html</id><summary type="html">&lt;p&gt;The .NET community is not widely controversial, though there is a strong
topic that appears to come up time and time again when I pair with other
developers - how to use &lt;code&gt;var&lt;/code&gt; in C#.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword was introduced in .NET 3.5. Unlike other languages
this is &lt;strong&gt;still a …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The .NET community is not widely controversial, though there is a strong
topic that appears to come up time and time again when I pair with other
developers - how to use &lt;code&gt;var&lt;/code&gt; in C#.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword was introduced in .NET 3.5. Unlike other languages
this is &lt;strong&gt;still a strongly typed declaration&lt;/strong&gt;. For example if we
declare a string using &lt;code&gt;var&lt;/code&gt; then we cannot re-assign this variable to
another type. This would be a compile time error.&lt;/p&gt;
&lt;p&gt;There are two parties who have strong feelings about the use of &lt;code&gt;var&lt;/code&gt;,
both of which are &lt;strong&gt;wrong&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Never use var&lt;/h3&gt;
&lt;p&gt;Some developers suggest the use of &lt;code&gt;var&lt;/code&gt; be denied. This leads to code
such as the following. &lt;strong&gt;Overly verbose, and in some cases obscuring the
intent of the code&lt;/strong&gt;. This can commonly be seen when dealing with
collections or generics.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/2050a8b2e6778eb86ebf.js"&gt;&lt;/script&gt;

&lt;h3&gt;Always use var&lt;/h3&gt;
&lt;p&gt;Other developers claim you should "&lt;em&gt;var all the things&lt;/em&gt;". This leads to
code which has the opposite problem from above. &lt;strong&gt;The intent of the code
can be obscured due to not knowing what type you are dealing with&lt;/strong&gt;.
This is especially important during code reviews or times when you are
not relying on the IDE's intellisense to remind you what you are dealing
with. After all code is read many more times than it is written.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/9f0f755ee0879333b7f2.js"&gt;&lt;/script&gt;

&lt;h3&gt;Best of both worlds&lt;/h3&gt;
&lt;p&gt;The solution to this issue is simple. Where the type cannot be inferred
just by looking at the source code (aka the type is on the right), use a
strongly typed declaration. Where the type can be inferred, use implicit
typing. Using the same examples as above, this would look like the
following.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/d40dba8264fd0a0a6e04.js"&gt;&lt;/script&gt;

&lt;p&gt;As with most things when it comes to software development, there is
never a black and white answer. &lt;strong&gt;Always gauge decisions and patterns
based on context&lt;/strong&gt;. Just because automated tooling such as the excellent
Resharper suggests you use implicit typing doesn't always make it
correct.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;Talking of Resharper, a quick &lt;code&gt;Alt+Enter&lt;/code&gt; on a type/implicit declaration
will allow you to switch between modes, meaning you can be lazy and have
the IDE pull in the right type when required.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Top Down vs Bottom Up</title><link href="https://blog.shaunfinglas.co.uk/2014/02/top-down-vs-bottom-up.html" rel="alternate"></link><published>2014-02-01T00:00:00+01:00</published><updated>2014-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2014-02-01:/2014/02/top-down-vs-bottom-up.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Top down development&lt;/strong&gt; has you starting at the highest point in the
application that you can. From here you code down until there is nothing
else left to develop. Once you reach this point you should be code
complete. Along the way you may need to stub out areas that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Top down development&lt;/strong&gt; has you starting at the highest point in the
application that you can. From here you code down until there is nothing
else left to develop. Once you reach this point you should be code
complete. Along the way you may need to stub out areas that have not yet
been created, or designed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom up development&lt;/strong&gt; has you starting at the lowest point in the
application. The idea being that this part of the application has the
most complexity or will be the most important. You will build the system
up from a series of smaller components.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Top-down_and_bottom-up_design"&gt;Top down development and bottom up
development&lt;/a&gt;
was introduced to myself in my early days of university. At the time the
distinction didn't really mean much - I was very much a developer who
would work from the bottom up.&lt;/p&gt;
&lt;p&gt;Over time I have completely switched my stance on this. I believe agile
practices and TDD are the reason for this change. I feel so strongly
about this that I would go as far as to claim that &lt;strong&gt;within an agile
team - bottom up development is an anti pattern&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Consider the following tasks to be completed on a team of four
developers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create controller - &lt;em&gt;main entry point, request mapping.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Create service - &lt;em&gt;service layer, simple business logic.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Database query - &lt;em&gt;thin wrapper around complex DB query.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With a bottom up approach a pair of developers could work on the complex
database query. After some time they would have this working. The other
two developers could start with the controller or service.&lt;/p&gt;
&lt;p&gt;The problem with this approach comes from the &lt;strong&gt;painful integration
process&lt;/strong&gt;. The developers working on the service might be coding against
the interface the team discussed during a planning session, while the
developers on the query may have had to change their approach.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/42c9e3e19c10f9fcffb3.js"&gt;&lt;/script&gt;

&lt;p&gt;This example is trivial, but imagine a story with thirty tasks, more
developers and more complexity and this bottom up approach is difficult.
Over the past few years my top down approach has evolved.&lt;/p&gt;
&lt;p&gt;My first step would be to &lt;strong&gt;stub out the workflow&lt;/strong&gt; with the above
implementation. There is no real logic here - only the objects
collaboration is implemented. At this stage there are &lt;strong&gt;no tests, TDD
would not be used&lt;/strong&gt;. After all there is no logic here. The code is so
simple it can be reasoned about with peer review, planning sessions and
so on.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/0309d16a3d45ebf732dd.js"&gt;&lt;/script&gt;

&lt;p&gt;At this stage &lt;strong&gt;all of the tasks are open for any developer to pick
up&lt;/strong&gt;. If a breaking change was required, there would be no way for one
pair to commit these changes without the other pair knowing. Another
benefit of this approach is that an end to end acceptance test could be
wrapped around the functionality from the get go.&lt;/p&gt;
&lt;p&gt;As &lt;strong&gt;part of these tasks each developer would use TDD&lt;/strong&gt;. Remember no
tests exist at this point. Building up the tests in stages would ensure
the logic of how the objects collaborate is preserved, and ensures that
the actual domain logic that is implemented is correct. &lt;strong&gt;Does this mean
we aren't doing TDD? No, of course not&lt;/strong&gt;. The tests will drive the
implementation. If we need to introduce new objects that is fine - these
simply become implementation details that the other devs need not worry
about as long as the workflow is not broken.&lt;/p&gt;
&lt;p&gt;This approach to top down development isn't new, though many don't
appreciate its benefits. I plan on expanding on this style of pragmatic
TDD in the coming months.&lt;/p&gt;</content><category term="retro"></category><category term="tutorial"></category></entry><entry><title>The Anti If Campaign</title><link href="https://blog.shaunfinglas.co.uk/2013/05/the-anti-if-campaign.html" rel="alternate"></link><published>2013-05-01T00:00:00+02:00</published><updated>2013-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2013-05-01:/2013/05/the-anti-if-campaign.html</id><summary type="html">&lt;p&gt;Firstly if you are unaware of what the &lt;a href="http://www.antiifcampaign.com/"&gt;Anti If
Campaign&lt;/a&gt; is, I advise you to take look
before coming back. My first impression a few years ago was the site
must have been some sort of spoof. Programming without "if" statements,
this was crazy nonsense. After all the "if …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Firstly if you are unaware of what the &lt;a href="http://www.antiifcampaign.com/"&gt;Anti If
Campaign&lt;/a&gt; is, I advise you to take look
before coming back. My first impression a few years ago was the site
must have been some sort of spoof. Programming without "if" statements,
this was crazy nonsense. After all the "if" statement is one of the core
constructs of any language. If you look deeper however the campaign is
not advocating the abolition of "if" statements, it is simply
encouraging cleaner code by removing the likes of type checking and
control coupling. This can be achieved by the use of Polymorphism and
abiding by the &lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single Responsibility
Principle&lt;/a&gt;
(SRP).&lt;/p&gt;
&lt;p&gt;The Anti If Campaign is relevant as I have recently had first hand
experience of what the supporters are campaigning against. I was working
on one of our greenfield projects where I had violated SRP for an easy
win. We had a class which would look up a quote based on some input
criteria. I allowed this input to control how the lookup was performed.
In some scenarios the input would be in a different form, meaning the
lookup would need to be carried out in a different manner. An "if" check
was introduced to handle this logic. In pseudo code:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/54c9876cd1510228b36e.js"&gt;&lt;/script&gt;

&lt;p&gt;The code in question had supporting methods for both paths.&lt;/p&gt;
&lt;p&gt;Fast forward a few months and something terrible had happened. Like a
plague, this simple conditional I had introduced was spreading. Code
that was executed much later on was beginning to perform the same
conditional check! At the same time I discovered this problem, I was
asked to perform a trivial change as the requirements had evolved. What
should have been a five minute job, turned into a few hours of paying
back technical debt.&lt;/p&gt;
&lt;p&gt;The fix was well overdue at this point. I had to push the conditional
statements as high as I could. &lt;a href="http://silkandspinach.net/2011/09/19/conditionals-on-the-edge/"&gt;The closer they were to the edge of the
system the
better&lt;/a&gt;.
The by product of this refactor is that the code is a lot clearer now.
Each class and method did just one thing, and they did it well. It
turned out I was actually able to push the conditional statement so far
up that it effectively disappeared into the routing of the system. It
was up to the caller to "&lt;em&gt;do the right thing&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;After the refactor:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/e53f5a01135b8c1f7c1e.js"&gt;&lt;/script&gt;

&lt;p&gt;As each part of the code complies with SRP, I know exactly where to go
if there is a problem. For example, if we have any problems with the
retrieval of new quotes, I can easily debug and fix the issue. Likewise
if we wish to extend the lookup of existing quotes, I can confidently
change the code without the fear of breaking the retrieval of new
quotes. The other side effect is that I can easily reason about and test
the code in question.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>3 Years at Codeweavers</title><link href="https://blog.shaunfinglas.co.uk/2013/04/3-years-at-codeweavers.html" rel="alternate"></link><published>2013-04-01T00:00:00+02:00</published><updated>2013-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2013-04-01:/2013/04/3-years-at-codeweavers.html</id><summary type="html">&lt;p&gt;Having wrote about the &lt;a href="https://blog.shaunfinglas.co.uk/2011/08/ten-things-graduate-will-experience.html"&gt;top ten things I discovered in my first year at
Codeweavers&lt;/a&gt;,
I figured it would be time for a follow up after the past two years. In
no particular order, a collection of the biggest lessons I have
experienced.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2013/04/why-are-you-not-using-design-by-contract.html"&gt;Design by
    Contract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/02/tdd-is-tool.html"&gt;Test Driven Development (TDD …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Having wrote about the &lt;a href="https://blog.shaunfinglas.co.uk/2011/08/ten-things-graduate-will-experience.html"&gt;top ten things I discovered in my first year at
Codeweavers&lt;/a&gt;,
I figured it would be time for a follow up after the past two years. In
no particular order, a collection of the biggest lessons I have
experienced.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2013/04/why-are-you-not-using-design-by-contract.html"&gt;Design by
    Contract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/02/tdd-is-tool.html"&gt;Test Driven Development (TDD) is a
    Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/04/design-is-important.html"&gt;Design is
    Important&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/07/dont-tie-yourself-to-framework.html"&gt;Don't tie yourself to a
    Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/07/the-importance-of-tools-one-of-most.html"&gt;The Importance of
    Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/08/acceptance-testing-need-not-use-full.html"&gt;Acceptance Testing need not use the Full
    Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/08/program-for-change.html"&gt;Program for Change (Open/Closed
    Principle)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/10/reinvent-wheel-often.html"&gt;Reinvent the Wheel,
    Often&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/10/do-it-right-violate-yagni.html"&gt;Do it right - violate
    YAGNI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/10/practice-practice-practice.html"&gt;Practice, Practice,
    Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll expand on these topics over time in future posts.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Why are you not using Design by Contract?</title><link href="https://blog.shaunfinglas.co.uk/2013/04/why-are-you-not-using-design-by-contract.html" rel="alternate"></link><published>2013-04-01T00:00:00+02:00</published><updated>2013-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2013-04-01:/2013/04/why-are-you-not-using-design-by-contract.html</id><summary type="html">&lt;p&gt;When learning to program I distinctly remember coming across the concept
of placing asserts within your code. Assert statements are primarily
used for "&lt;em&gt;things that cannot happen&lt;/em&gt;", but in my early days I was too
focused on the stuff that was supposed to happen!&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;Defensive programming&lt;/em&gt;" was also introduced. Principles …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When learning to program I distinctly remember coming across the concept
of placing asserts within your code. Assert statements are primarily
used for "&lt;em&gt;things that cannot happen&lt;/em&gt;", but in my early days I was too
focused on the stuff that was supposed to happen!&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;Defensive programming&lt;/em&gt;" was also introduced. Principles such as "Never
trust the user" and "&lt;em&gt;80% of your code will be validation and
verification&lt;/em&gt;" were highlighted. Despite these introductions many years
ago, the concept of asserts never stuck with me. Yet I program
defensively like there is no tomorrow.&lt;/p&gt;
&lt;p&gt;The use of asserts can be extended into "&lt;a href="http://en.wikipedia.org/wiki/Design_by_contract"&gt;Design by
Contract&lt;/a&gt;" or DBC. In
DBC the developer makes use of pre-conditions, post-conditions and
invariants. Some languages such as
&lt;a href="http://www.eiffel.com/developers/design_by_contract.html"&gt;Effiel&lt;/a&gt; have
taken DBC as a core feature while other languages leave DBC up to
libraries.&lt;/p&gt;
&lt;p&gt;One of my favourite programming books is the &lt;a href="http://pragprog.com/book/tpp/the-pragmatic-programmer"&gt;Pragmatic
Programmer&lt;/a&gt;.
Having stood up to many re-reads I always found myself intrigued by the
idea of DBC. Yet I never found myself following this interest through,
at least in a production environment.&lt;/p&gt;
&lt;p&gt;Our team recently came across a bug in which part of the system was
using a component in a way which was deemed invalid. We had a suite of
tests to accompany this feature, but these tests were unable to
highlight the problem. When the object was sent across the wire, the
Javascript front end was firing a null reference across, this was out of
our control in the back end of the application. As the feature crossed a
boundary and spoke to another system defensive programming would have
been difficult. All we could do was error and inform the developer what
was wrong. Even without defensive programming, the system was currently
doing this anyway. We had little to gain.&lt;/p&gt;
&lt;p&gt;Here I decided to experiment for the first time in my programming career
with code contracts. A contract was applied that said the collection
sent into the system must &lt;strong&gt;not be null&lt;/strong&gt; or &lt;strong&gt;empty&lt;/strong&gt;. If so, the
second system would blow up informing the developer what was wrong. This
contract was a very primitive example of a pre-condition - something
that must be true in order for the rest of the following code to
execute.&lt;/p&gt;
&lt;p&gt;The benefit here came from just a few mere lines of code. Had we tried
to program defensively the second systems' code base would have suffered
for little gain. We would need to report the error, add error codes,
introduce exception handling and so on, all for a simple defect that
could be fixed immediately and potentially never occur again once the
developer integrating has configured the components correctly.&lt;/p&gt;
&lt;p&gt;One important factor to consider with DBC is the contract violations
should &lt;strong&gt;never be caught or handled&lt;/strong&gt;. Every single contract that is
violated is a bug. To stop the violation you need to fix the code that
is breaking the contract. Likewise contracts make little sense when
dealing with a public API. On the edge of the system you should presume
your users will make mistakes and "&lt;em&gt;do the wrong thing&lt;/em&gt;", here you must
use defensive programming.&lt;/p&gt;
&lt;p&gt;Since this day I've liberally applied code contracts whenever we cross
system boundaries or interact with the infrastructural aspects of our
code, e.g. database helpers. This has increased my confidence that the
system as a whole has been correctly "glued together". Another benefit
is several bugs have been thwarted thanks to the contracts as unlike
unit tests, contracts are always present when enabled, meaning missed
boundary conditions can easily be detected.&lt;/p&gt;
&lt;p&gt;Hand in hand with our automated test suite, &lt;strong&gt;code contracts make a
great companion&lt;/strong&gt;. Never alone will one suffice, but when used in
conjunction they can be extremely powerful. So the question is, why
aren't you using them?&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Object Calisthenics</title><link href="https://blog.shaunfinglas.co.uk/2013/01/object-calisthenics.html" rel="alternate"></link><published>2013-01-01T00:00:00+01:00</published><updated>2013-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2013-01-01:/2013/01/object-calisthenics.html</id><summary type="html">&lt;p&gt;Recently I ran a session on &lt;a href="http://www.markhneedham.com/blog/2008/11/06/object-calisthenics-first-thoughts/"&gt;Object
Calisthenics&lt;/a&gt;.
I was first exposed to this challenge a few years ago and personally
found it a fun, yet difficult experience. This is intentional as the
challenge is designed to push the boundaries of best practices. The
instructions are simple, there are nine …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I ran a session on &lt;a href="http://www.markhneedham.com/blog/2008/11/06/object-calisthenics-first-thoughts/"&gt;Object
Calisthenics&lt;/a&gt;.
I was first exposed to this challenge a few years ago and personally
found it a fun, yet difficult experience. This is intentional as the
challenge is designed to push the boundaries of best practices. The
instructions are simple, there are nine rules to follow that &lt;strong&gt;&lt;em&gt;must&lt;/em&gt;&lt;/strong&gt;
be obeyed during a traditional kata. We chose the &lt;a href="http://codekata.com/kata/kata09-back-to-the-checkout/"&gt;Checkout
Kata&lt;/a&gt; as the
backdrop for this session. The teams feedback is as follows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3&gt;Use only one level of indentation per method&lt;/h3&gt;
&lt;p&gt;The team found this easy, and we discussed that following this to
some degree in day to day development would be beneficial. Limiting
the amount of nested code you have can improve readability quite
substantially.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Don't use the else keyword&lt;/h3&gt;
&lt;p&gt;At first this seemed a no brainier, until people realised it meant
to favour polymorphism and not simply relying on an early return
(implicit else).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Wrap all primitives and strings&lt;/h3&gt;
&lt;p&gt;The team managed well with this, one example would be a pair
introduced an SKU (Stock Keeping Unit) to encapsulate a string and
price. We do this well in day to day development at Codeweavers for
domain objects, however we tend to fail in other areas such as data
access code. This is one concept we need to try and improve at.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Use only one dot per line&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://haacked.com/archive/2009/07/13/law-of-demeter-dot-counting.aspx"&gt;Law of Demeter in
action&lt;/a&gt;.
Once we cleared up the ideas behind this it was pretty easy for the
teams to follow. This is not a dot counting exercise, so it is worth
being familiar with the "law". Much of our code would satisfy this
requirement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Don't abbreviate&lt;/h3&gt;
&lt;p&gt;One controversial point that came up from this was regarding the
team who chose SKU as a class name. Some of the team disagreed with
this naming, though in terms of the domain (a supermarket) this is a
perfectly valid name, therefore this did not break the rule. On the
whole our code is named well, though our legacy codebases have many
abbreviations that can confuse and obfuscate the intent of the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Keep all entities small&lt;/h3&gt;
&lt;p&gt;For new code, this is not an issue, however we find legacy code is
given less treatment in regards to the size of our entities. This is
something we should try to improve, though the teams found this easy
enough during the kata.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Don't use any classes with more than two instance variables&lt;/h3&gt;
&lt;p&gt;Personally I find this an odd requirement, providing you keep your
classes small as per the previous requirement this tends to be a
less relevant task. Of all the rules to follow, this is the one I
could not advocate during day to day development providing you keep
your classes small.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Use first-class collections&lt;/h3&gt;
&lt;p&gt;My personal favourite of the rules to abide by, and one I have since
adopted into day to day coding. &lt;a href="https://blog.shaunfinglas.co.uk/2010/12/lists-or-objects.html"&gt;First class collections can
simplify, and make code easier to understand as well as
maintain&lt;/a&gt;
and optimize. We have numerous examples of this at play at
Codeweavers, and we should try to increase the amount of custom
collections we have, as opposed to relying on primitive collections.
For example, quotes is a better object than a array of quote.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;Don't use any getters/setters/properties&lt;/h3&gt;
&lt;p&gt;The hardest of all the rules to follow. Most of the teams tried to
get past this rule by simply naming their getters/setters slightly
differently. At the end of the day, there were still exposing state
unnecessarily. We would never try to enforce such a rule for general
development, but &lt;a href="https://blog.shaunfinglas.co.uk/2011/04/getters-and-setters-are-evil.html"&gt;for core business logic this principle actually
makes
sense&lt;/a&gt;.
The areas where this falls down, is on the boundary of the system,
for example user input or output would be such scenarios where
getters/setters are the easiest, cleanest solutions. Each team found
this requirement the hardest to work with, which mimics my first
expose to the object calisthenics challenge.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category></entry><entry><title>Object Discovery</title><link href="https://blog.shaunfinglas.co.uk/2012/12/object-discovery.html" rel="alternate"></link><published>2012-12-01T00:00:00+01:00</published><updated>2012-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-12-01:/2012/12/object-discovery.html</id><summary type="html">&lt;p&gt;Recently we had &lt;a href="https://twitter.com/kevinrutherford"&gt;@kevinrutherford&lt;/a&gt;
in to talk about object discovery. While TDD is a great tool, it is no
excuse for some sort of design process. If you don't, you'll most
&lt;a href="http://devgrind.com/2007/04/25/how-to-not-solve-a-sudoku/"&gt;likely end up with a
mess&lt;/a&gt;. This
session was based around this principle.&lt;/p&gt;
&lt;p&gt;One point that was discussed what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently we had &lt;a href="https://twitter.com/kevinrutherford"&gt;@kevinrutherford&lt;/a&gt;
in to talk about object discovery. While TDD is a great tool, it is no
excuse for some sort of design process. If you don't, you'll most
&lt;a href="http://devgrind.com/2007/04/25/how-to-not-solve-a-sudoku/"&gt;likely end up with a
mess&lt;/a&gt;. This
session was based around this principle.&lt;/p&gt;
&lt;p&gt;One point that was discussed what that the first few seconds of a test
for a new class is the most important part of the TDD process. It is
here where you will decide whether to take a state or interaction based
approach to testing. This first test will dictate the structure of the
new class. Once you start with tests, it becomes difficult to evolve or
change the design of a class without friction.&lt;/p&gt;
&lt;p&gt;There is generally two types of code at Codeweavers.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/4a9e9d35d64c150d6075.js"&gt;&lt;/script&gt;

&lt;p&gt;The trick comes from the fact that just because you use C#/Java/etc..
most of the time you aren't actually writing OO code. You often end up
writing procedural code in a rather obtuse manner. A takeaway from this
afternoon was to try and perform more CRC
&lt;a href="http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card"&gt;(class-responsibility-collaborator)&lt;/a&gt;sessions.&lt;/p&gt;
&lt;h3&gt;CRC (Object Cube)&lt;/h3&gt;
&lt;p&gt;During this session we performed a modified version of a CRC. One thing
I always find with CRC sessions is how useful they are. The problem I
and others find is when it comes to day to day development, I'm too
eager to start coding without performing some sort of up front design.&lt;/p&gt;
&lt;h3&gt;Events&lt;/h3&gt;
&lt;p&gt;In order to write flexible OO code, you need to hide as much state as
possible. While this is great in practice it turns out to be very
difficult to achieve in the real world. One method of getting around
this is to make use of events aka the &lt;a href="http://en.wikipedia.org/wiki/Observer_pattern"&gt;observer
pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kevin used a wiki as an example. Consider a page that is updated. If
this page was to fire a changed event, then anything that is listening
for these events would be notified. The observers could then react once
the event was received. The nice thing about this approach is that the
code obeys the &lt;a href="http://en.wikipedia.org/wiki/Open/closed_principle"&gt;open/closed
principle&lt;/a&gt;. New
features can be added without the need for the change to have a large,
rippling effect.&lt;/p&gt;
&lt;h3&gt;Nouns and Namespaces&lt;/h3&gt;
&lt;p&gt;When I was first exposed to object oriented programming, apart from
believing that inheritance was the coolest aspect of OO, I was also led
to believe that using nouns when designing classes can be useful. It
turned out that this was a fallacy. If you follow this advice you'll end
up with a small collection of classes that do everything. The biggest
revelation I had during the session came from the importance of
namespaces. Using nouns for up front design can be extremely useful if
you remember that the noun can potentially be a namespace. This means
you'll end up with a handful of namespaces that are relevant to the
domain in question. Inside these namespaces you will have one or more
classes that do &lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;one thing, and one thing
well.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Closing&lt;/h3&gt;
&lt;p&gt;At the end of the session I was left with many questions and new ideas
to test and try out. Using events to hide state, yet allow other objects
to interact when required was a real eye opener. However it turns out
that when actually trying to implement these ideas in code, it is
actually quite difficult due to my current thinking. The plan for the
next month will be to explore these ideas in more detail and see what
affect it has on my day to day development.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Codeweavers Code Retreat</title><link href="https://blog.shaunfinglas.co.uk/2012/10/codeweavers-code-retreat.html" rel="alternate"></link><published>2012-10-01T00:00:00+02:00</published><updated>2012-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-10-01:/2012/10/codeweavers-code-retreat.html</id><summary type="html">&lt;p&gt;Last week we had &lt;a href="https://twitter.com/kevinrutherford"&gt;@kevinrutherford&lt;/a&gt;
in to run a coderetreat. It was the first retreat I've taken part in
personally, the same applying to much of the team. The day was to focus
on one challenge - &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Conway's Game of
Life&lt;/a&gt;&lt;/strong&gt; though
each iteration would introduce new constraints.&lt;/p&gt;
&lt;h2&gt;Iteration 1&lt;/h2&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week we had &lt;a href="https://twitter.com/kevinrutherford"&gt;@kevinrutherford&lt;/a&gt;
in to run a coderetreat. It was the first retreat I've taken part in
personally, the same applying to much of the team. The day was to focus
on one challenge - &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Conway's Game of
Life&lt;/a&gt;&lt;/strong&gt; though
each iteration would introduce new constraints.&lt;/p&gt;
&lt;h2&gt;Iteration 1&lt;/h2&gt;
&lt;p&gt;The four &lt;a href="http://c2.com/cgi/wiki?XpSimplicityRules"&gt;rules of simple
code&lt;/a&gt; were discussed, aka
"Extreme Normal Form".&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Passes tests&lt;/li&gt;
&lt;li&gt;Communicates intent&lt;/li&gt;
&lt;li&gt;No duplication&lt;/li&gt;
&lt;li&gt;Nothing unncessary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our first run through was somewhat of a disaster. We became too obsessed
with how the grid was to be stored. This meant we spent a long time
messing around with arrays and multidemionsal arrays in C#. Both are
somewhat tedious and not something we use often, therefore we concluded
a more "grid agnostic" approach would be needed. After all, there is
nothing stating the grid need be a square, fixed layout.&lt;/p&gt;
&lt;h2&gt;Iteration 2&lt;/h2&gt;
&lt;p&gt;The concept of &lt;a href="http://c2.com/cgi/wiki?ArrangeActAssert"&gt;Arrange, Act,
Assert&lt;/a&gt; or AAA was discussed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrange - set up pre conditions&lt;/li&gt;
&lt;li&gt;Act - do something on the subject under test&lt;/li&gt;
&lt;li&gt;Assert - verify or check some result&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The constraint during this iteration was that all asserts were to be
created first, and we would work backwards. Personally I found this
difficult, both mentally and in terms of tooling. For the past four
years I've rarely wrote an assert first, therefore this switch proved
tricky.&lt;/p&gt;
&lt;p&gt;Visual Studio and Resharper also tend to favour a top down approach. In
other words, it's easier to stub out a class and add methods, rather
than the inverse.&lt;/p&gt;
&lt;p&gt;New members to the team found the act of writing the assert first much
easier however, and they're looking to continue this in day to day
development.&lt;/p&gt;
&lt;p&gt;The point I took from here is that while I may personally know what I'm
writing, my partner might not be aware of where we are heading. Starting
with the assert first allows both developers to see the goal for that
particular test.&lt;/p&gt;
&lt;h2&gt;Iteration 3&lt;/h2&gt;
&lt;p&gt;Our third iteration introduced the unrealistic concept of mute pairing.
Only the code and tests can reveal our intent.&lt;/p&gt;
&lt;p&gt;Using ping ponging (switching between developers who writes
tests/production code) we managed to get a good chunk of functionality
complete. Despite this the rest of the iteration was very difficult.
Being unable to talk about design concepts was incredibly frustrating.&lt;/p&gt;
&lt;p&gt;The most important concept we took away from here was that more than
likely the developer working with your code tomorrow will not have
worked with you previously. That means any conversations you've had to
explain the code will be lost. The only thing left to communicate will
be your tests or production code. Due to this observation, it is cruicly
we name our tests and code in a manner that is cleary and
understandable, whether six minutes or six months have passed.&lt;/p&gt;
&lt;h2&gt;Iteration 4&lt;/h2&gt;
&lt;p&gt;Our fourth iteration had a focus on OO concepts. Up until now, our code
had exposed much of the state in various ways. The challenge was to
focus on the messages that are exchanged between objects, rather the
change in state.&lt;/p&gt;
&lt;p&gt;This introduced a new problem. How do we test an object without exposing
state? We talked about a couple of methods; mock objects or the &lt;a href="http://c2.com/cgi/wiki?SelfShuntPattern"&gt;self
shunt pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using the shelf shunt pattern was an enjoyable experience - we
identified numerous violations of the &lt;a href="http://www.giorgiosironi.com/2009/09/solid-part-4-interface-segregation.html"&gt;interface segregation
principle&lt;/a&gt;
as it was actually painful to add to the interface in question. With
mocking frameworks this pain is often lessened due to the dynamic and
often "magic" constructs they employ.&lt;/p&gt;
&lt;p&gt;Personally I found code writting using this pattern easier to
understand. The plan will be to adopt this approach for a month or so
and see how it effects day to day development.&lt;/p&gt;
&lt;p&gt;Our code looked pretty good at this point, though we were struggling to
replace a conditional statement. After a few minutes the idea seemed
obvious once we recieved a hint -
&lt;a href="http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming"&gt;polymorphism&lt;/a&gt;.
This sparked a nice discussion about the "&lt;a href="http://www.antiifcampaign.com/"&gt;Anti
If&lt;/a&gt;" campaign - another point I'm
looking to take further. This iteration proved the most challenging for
the whole team. A second run through allowed further progress.&lt;/p&gt;
&lt;h2&gt;Iteration 5&lt;/h2&gt;
&lt;p&gt;The final round had us regroup with our original partners. Here we could
use any approach and see how far we could progress. Me and my partner
opted for a failing acceptance test, from here we would implement the
functionality top down until we had the components wired together. This
worked well until we struggled to test how the cells were stored without
exposing any state needlessly. The solution came from some discussion
around &lt;a href="http://www.markhneedham.com/blog/2008/11/06/object-calisthenics-first-thoughts/"&gt;object
calesethenics&lt;/a&gt;
– first class collections.&lt;/p&gt;
&lt;p&gt;One thing to note was how drastically different our code looked, when
compared to the first iteration. During the course of the day we all
noticed a difference in our overall approaches.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall I believe I speak for the whole team when I say how much we
enjoyed the day. It was refreshing to spend a whole day coding, rather
than being interuppted with other issues. Naturally this was quite
tiring - though left lots energy for discussion afterwards. As a
conclusion it would appear that as a collective we need to spend more
time each week carrying out deliberate practice. For new starters this
is essential training, while for more seasoned developers this is a
useful way to keep our skillset up to date.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>MVC is Broken</title><link href="https://blog.shaunfinglas.co.uk/2012/10/mvc-is-broken.html" rel="alternate"></link><published>2012-10-01T00:00:00+02:00</published><updated>2012-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-10-01:/2012/10/mvc-is-broken.html</id><summary type="html">&lt;p&gt;If you look up the definition of &lt;a href="http://en.wikipedia.org/wiki/Model_view_controller"&gt;MVC or Model View
Controller&lt;/a&gt;, it will
hail the definition as being able to change your front end without
affecting other parts of the application and vice versa. This sounds
great in theory, however this claim is nothing more than a &lt;em&gt;blatant
lie …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you look up the definition of &lt;a href="http://en.wikipedia.org/wiki/Model_view_controller"&gt;MVC or Model View
Controller&lt;/a&gt;, it will
hail the definition as being able to change your front end without
affecting other parts of the application and vice versa. This sounds
great in theory, however this claim is nothing more than a &lt;em&gt;blatant
lie&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A failing of the architectural pattern comes from the whole codebase
being tied to a specific stack. Take ASP.NET MVC. The domain logic will
most likely be in C#. Therefore your models will be in C#. Your
controllers will be in C#. Your views will be a mixture of C# and some
form of a templating language.&lt;/p&gt;
&lt;p&gt;If you want to change your stack to the "next big thing" you are forced
to take a big bang approach. ASP.NET MVC &lt;em&gt;won't be around forever&lt;/em&gt;.
Being tied to a specific technology feels wrong. Therefore this coupling
means your designers are forced to use the templating language that your
framework supports. This should be a flexible option that should be easy
to change, after all the MVC pattern states this as one of it's
benefits.&lt;/p&gt;
&lt;p&gt;Being tied to a specific technology leads onto our most recent project.
One of our biggest and most important projects is a legacy Flash
application. Back in the early 2000's it was a cutting edge application
- consistent across all browsers, ajax style requests, responsive
design, you name it.&lt;/p&gt;
&lt;p&gt;That being said we all know Flash is on its way out, and there lies the
problem. It took myself about two weeks to add a few text boxes to the
app in my first year at Codeweavers, all because the UI code is so
difficult to work with. The &lt;em&gt;logic is mixed within the UI&lt;/em&gt;. Had the app
been developed in a MVC style we would be in a position to replace the
legacy UI with a modern alternative.&lt;/p&gt;
&lt;p&gt;We make use of &lt;a href="http://en.wikipedia.org/wiki/Service-oriented_architecture"&gt;SOA or Service Oriented
Architecture&lt;/a&gt;
at Codeweavers, therefore it seemed a natural fit to apply this to our
rewrite of our legacy application. I proposed a theory:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"for an application to be truly independent of the frontend and
backend the code must be developed in different languages."&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, I taught myself enough PHP to make a JSON request, perform
some conditional logic and loop over a collection. With this I was able
to recreate one of our applications that was powered by our backend C#
services. &lt;a href="http://www.codinghorror.com/blog/2012/06/the-php-singularity.html"&gt;I would not want to create an application in
PHP&lt;/a&gt;,
but using PHP as a templating language was a great fit. After all this
is one of the intentions of the language. Limiting myself to just three
simple PHP constructs I was &lt;em&gt;forced to put all logic on the service&lt;/em&gt; in
question.&lt;/p&gt;
&lt;p&gt;This complete separation of concerns is made possible due to the fact it
is simply not possible for code to leak between the layers due to the
different languages used in the implementation. This means I could
easily spin up numerous front end views while the backend remains
unchanged. Likewise we could change the back end implementation from C#
to another language. Providing the endpoints and request/responses
match, the front end will still be functional. This full separation of
concerns is what MVC style frameworks have &lt;em&gt;failed to achieve&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In ten years from now it is hard to say what the web will look like.
What I can guarantee is that the web will still be here. We'll still be
making HTTP requests. We'll still be making back end services that
powers much of the apps on the internet. One thing no one can really
comment on is what the web will look like. One point we all could agree
on is that HTML5 should be wide spread and no doubt "&lt;em&gt;the next big
thing&lt;/em&gt;" will be on the horizon. The great thing by taking the approach
discussed previously is that Codeweavers will be in the position to
change either the front end or back end of our codebase at any time.
Precisely what the MVC pattern has failed to deliver.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Recommended Reading 2012</title><link href="https://blog.shaunfinglas.co.uk/2012/10/recommended-reading-2012.html" rel="alternate"></link><published>2012-10-01T00:00:00+02:00</published><updated>2012-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-10-01:/2012/10/recommended-reading-2012.html</id><summary type="html">&lt;p&gt;Here is my updated reading list for 2012. We might have missed something
so if you think we should be reading it, let us know.&lt;/p&gt;
&lt;h2&gt;Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0071392319?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0071392319"&gt;The Toyota
    Way&lt;/a&gt; -
    Jeffrey Liker&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0566086654?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0566086654"&gt;The
    Goal&lt;/a&gt; -
    Eli Goldratt&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0321278658?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0321278658"&gt;XP
    Explained&lt;/a&gt;-
    Kent Beck&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X"&gt;The Pragmatic
    Programmer&lt;/a&gt;-
    Andrew Hunt and David Thomas&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/The-Clean-Coder-Professional-ebook/dp/B0050JLC9Y"&gt;The Clean
    Coder …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Here is my updated reading list for 2012. We might have missed something
so if you think we should be reading it, let us know.&lt;/p&gt;
&lt;h2&gt;Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0071392319?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0071392319"&gt;The Toyota
    Way&lt;/a&gt; -
    Jeffrey Liker&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0566086654?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0566086654"&gt;The
    Goal&lt;/a&gt; -
    Eli Goldratt&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0321278658?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0321278658"&gt;XP
    Explained&lt;/a&gt;-
    Kent Beck&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X"&gt;The Pragmatic
    Programmer&lt;/a&gt;-
    Andrew Hunt and David Thomas&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/The-Clean-Coder-Professional-ebook/dp/B0050JLC9Y"&gt;The Clean
    Coder&lt;/a&gt; -
    Robert C. Martin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0132350882?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0132350882"&gt;Clean Code - Robert C.
    Martin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0321146530?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0321146530"&gt;Test-Driven
    Development&lt;/a&gt;
    by Kent Beck&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0201485672?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0201485672"&gt;Refactoring - Martin
    Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0321109295?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0321109295"&gt;Refactoring Workbook - William
    Wake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0321127420?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0321127420"&gt;Patterns of Enterprise Application
    Architecture&lt;/a&gt; -
    Martin Fowler&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0596007124?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0596007124"&gt;Head First Design
    Patterns&lt;/a&gt; -
    Freeman, et al&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0321503627?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0321503627"&gt;Growing Object-Oriented Software, Guided by
    Tests&lt;/a&gt; -
    Steve Freeman and Nat Pryce&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Things-Every-Programmer-Should-Know/dp/0596809484"&gt;97 Things Every Programmer Should
    Know&lt;/a&gt;-
    Kevlin Henney&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Pro-ASP-NET-MVC-Framework-ebook/dp/B005PZ07US"&gt;Pro ASP.NET MVC
    x+&lt;/a&gt; -
    Steve Sanderson&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Framework-Design-Guidelines-Conventions-ebook/dp/B0017SWPNO"&gt;Framework Design
    Guidelines&lt;/a&gt; -
    Brad Abrams and Krzysztof Cwalina&lt;/li&gt;
&lt;/ul&gt;</content><category term="reading"></category></entry><entry><title>The Problem with Auto Updating Browsers</title><link href="https://blog.shaunfinglas.co.uk/2012/06/the-problem-with-auto-updating-browsers.html" rel="alternate"></link><published>2012-06-01T00:00:00+02:00</published><updated>2012-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-06-01:/2012/06/the-problem-with-auto-updating-browsers.html</id><summary type="html">&lt;p&gt;At the time of writing the latest version of Firefox (version 13) has
just been released. Bear in mind that a week ago I updated our Selenium
bindings so that we could use Firefox 9+ for running our browser tests.&lt;/p&gt;
&lt;p&gt;The latest release is another great release for the Firefox …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the time of writing the latest version of Firefox (version 13) has
just been released. Bear in mind that a week ago I updated our Selenium
bindings so that we could use Firefox 9+ for running our browser tests.&lt;/p&gt;
&lt;p&gt;The latest release is another great release for the Firefox team, except
there is software out there will be broken. The software in question I'm
talking about is any code that uses &lt;a href="http://seleniumhq.org/download/"&gt;Selenium
2.22.0&lt;/a&gt; that was released 2012-05-29.
It turns out the bindings only work for Firefox 12 or less.&lt;/p&gt;
&lt;p&gt;For whatever reason any tests that used Selenium this morning just
stopped working for us - &lt;a href="http://groups.google.com/group/selenium-users/browse_thread/thread/83a7895693364c3a"&gt;and
others&lt;/a&gt;.
The tests in question caused the runner to hang as no window could be
opened. I'm not sure what causes this, as the browser is essentially the
same to the end user, bar some new features. Not being a Selenium
developer I cannot comment how or why this has happened, nor can I
suggest the Selenium team should be version agnostic.&lt;/p&gt;
&lt;p&gt;Our solution in the end was simple. Turn off the auto updating and
downgrade the browser. &lt;a href="https://blog.shaunfinglas.co.uk/2011/12/how-to-achieve-more-stable-end-to-end.html"&gt;I've blogged about this in the
past&lt;/a&gt;,
but since Firefox 10 - the team are adopting a "silent" update process.
This is great for end users. Imagine the countless man hours saved if
IE6 had shipped with an auto update feature? The problem now seems to be
in the hands of developers.&lt;/p&gt;
&lt;p&gt;Another attempt to make this problem more obvious has been to add a
check prior to our tests running to ensure that it can open a window. If
this fails or hangs, we display a useful error message indicating that
the browser in question is not compatible. This is due to the fact that
it is not immediately obvious what the problem is. More confusion occurs
when some machines will execute the tests with no problems at all.&lt;/p&gt;
&lt;p&gt;Tools -&amp;gt; Options -&amp;gt; Advanced -&amp;gt; Update Tab&lt;/p&gt;
&lt;p&gt;So if you use Selenium and Firefox - ditch the auto updating. Manually
update your bindings and check compatability for now...&lt;/p&gt;</content><category term="testing"></category></entry><entry><title>Achieving more Isolated Unit Testing</title><link href="https://blog.shaunfinglas.co.uk/2012/05/achieving-more-isolated-unit-testing.html" rel="alternate"></link><published>2012-05-01T00:00:00+02:00</published><updated>2012-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-05-01:/2012/05/achieving-more-isolated-unit-testing.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Good&lt;/em&gt; unit tests should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fast&lt;/li&gt;
&lt;li&gt;independent&lt;/li&gt;
&lt;li&gt;well focused&lt;/li&gt;
&lt;li&gt;&lt;em&gt;isolated&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your unit tests are slow, you're not gonna run them as often as you
should. Therefore one of the main benefits of unit testing is lost - the
lack of instant feedback.&lt;/p&gt;
&lt;p&gt;Each of your unit tests should be independent …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Good&lt;/em&gt; unit tests should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fast&lt;/li&gt;
&lt;li&gt;independent&lt;/li&gt;
&lt;li&gt;well focused&lt;/li&gt;
&lt;li&gt;&lt;em&gt;isolated&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your unit tests are slow, you're not gonna run them as often as you
should. Therefore one of the main benefits of unit testing is lost - the
lack of instant feedback.&lt;/p&gt;
&lt;p&gt;Each of your unit tests should be independent. The order in which you
run your tests should not matter. By keeping your tests focused you
should be able to refactor, add new code and not have the majority of
your tests fail. If you change class A, you would expect class A's tests
to fail at worst. If other tests outside of this scope fail, your tests
are not focused enough. This lack of focus leads on to isolation.&lt;/p&gt;
&lt;p&gt;Tests should be isolated from other dependencies. Dependencies such as
other classes should not affect each other, providing the contract
between the code is maintained. Likewise the file system, the web and
databases should not be involved anywhere with your unit tests. If any
of these dependencies come into play, you're not unit testing.&lt;/p&gt;
&lt;p&gt;At Codeweavers we have around &lt;strong&gt;ten thousand tests&lt;/strong&gt;, with unit tests
accounting for the majority of these tests. Naturally this means every
now and then we take time to do a bit of house keeping regarding our
tests.&lt;/p&gt;
&lt;p&gt;One thing we noticed was that some of our tests were taking longer to
run than other tests. They were taking anywhere from one to ten seconds.
Ten seconds for a unit test is a huge time. During this period we could
have run hundreds of other tests! As for why these tests took so long to
run? Easy. They were not unit tests. Code had been added that broke that
layer of isolation. Some tests were hitting real web services for
example.&lt;/p&gt;
&lt;p&gt;In order to be fully isolated I proposed a simply solution. &lt;strong&gt;Unplug the
network cable&lt;/strong&gt;. Any tests that failed would not be unit tests. This
gave us one of two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactor the code - remove or stub the dependencies&lt;/li&gt;
&lt;li&gt;Promote the tests to integration/regression tests (only run prior to
    check in)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can take this idea one step further. Next time you run your tests
try running them from a different location. Any tests that fail are
relying on relative/hardcoded paths and will need attention.&lt;/p&gt;
&lt;p&gt;After performing this task on our codebase we had some failures. The
nice thing about solving these failures is that our tests now run a lot
faster. Our slowest tests are now end to end regression tests which are
only run prior to check in or by our CI server. We've also made sure
that from a disaster recover point of view, we can continue developing
locally even if our CI server is not present.&lt;/p&gt;
&lt;p&gt;So take the experiment. Unplug your computer from the network. How many
of your "unit tests" fail?&lt;/p&gt;</content><category term="tdd"></category><category term="unit-testing"></category></entry><entry><title>Recursively Building a Web Service using the same Web Service</title><link href="https://blog.shaunfinglas.co.uk/2012/03/recursively-building-web-service-using.html" rel="alternate"></link><published>2012-03-01T00:00:00+01:00</published><updated>2012-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-03-01:/2012/03/recursively-building-web-service-using.html</id><summary type="html">&lt;p&gt;Back during the later part of 2011 there was a common theme occurring in
our retrospectives each week. How can we replicate our live environment
as close as possible?&lt;/p&gt;
&lt;p&gt;We took steps to achieve this goal by creating a single machine image to
ensure all our machines were configured correctly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back during the later part of 2011 there was a common theme occurring in
our retrospectives each week. How can we replicate our live environment
as close as possible?&lt;/p&gt;
&lt;p&gt;We took steps to achieve this goal by creating a single machine image to
ensure all our machines were configured correctly. Another quick win was
to ensure certain aspects of our live data was restored to our local
development databases during the night. This enabled us to take stack
traces from our logs, and quite literally paste them into our IDE and
replicate the users problem instantly. Without the same data set we
could have seen different results. Despite these positive steps, there
was a missing link in our replication process. How do we simulate the
traffic of our live environment? As an example, we average anywhere from
four to five thousand calculations per minute with our current web
services, with our local and demo environment no where near this figure.&lt;/p&gt;
&lt;p&gt;During 2011 I found myself involved in many deployments in which despite
heavy testing I was uneasy. On our demo environments we could throw the
same amount of load against our services, yet sometime after deploying
our service would fall over. We would quickly have to revert and go back
to the drawing board. The problem we had despite our traffic being
mimicked in terms of volume was the load was not real. Our customers
however have many more variations of requests that we were simply not
predicting. The other obvious issue was during local development, the
service may well handle the same volume of traffic, yet once live and
the process has been running for a few hours - things might go bump.
Factors such as memory or timeouts being the culprits here.&lt;/p&gt;
&lt;p&gt;Collectively we had a few ideas on how to solve this. We looked into low
level solutions such as directing traffic from IIS/apache towards other
servers. We examined other load testing tools, and we even contemplated
creating our own load creator. This internal tool would go over our
database and fire off a number of requests at our demo environment. I
felt uneasy with all these solutions. They were not "real" enough. I
wanted the real time traffic to be submitted to our demo services, only
then could we have full confidence in our work.&lt;/p&gt;
&lt;p&gt;My idea was rather radical in the sense it was so easy, yet dangerous
enough that it might just work. I proposed we integrated our own
service, into itself. In other words, just before our service returns
the results of the calculation, it takes the users request and submits
it again, against our demo environment. The same service would be
recursively submitting into itself. In order to ensure we did not affect
the speed of the service, the submission is performed via an async call,
meaning if this second call was to die the live service would be
unaffected. The obvious downside here was that in order to test this, we
needed to deploy the changes to our live service. This was achieved via
a &lt;a href="http://en.wikipedia.org/wiki/Feature_toggle"&gt;feature toggle&lt;/a&gt;, meaning
at any time we could turn the feature on or off without affecting any
customers.&lt;/p&gt;
&lt;p&gt;The end result of this was that when the feature is enabled, the traffic
on our live service is sent to our demo service. This allows us to
deploy experimental or new features and changes to the demo environment
and check them under real load, with real time data. If all goes well
after a period of time we can deploy to our live service, if not we roll
back and no one is the wiser.&lt;/p&gt;</content><category term="testing"></category></entry><entry><title>Warnings as Errors</title><link href="https://blog.shaunfinglas.co.uk/2012/02/warnings-as-errors.html" rel="alternate"></link><published>2012-02-01T00:00:00+01:00</published><updated>2012-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-02-01:/2012/02/warnings-as-errors.html</id><summary type="html">&lt;p&gt;One thing that annoyed me when starting at Codeweavers was the amounts
of warnings that would occur during a build of any of our projects.
Seeing the build progress only to spew out a screenful of text was
something that did not sit right with me. I was not the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One thing that annoyed me when starting at Codeweavers was the amounts
of warnings that would occur during a build of any of our projects.
Seeing the build progress only to spew out a screenful of text was
something that did not sit right with me. I was not the only one who
felt this was wrong, but as there was so many warnings in some cases, it
was easier just to pretend they were not there. After all everything was
working fine.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.codinghorror.com/blog/2005/06/the-broken-window-theory.html"&gt;broken window
theory&lt;/a&gt;
is very much in action here. During our last standards review we decided
that there should ideally be zero warnings per project. It is worth
mentioning that most of our warnings were just that, warnings about
something that was not really a major issue. Warnings such as unused
variables and so on fall into this area.&lt;/p&gt;
&lt;p&gt;On the other hand, while 90% of our warnings were ignorable, there were
a handful which were rather important. Examples such as referencing
different versions of required .dlls. Warnings like this are extremely
helpful. It would be wrong for these to be hidden among a block of less
serious issues. Warnings such as these once visible, can save hours of
painful debugging.&lt;/p&gt;
&lt;p&gt;Some of our projects had a fair few warnings - in the region of fifty
plus. In order to begin tackling these larger projects we started
slowly. If in a single day I would have removed a batch of warnings,
this was a step in the right direction. After a week or so all our
projects were void of warnings.&lt;/p&gt;
&lt;p&gt;The next step was to make sure we do not go back to having larger
projects with warnings galore. To prevent this I enabled "&lt;strong&gt;Treat
warnings as errors&lt;/strong&gt;" within Visual Studio. This is per project setting
and can be found under the "&lt;strong&gt;Build&lt;/strong&gt;" tab. Do note that you must enable
this for "&lt;strong&gt;All Configurations&lt;/strong&gt;" otherwise any settings you change will
only apply to Debug/Release builds.&lt;/p&gt;
&lt;p&gt;I like this feature of Visual Studio immensely. Having the compilier do
as much work as possible - in this case check for warnings is similar to
a tip found in &lt;a href="http://www.amazon.co.uk/Working-Effectively-Legacy-Code-ebook/dp/B0017DQ8KU/ref=sr_1_3?ie=UTF8&amp;amp;qid=1329313155&amp;amp;sr=8-3"&gt;Working Effectively with Legacy
Code&lt;/a&gt;.
Here the concept of "leaning on the compiler" is introduced. In other
words you introduce an error in order to show you the usages of a piece
of code - this is stark contrast to manually searching for the code in
question.&lt;/p&gt;
&lt;p&gt;The end result of this process is now during a build, if any warnings
occur, the build will fail. The build will report where the warning is,
along with why there is a problem. While this is great in theory it can
cause some slight pain when developing, as you may comment out some code
to experiment only to find the build failing due to unused variables.
Despite this treating warnings as errors has been a great help. Recently
we have solved some pretty serious issues with regards third party
dependencies all thanks to treating warnings as errors.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The idea of allowing the computer to do as much work as possible
applies to all languages. For your compiler/interpreter etc... there
will be an option to apply warnings. This is not a specific language
feature.&lt;/em&gt;&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Log Everything</title><link href="https://blog.shaunfinglas.co.uk/2012/01/log-everything.html" rel="alternate"></link><published>2012-01-01T00:00:00+01:00</published><updated>2012-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-01-01:/2012/01/log-everything.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This post was originally conceived back in mid 2011, starting a new
project made me think back to this event, hence the post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Any developer worth their salt will know what logging is. You could
argue there are two types of logging, either developer logging or
auditing. Developer logging would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This post was originally conceived back in mid 2011, starting a new
project made me think back to this event, hence the post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Any developer worth their salt will know what logging is. You could
argue there are two types of logging, either developer logging or
auditing. Developer logging would be what we log when something goes
wrong. Using the results of this logging we can track down what went
wrong, and put fixes in place to stop this event from occurring again.
If this logging fails, or logs the incorrect thing it is not the end of
the world. Due to this, I generally do not care for testing such
scenarios. The code should behave the same with our without this
logging.&lt;/p&gt;
&lt;p&gt;Auditing would come under logging which as part of the application needs
to be carried out at all times. Consider visiting a cash machine. When
withdrawing fifty pounds, you want to make sure your bank logs this in
case anything goes wrong. This sort of logging is crucial, and must work
and must log the correct data. This is considered a feature, therefore
this should be tested as it is part of the behavior of the application.&lt;/p&gt;
&lt;p&gt;When I think back to my first few years of programming my code was
littered with logging. In the early days after each statement, variable
and function I would print out what happened, along with any errors that
happened. In fact I'd say that everyone starts out like this. The
strange thing is as we get better, the logging becomes less and less.
Rather than the first class citizen we relied on in the early days,
logging is seen as boring. The problem with treating logging code as a
second class citizen is that when things go wrong, it can be very
difficult or near impossible to track down what has happened. When you
realise you need logging, its often too late. You will need to redeploy
the application and wait for the problem to expose itself again.&lt;/p&gt;
&lt;p&gt;Back in 2011 we had a difficult problem to track down. The dreaded
"&lt;code&gt;OutOfMemoryException&lt;/code&gt;". Being the cocky developers we were, we decided
to add the logging last. After all, it was there for when things went
wrong. We never planned things would go wrong, after all it "&lt;em&gt;worked on
my machine&lt;/em&gt;". After redeploying the application with logging we managed
to track down roughly what was going wrong, and in turn began to resolve
the problem. Had we added this logging initially, we could have resolved
this problem in half the time.&lt;/p&gt;
&lt;p&gt;The lesson I learned here was simple. Any time you have an error, log
it. If the logging is not in place, we add it. Creating a new
application? In the first iteration(s) make sure some form of logging is
in place. I believe by following this simple rule any future issues can
be handled easier. Logging should be a first class citizen regardless of
purpose.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Write Unit Tests? Start deleting them</title><link href="https://blog.shaunfinglas.co.uk/2012/01/write-unit-tests-start-deleting-them.html" rel="alternate"></link><published>2012-01-01T00:00:00+01:00</published><updated>2012-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2012-01-01:/2012/01/write-unit-tests-start-deleting-them.html</id><summary type="html">&lt;p&gt;A recent &lt;a href="http://blog.steveklabnik.com/posts/2011-09-22-extracting-domain-models-a-practical-example"&gt;blog post by Steve
Klabnik&lt;/a&gt;
concluded with a statement about tossing unit tests if you have end to
end tests covering the code in question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't be afraid to change the tests! As soon as you've verified that
you've transcribed the code correctly, don't be afraid to just …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A recent &lt;a href="http://blog.steveklabnik.com/posts/2011-09-22-extracting-domain-models-a-practical-example"&gt;blog post by Steve
Klabnik&lt;/a&gt;
concluded with a statement about tossing unit tests if you have end to
end tests covering the code in question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't be afraid to change the tests! As soon as you've verified that
you've transcribed the code correctly, don't be afraid to just nuke
things and start again. Especially if you have integration level tests
that confirm that your features actually work, your unit tests are
expendable. If they're not useful, kill them!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few people on Twitter found this odd, and I'd have included myself in
this statement a while back.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/isaacsanders"&gt;@isaacsanders&lt;/a&gt;
&lt;a href="https://twitter.com/avdi"&gt;@avdi&lt;/a&gt; seeing
&lt;a href="https://twitter.com/KentBeck"&gt;@KentBeck&lt;/a&gt; delete unit tests during his
screencasts changed my TDD process forever.&lt;/p&gt;
&lt;p&gt;— Shaun Finglas (@F1nglas) &lt;a href="https://twitter.com/F1nglas/statuses/160776765353111552"&gt;January 21,
2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://pragprog.com/screencasts/v-kbtdd/test-driven-development"&gt;Kent Beck's TDD
screencasts&lt;/a&gt;
changed my view on deleting unit tests however. During the later videos,
he actually deleted some tests. Pretty much all TDD resources don't
really mention this. One of the key points beginners learn is that if
you break any tests, you've introduced a regression. This is not always
the case. If you follow the rule of never deleting ANY tests you
encounter you are going to be stuck with someone else's implementation
forever. Likewise unit tests are there to drive design, not enforce how
something works. I remember discussing deleting unit tests with my work
colleagues and finding Kent's videos pretty shocking at the time. I mean
deleting unit tests!?&lt;/p&gt;
&lt;p&gt;The more I do TDD, the less this statement becomes so jarring. For
example.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/217feb75bc8facf38534.js"&gt;&lt;/script&gt;

&lt;p&gt;Consider a test for the above behavior, such as we get the result back
in a particular state. Pretend the logic is rather simple, and it does
not warrant a separate object. Any other developer should be free to
come along and change the internals of this method. As long as we get a
result back in the correct state, the test should be valid. The test
should not care that we are using strings, lists or whatever internally.&lt;/p&gt;
&lt;p&gt;Occasionally I find tests like this hard to pass. In other words, I feel
like the logic is correct yet the test fails. Maybe I'm using a new
language feature, or a language feature that seems to be not working as
I expected. If so I'll break out a new unit test that tests the
implementation. Such tests are often refereed to as &lt;a href="http://blog.thecodewhisperer.com/2011/12/14/when-to-write-learning-tests/"&gt;learning
tests&lt;/a&gt;.
Here with a smaller focus I often become aware of what I'm doing wrong.
Following Kent Becks example, I ditch the test after and move on.&lt;/p&gt;
&lt;p&gt;I feel this sums up my feelings nicely.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ELLIOTTCABLE"&gt;@elliottcable&lt;/a&gt;
&lt;a href="https://twitter.com/F1nglas"&gt;@F1nglas&lt;/a&gt;
&lt;a href="https://twitter.com/isaacsanders"&gt;@isaacsanders&lt;/a&gt;
&lt;a href="https://twitter.com/KentBeck"&gt;@kentbeck&lt;/a&gt; let them [tests] guide you
to a design but don't let them hold you to a design.&lt;/p&gt;
&lt;p&gt;— Avdi Grimm (@avdi) &lt;a href="https://twitter.com/avdi/statuses/160780747827974145"&gt;January 21,
2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;I and others are not saying bin every unit test you have that is covered
by end to end tests. Unit tests are great, you can run hundreds in a
matter of seconds. They have their place as part of the development
process, but do not find yourself working against them. However I am
saying you should delete any test which relies on implementation
details. I am saying bin any test which does not make sense. I am also
saying bin tests as part of a refactoring session as long as you have
test coverage higher up. If you don't have test coverage such as
acceptance tests, you cannot be sure you have not broke anything after
the refactor.&lt;/p&gt;</content><category term="programming"></category><category term="tdd"></category><category term="unit-testing"></category></entry><entry><title>6 Ways to Speed Up Selenium Tests</title><link href="https://blog.shaunfinglas.co.uk/2011/12/6-ways-to-speed-up-selenium-tests.html" rel="alternate"></link><published>2011-12-01T00:00:00+01:00</published><updated>2011-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-12-01:/2011/12/6-ways-to-speed-up-selenium-tests.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2011/12/how-to-achieve-more-stable-end-to-end.html"&gt;Having finally achieved more stable end to end
tests&lt;/a&gt;
via Selenium, we figured it would be worth while sharing how we achieved
this. The following are six steps we've found that you can do to make
Selenium tests more stable.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turn off automatic updates for your browser/plugins&lt;/li&gt;
&lt;li&gt;Set your …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2011/12/how-to-achieve-more-stable-end-to-end.html"&gt;Having finally achieved more stable end to end
tests&lt;/a&gt;
via Selenium, we figured it would be worth while sharing how we achieved
this. The following are six steps we've found that you can do to make
Selenium tests more stable.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turn off automatic updates for your browser/plugins&lt;/li&gt;
&lt;li&gt;Set your IIS (or equivalent) app timeouts to zero&lt;/li&gt;
&lt;li&gt;Create a base Selenium Fixture for use in your tests&lt;/li&gt;
&lt;li&gt;Update to the latest version of Selenium&lt;/li&gt;
&lt;li&gt;Warm up your apps prior to testing&lt;/li&gt;
&lt;li&gt;Ditch Selenium - test at the API level&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Turning off automatic updates seems like a no brainer, but after a fresh
install we forgot to do this once and spent some time figuring out why
Firefox would not load on the CI server. It turns out that the "You've
just updated" window was blocking the test from continuing as it had
stole focus.&lt;/p&gt;
&lt;p&gt;The second point is with regards caching and the general responsiveness
of your application. We have a few applications that take about thirty
seconds to fully warm up due to the huge data set they rely on. If we
can build this cache once, then store it for as long as possible,
subsequent hits to the app should be instant. In other words, we try to
mirror our live environment as much as possible.&lt;/p&gt;
&lt;p&gt;Our custom test fixture attribute enables the ability to modify all
Selenium tests in one go. We found that from 3am to 5am our databases
undergo maintenance, therefore we do not run our regression tests during
this time. All this took was one change within the attribute to apply to
all tests. For example:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a23514ff0aecd9e496a6.js"&gt;&lt;/script&gt;

&lt;p&gt;We simply inherit from &lt;a href="http://www.nunit.org/index.php?p=testFixture&amp;amp;r=2.5.10"&gt;NUnit's
TestFixtureAttribute&lt;/a&gt;
and use this custom attribute rather than the standard TestFixture
attribute. The inheritance is required to ensure that third party tools
such as test runners still work as expected.&lt;/p&gt;
&lt;p&gt;Previously we were using Selenium 1.x with Sauce RC. Having ditched this
and &lt;a href="http://seleniumhq.org/docs/appendix_migrating_from_rc_to_webdriver.html#migrating-to-webdriver-reference"&gt;upgraded to Selenium
2.x&lt;/a&gt;
we've been able to update our browsers to the latest versions, in turn
this allows improved speed and stability when running the tests.&lt;/p&gt;
&lt;p&gt;On our local development machines the application you are working on is
often in memory, meaning subsequent hits should be much faster after all
dependencies are loaded and cached. The issue we discovered on our CI
server was that after a fresh build of the whole codebase, the initial
hits to the applications would be very slow. To combat this we added a
warm up step to our build. Just before the tests are run we would
perform a HTTP GET to invoke our applications start up processes. This
added somewhere in the region of thirty seconds to the build, but the
increase in stability is staggering. No longer will Selenium report
timeouts.&lt;/p&gt;
&lt;p&gt;Finally the fastest end to end tests come from not using Selenium.
Ditching the browser completely and testing as high up in your API is
the quickest, and most stable solution. Combining this thinking, with a
handful of dumb Selenium tests that just check for the likes of 404s
seems to be the most optimal solution currently.&lt;/p&gt;
&lt;p&gt;Having done these at some point over the past few months we're starting
to get to a more stable point with our Selenium tests. We'll be looking
to take this forward with future tests and hope to enjoy continued
stability.&lt;/p&gt;</content><category term="tutorial"></category><category term="testing"></category></entry><entry><title>How to Achieve More Stable End to End Tests</title><link href="https://blog.shaunfinglas.co.uk/2011/12/how-to-achieve-more-stable-end-to-end.html" rel="alternate"></link><published>2011-12-01T00:00:00+01:00</published><updated>2011-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-12-01:/2011/12/how-to-achieve-more-stable-end-to-end.html</id><summary type="html">&lt;p&gt;Recently myself and another colleague wrote an &lt;a href="http://en.wikipedia.org/wiki/Acceptance_testing"&gt;acceptance
test&lt;/a&gt; for a feature
that had yet to be implemented. For this end to end test we used
&lt;a href="http://seleniumhq.org/"&gt;Selenium&lt;/a&gt;, after all we wanted to test the
whole feature so this made sense. Our test performed some simple user
input, performed a calculation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently myself and another colleague wrote an &lt;a href="http://en.wikipedia.org/wiki/Acceptance_testing"&gt;acceptance
test&lt;/a&gt; for a feature
that had yet to be implemented. For this end to end test we used
&lt;a href="http://seleniumhq.org/"&gt;Selenium&lt;/a&gt;, after all we wanted to test the
whole feature so this made sense. Our test performed some simple user
input, performed a calculation and checked the response. The problem
with the test was it was very brittle. If the application had not
recently been used, the massive data set the application relied on would
not be cached.&lt;/p&gt;
&lt;p&gt;To get around this we added a few
&lt;a href="http://msdn.microsoft.com/en-us/library/d00bd51t.aspx"&gt;Thread.Sleep()&lt;/a&gt;
statements into the test. This worked rather well for the majority of
test runs, but sometimes these pauses were not long enough. On the other
hand sometimes the data was cached, meaning these sleeps would be
unnecessary. One resource which has recently done the rounds was
regarding useful &lt;a href="http://www.bonitasoft.org/blog/tutorial/how-to-get-faster-selenium-test-cases-execution/"&gt;advice about using WaitForPageLoad() and
WaitForCondition()&lt;/a&gt;.
WaitForCondition will only execute once a condition has been met, such
as a element becoming visible. This meant that for the times when the
dataset was in memory the test would be executed immediately, while the
times when the data was being loaded, the test would simply wait until
the test was ready to move on. This was a very simple, yet highly
effective tweak to our tests. The execution time went from roughly
thirty seconds, to just less than ten seconds in one case.&lt;/p&gt;
&lt;p&gt;This was not the end of the battle to achieve more stable Selenium
tests. Some of our tests were still rather flaky. Some mornings we would
enter work, notice the red build and discover that the several failed
tests were down to Selenium timeouts. During the daytime however, we
rarely had these issues. In order to fix these problems I increased the
frequency of builds. The idea being the more we run our builds the more
chance we have of spotting the errors. After all, if something was to
fail at 2am, I am unlikely to care. 2pm however, and the team will be
all over it. By making the problem more visible, we would be forced to
fix the outstanding issues.&lt;/p&gt;
&lt;p&gt;The aim was to make the tests as fast as possible, while maintaining
stability. One thing the excellent &lt;a href="http://www.amazon.co.uk/Growing-Object-Oriented-Software-Guided-Signature/dp/0321503627"&gt;Growing Object-Oriented Software
(Goos)&lt;/a&gt;
touches on is the aspect of not needing to perform end to end testing at
the GUI all the time. The benefit of not touching the UI is huge. Your
tests are faster, they're more stable and a heck of lot easier to write.
The other nice benefit of testing from an API point of view, rather than
the browser is it forces you to decouple your app from the views. If
you're not writing &lt;a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model"&gt;fat models and skinny
controllers&lt;/a&gt;,
you'll have adapt in order to test as much of your application as
possible without hitting the UI.&lt;/p&gt;
&lt;p&gt;What about the remaining part of your feature that is not covered by the
application? I like to imagine this part as the tip of an iceberg. As
this area is small enough the actual UI testing you need should be
minimal. So here we can let Selenium do what it is good at. Click
things. Selenium is great at this. All you need to do at this level is
check for 404s, incorrect page titles and a few other mundane aspects of
the UI. There should be no need to check if your actual application is
correct at this level. For correctness, you should have a large suite of
fast, isolated, unit tests.&lt;/p&gt;
&lt;p&gt;Another point to consider is how often your view actually changes, in
comparison to your actual underlying API. A designer should be free to
move things, rename content, add images and so forth without breaking
tests. As long as there is a calculate button somewhere on the page, and
said button takes you to a result page, who cares about everything else?
Likewise the code underneath can be consistently changing behind the
scenes, as long as the API remains constant, our tests should always be
valid.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For the technical low down on some of the ways we are achieving more
stable end to end tests, check out &lt;a href="6-ways-to-speed-up-selenium-tests.html"&gt;six tips to speed up Selenium
tests&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="tutorial"></category><category term="testing"></category></entry><entry><title>Smalltalk Conversion mapped to C#</title><link href="https://blog.shaunfinglas.co.uk/2011/10/smalltalk-conversion-mapped-to-c.html" rel="alternate"></link><published>2011-10-01T00:00:00+02:00</published><updated>2011-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-10-01:/2011/10/smalltalk-conversion-mapped-to-c.html</id><summary type="html">&lt;p&gt;Lately the team has been making some rather drastic changes and
re-designs to our codebase in an attempt to minimise friction to change.
In other words, we've identified areas that are painful or tedious to
work in and have hopefully rectified them by re-writing the code. The
proof of this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately the team has been making some rather drastic changes and
re-designs to our codebase in an attempt to minimise friction to change.
In other words, we've identified areas that are painful or tedious to
work in and have hopefully rectified them by re-writing the code. The
proof of this should be felt as we begin adding new features, the newly
improved code is certainly faster and more optimised.&lt;/p&gt;
&lt;p&gt;Regardless, one area that remains troublesome in my opinion is object
mapping (or the correct term of conversion) code. While I've not
personally been involved with this reworking of the codebase, I have
recently just finished reading Kent Beck's - &lt;a href="http://www.amazon.co.uk/Smalltalk-Best-Practice-Patterns-Kent/dp/013476904X"&gt;Smalltalk Best Practice
Patterns&lt;/a&gt;.
Many of the developers I follow on Twitter have been blogging about this
book and I figured it was time to give it a go. After all it gets
massive praise whether or not you use
&lt;a href="http://en.wikipedia.org/wiki/Smalltalk"&gt;Smalltalk&lt;/a&gt;. While reading this
book a few key points regarding object conversion are discussed and I
found them incredibly relevant.&lt;/p&gt;
&lt;p&gt;So should you read the book? I would say yes. I don't program in
Smalltalk. I don't plan on programming Smalltalk. Nor had I read a line
of Smalltalk before. But you should still read this book. The first half
is incredibly relevant to any OO programming language. Granted I found
the second half is less useful, but the gems I've picked up in the first
half more than make up for this. In fact, pages 28 to 30 are so good I
figured it would be worth sharing.&lt;/p&gt;
&lt;p&gt;I've been convinced for a while that creating separate objects to
convert objects is unnecessary, and in fact adds to the amount of code
you need to write and maintain, thus increasing resistance for change.
So if we remove this unecesary, intermediate object, how do we create a
new object from another object? The answer is conversion. This answer
strangely comes from a book all about Smalltalk. The answer also
strangely comes from a book over ten years old. Pages 28 - 30 cover the
topic of conversion. The following is quoted heavily from the book, but
I recommend reading the pages in full.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Conversion&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt; - How do you convert information from one object's format
to another's?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt; - Convert from one object to another rather than overwhelm
any one object's protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What this is getting at is we could using &lt;a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx"&gt;C#
extension&lt;/a&gt;
methods do the following to the String class.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/1eb9482e9dfff30922bb.js"&gt;&lt;/script&gt;

&lt;p&gt;This would be abusing the String class. If we want a postcode from a
string, we should have the Postcode object create us a Postcode from a
string, not the other way around. There could be hundreds of conversions
from strings to a new object, but we would violate the string class if
we did this. In turn, Kent goes on to say "&lt;em&gt;Conversions that return
similar responsibilities should use a Convert Method. To convert to an
object with different protocol use a Converter Constructor Method&lt;/em&gt;".&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Converter Method&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt; - How do you represent simple conversion of an object to
another object with the same protocol but different format?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt; - Provide a method in the object to be converted that
converts to the new object. Name the method by pre-appending "as" to
the class of the object returned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In C# this would be:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/9c14d32dbf69e57f2ba0.js"&gt;&lt;/script&gt;

&lt;p&gt;In C# the convention is to use &lt;code&gt;To&lt;/code&gt; rather than &lt;code&gt;As&lt;/code&gt; for converter
methods. For example we could do quotes.ToArray() on a List of Quotes.
We still have the same protocol, a collection of quotes, we are just
storing them in a different format. The rule for adding such methods is
that there should only be one sensible way to perform this conversion,
and the source and destination share the same protocol.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Converter Constructor Method&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt; - How do you represent the conversion of an object to
another with different protocol?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt; - Make a constructor method that takes the object to be
converted as an argument&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script src="https://gist.github.com/Finglas/f5445a00b9bf8e8e14d0.js"&gt;&lt;/script&gt;

&lt;p&gt;In our codebase we have a &lt;code&gt;RegistrationDate&lt;/code&gt;object. We have a
constructor that takes a string representation of the date (from the
outside world) and constructs a &lt;code&gt;RegistrationDate&lt;/code&gt;. This very same
principle can be applied to other, more complex objects. For example
consider an active record style approach below. Here
&lt;code&gt;QuoteRecord&lt;/code&gt;represents our database object, with &lt;code&gt;Quote&lt;/code&gt;representing
a domain object. The following would be the converter constructor
method. In other words, we create (or convert) our quote from the quote
record. No separate mapper. No intermediate object. Less resistance for
change.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/46bc94e12209385fc9ff.js"&gt;&lt;/script&gt;

&lt;p&gt;The benefit here is that we have minimised friction. If the requirements
for this code changes we will need up to update at worst, the record and
the domain object. Had we used a separate object to perform the mapping
we would end up with a third place to maintain if we decided to add a
new property to our &lt;code&gt;QuoteRecord&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I'll admit to having only used this technique for a week or so, though
so far it has worked a treat and I expect it to continue working
considering these techniques have stood the test of time.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>The Best Code is Written Twice</title><link href="https://blog.shaunfinglas.co.uk/2011/10/the-best-code-is-written-twice.html" rel="alternate"></link><published>2011-10-01T00:00:00+02:00</published><updated>2011-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-10-01:/2011/10/the-best-code-is-written-twice.html</id><summary type="html">&lt;p&gt;Recently myself and two colleges completed a new feature in an
afternoon's programming session. Despite this we ended up binning the
feature after all agreeing it was horribly complicated and in turn would
cause far more problems down the road than it would solve.&lt;/p&gt;
&lt;p&gt;We decided to rewrite the feature …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently myself and two colleges completed a new feature in an
afternoon's programming session. Despite this we ended up binning the
feature after all agreeing it was horribly complicated and in turn would
cause far more problems down the road than it would solve.&lt;/p&gt;
&lt;p&gt;We decided to rewrite the feature again, but applying all the lessons we
had learned from the first attempt. A recent &lt;a href="http://www.redcode.nl/blog/2011/10/great-code-is-written-twice-or-more/"&gt;blog post by
royvanrijn&lt;/a&gt;
on this very topic made me appreciate what we had done. He points out
that the best code occurs from several attempts, and unlike what people
may expect, the repeat attempts need not take the same amount of time to
deliver as the initial attempt.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The second time you write the code, it'll only take a fraction of the
time it took initially.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This principle of repeating a task made me think of when I was
decorating my old bedroom. I helped partake in the difficult task of
wallpapering the ceiling. Prior to this I had experience wallpapering
before, and would have no trouble repeating this exercise again.
However, wallpapering a ceiling was something completely new. Me and my
dad were reluctant to start, until I had a rather devious plan. We would
decorate my brothers room first, followed by mine. That way, if our
first attempt was a disaster I would not be the one living with the
dodgy ceiling.&lt;/p&gt;
&lt;p&gt;It turned out that our first efforts were not too bad. Granted it took a
while, there was the odd rough patch and several obscenities were used,
but we got the job done. For the second room we completed the task much
quicker and with practically no problems.&lt;/p&gt;
&lt;p&gt;The process of wallpapering the second ceiling was the DIY equivalent of
scrapping our feature and rewriting the code. We never stripped the
first ceiling afterwards, we just took everything we learned from the
first round and used it to make the process of papering the second
ceiling much easier. The interesting point to bare in mind with
scrapping code and rewriting is the rewrite will not take the same
amount of time to get back up to speed. Just because it takes &lt;em&gt;n&lt;/em&gt; to
implement a feature, the second time around you can often complete the
feature in less time, at much higher quality.&lt;/p&gt;
&lt;p&gt;I'm not suggesting all code should be rewritten multiple times. &lt;a href="http://www.extremeprogramming.org/rules/spike.html"&gt;Spike
solutions&lt;/a&gt; are often
a more suitable process to ease the development process, but in certain
cases practice makes perfect, even if it means you wait that little bit
longer for the perfect ceiling.&lt;/p&gt;</content><category term="programming"></category><category term="retro"></category></entry><entry><title>Ten Things a graduate will experience during their first year at Codeweavers</title><link href="https://blog.shaunfinglas.co.uk/2011/08/ten-things-graduate-will-experience.html" rel="alternate"></link><published>2011-08-01T00:00:00+02:00</published><updated>2011-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-08-01:/2011/08/ten-things-graduate-will-experience.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kanban&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The importance of value and flow are the heart of day to day running
at Codeweavers. During my time I've read books such as &lt;a href="http://www.amazon.co.uk/Goal-Process-Ongoing-Improvement/dp/0566086654"&gt;The
Goal&lt;/a&gt;
and &lt;a href="http://www.amazon.co.uk/Toyota-Way-Management-Principles-Manufacturer/dp/0071392319"&gt;The Toyota
Way&lt;/a&gt;
in which the likes of the &lt;a href="http://en.wikipedia.org/wiki/Theory_of_Constraints"&gt;Theory of
Constraints&lt;/a&gt; and
the &lt;a href="http://en.wikipedia.org/wiki/Toyota_Production_System"&gt;Toyota Production
System&lt;/a&gt; are
discussed. I was also …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kanban&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The importance of value and flow are the heart of day to day running
at Codeweavers. During my time I've read books such as &lt;a href="http://www.amazon.co.uk/Goal-Process-Ongoing-Improvement/dp/0566086654"&gt;The
Goal&lt;/a&gt;
and &lt;a href="http://www.amazon.co.uk/Toyota-Way-Management-Principles-Manufacturer/dp/0071392319"&gt;The Toyota
Way&lt;/a&gt;
in which the likes of the &lt;a href="http://en.wikipedia.org/wiki/Theory_of_Constraints"&gt;Theory of
Constraints&lt;/a&gt; and
the &lt;a href="http://en.wikipedia.org/wiki/Toyota_Production_System"&gt;Toyota Production
System&lt;/a&gt; are
discussed. I was also lucky enough to visit Toyota to see these
practices in play.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pair Programming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A big part of our day to day work is done via pair programming.
There are huge benefits to pair programming, but being a graduate
within an organisation where pair programming is the norm is a huge
benefit. Graduates usually enter the workplace with no experience in
the business domain and limited technical experience. Being set
loose initially would be a disaster. Graduates therefore typically
shadow other developers often spending anywhere from weeks to months
until they able to commit any code without supervision. With
Codeweavers this was not an issue. From day one I was committing
code despite being the least knowledgeable member of the team. In
fact, my earliest memory of my first day involved fixing a defect in
a codebase of which I knew nothing about. Thanks to my partner, this
lack of knowledge was not an issue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feature Toggles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The concept of a &lt;a href="http://www.upstarthq.com/2010/04/introduction-to-minimum-marketable-features-mmf/"&gt;Minimal Marketable Feature
(MMF)&lt;/a&gt;
can be a catch 22 scenario. We want to develop tiny incremental
features for rapid feedback, yet our customers want feature X in its
entirety. In order to deliver features in this manner the concept of
feature toggles are essential. Essentially code which will toggle a
feature on or off is often deployed with any new features we
provide. This means if something goes wrong we can instantly disable
the feature without a new deployment being required. Likewise the
ability to toggle features enables half finished features to be
demoed to a customer within a live environment. Once a feature is
deemed stable, these toggles can be removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Work in Parallel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Somewhat tied to feature toggles is the concept of working in
parallel or being "system green". In other words the mainline trunk
from which we develop from should be deployable at any time. A
benefit of working in this manner is if a feature needs disabling
the old code is always ready to be enabled, likewise if an emergency
fix needs deploying this can be delivered as soon as possible. There
are day to day benefits from working in parallel as well. By making
changes in parallel, at any one time the checked out code is only
briefly in a state of being un-buildable, if we developed in a big
bang approach, there could be hundreds upon hundreds of compiler
errors to wade through. The important concept when working in
parallel is to ensure the old code which is being extended, or
replaced is cleared away once the new feature is live. The last
thing we want is old code rotting with developers too afraid to
delete it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Best Practices&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is fair to say that all the developers at Codeweavers want to
develop the best code they can. Due to this practices such as
&lt;a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29"&gt;SOLID&lt;/a&gt;and
other best practices are discussed, carried out and encouraged.
While I'd say that via books, the internet and other resources I
have been exposed to these practices working in a industry scenario
makes these concepts much more important and realistic. We all know
what a "perfect" solution would be, however with deadlines and other
limiting factors sometimes a more pragmatic solution is required,
despite the inner perfectionists inside us all wanting to spend
hours refactoring to a better solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Failure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There have been times when I have out rightly failed. One of my
biggest regrets comes from a feature in which I let the database
schema dictate the business logic. Needless to say as the business
requirements evolved, the code which was so dependent on how the
database persisted the data became near impossible to refactor
without a rewrite. This rewrite never occurred due to deadlines
meaning the feature had to go live despite myself feeling rather
ashamed at how badly things had become. Despite this failure, it
proved to be a huge learning experience and something I do not plan
on repeating. Every time I have failed, it has helped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Starting Again - "a graceful retreat"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prior to Codeweavers had I been stuck on a particular task I would
have slogged away at it until the problem was resolved. Often this
would mean fighting my way through a task into the early hours of
the morning. By applying the principle of a "graceful retreat" I can
very easily delete code and start fresh. Very quickly you will be
back where you were before but in a much better condition, having
learned from past experiences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spike Solutions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href="http://www.extremeprogramming.org/rules/spike.html"&gt;spike
solution&lt;/a&gt; is
essentially a throw away prototype developed before we begin a MMF
in order to learn more about the problem at hand, or to test various
solutions. The name refers to the fact that if you were to plot your
velocity on a graph, after having produced a prototype you should
have reduced the risk to the project, thus implement the feature for
real easier and quicker. Every time we have developed a spike
solution prior to an MMF developers often comments on how it helped,
either by providing a learning experience or simply enabling the
feature to be split into further MMF's. It is because of these
benefits I am becoming to the conclusion that every new feature
should have a quick spike solution prior to production work
beginning, after all it is not easy to write tests for code you are
not quite sure you know how to implement. Spikes enable this
confusion to be cleared away upfront, allowing the production
implementation to run smoothly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conferences&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For the most part I enjoyed university immensely. With regards the
educational aspects I would find that after an interesting lecture a
huge sense of motivation and interest within the subject. Spending
additional time outside of a lecture discussing concepts with others
was both valuable and fun. Having finished university I am a strong
believer that I should maintain this inspiration and motivation.
Thankfully Codeweavers provides the ability to further ourselves,
and I've been lucky to attend several conferences this past year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Practice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Having experienced one year of Codeweavers the old saying of
"&lt;em&gt;Practice practice practice&lt;/em&gt;" still holds true. Whether it be from
books, conferences or general day to day work. No one can stop
learning or furthering themselves if they wish to continue day to
day software development. For this very reason I'm grateful, but
this rule bears repeating and I look forward to another year of
practice and improvement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="retro"></category></entry><entry><title>Mapping Objects via TDD</title><link href="https://blog.shaunfinglas.co.uk/2011/06/mapping-objects-via-tdd.html" rel="alternate"></link><published>2011-06-01T00:00:00+02:00</published><updated>2011-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-06-01:/2011/06/mapping-objects-via-tdd.html</id><summary type="html">&lt;h3&gt;Why we map?&lt;/h3&gt;
&lt;p&gt;Many times at Codeweavers we often have tasks which involve mapping
between various objects. It is no secret that I dislike such tasks. The
reason we map between objects though is actually a good thing as pointed
out by several developers. Mapping means our components are less …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Why we map?&lt;/h3&gt;
&lt;p&gt;Many times at Codeweavers we often have tasks which involve mapping
between various objects. It is no secret that I dislike such tasks. The
reason we map between objects though is actually a good thing as pointed
out by several developers. Mapping means our components are less
coupled. For example, we can write one feature and then simply map
different web services to use this feature. If we chose not to map to a
common object we would need to re-implement this functionality for each
service. Therefore not only do we decouple our code, but our codebase is
much &lt;a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRYer&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What ways do we do it?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One approach is a test per property. One developer will write a
    failing test for a property (accessor), while the other developer
    writes the code to make this test pass. During this process the
    keyboard flicks back between each developer very rapidly, in fact
    most of the time when writing a property per test is spent sliding
    the keyboard to the other developer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another approach we have tried on occasion is to have one developer
    write one test for the whole class, while the second developer will
    write the mapping code to make this test pass. We may or may not
    split each assert into separate tests. TDD purists will find this
    odd, as it does indeed go against our normal work flow. On the other
    hand, the reason we do this is the tests and code are virtually
    identical; therefore it is quicker. The downside with this "big bang
    approach" is the developer writing the code to make the tests pass
    may miss something. If this happens, finding out what is wrong is
    much harder as the code was written in one big go.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The final approach we have attempted is to not test mapping code,
    after all what could go wrong? It turns out a lot. Mapping often
    defaults values to specific values, or is subtly different to the
    source object. Much time can be wasted when all your tests are
    passing, yet the application is falling over because some data is
    being set incorrectly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What is wrong with this approach?&lt;/h3&gt;
&lt;p&gt;My main gripes with mapping, albeit an integral part of our development
process is how boring it is. Not to mention how slow mapping tests can
be to write. After an hour to have successfully mapped an object you
feel exhausted, not because of how challenging the process was, but how
tedious the task was. I also cannot seem to shake the fact that after
this process is complete you feel as if you are exactly the same
distance away from your goal as you were before. For someone on the
outside looking in, no "real" work has been done.&lt;/p&gt;
&lt;h3&gt;Enter AutoMapper&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://automapper.codeplex.com/"&gt;AutoMapper&lt;/a&gt;is a project I wish I had
created myself. AutoMapper as the name suggests will map objects to
other objects on your behalf. For example, imagine a view model that
needs mapping from a bog standard DTO. Providing the objects names
follow the same conventions, auto mapper will automatically map these
values for you. Currently we have only used this on an internal project,
though based on the official website AutoMapper's &lt;a href="http://automapper.codeplex.com/wikipage/comments"&gt;usage is
widespread&lt;/a&gt; with great
success.&lt;/p&gt;
&lt;p&gt;Not all mapping is straight property to property however. Sometimes the
source or destination will be of a different type. AutoMapper can handle
this. It is worth mentioning special flavours of mapping such as enums
are supported straight out of the box too. Additionally not all mapping
is one to one. Other times &lt;a href="http://automapper.codeplex.com/wikipage?title=Null%20Substitution&amp;amp;referringTitle=Home"&gt;default
values&lt;/a&gt;
may be required, but AutoMapper's fluent interface allows this to be
achieved with limited fuss. AutoMapper can also handle more bespoke,
advanced mapping scenarios. For example we mapped a raw string into a
complete object with default values. This required a &lt;a href="http://automapper.codeplex.com/wikipage?title=Custom%20Value%20Resolvers&amp;amp;referringTitle=Home"&gt;custom value
resolver&lt;/a&gt;
to be wrote, which in turn defeats the purpose of using a tool like
AutoMapper but as this scenario was a one off this was not a problem.
All together we're becoming big fans of this tool, it is just a shame it
has taken so long for us to discover it.&lt;/p&gt;
&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;p&gt;There are huge benefits to using AutoMapper. After getting to grips with
the tool we have been able to map a complete webservice within less than
thirty minutes. The trick to creating a hierarchy (objects containing
other objects) is to take a bottom up approach. By taking this approach
each step is gradual and steady. You are not forced to implement a large
chunk of functionality in one go. In combination the way to test this
was to use the built in &lt;a href="http://automapper.codeplex.com/wikipage?title=Configuration%20Validation&amp;amp;referringTitle=Home"&gt;AutoMapper
validation&lt;/a&gt;.
This one assert will ensure that any mapping that has been written is
indeed valid. This will cover all your standard scenarios. From here, we
wrote one test per object to ensure that any defaulting we had set up
was indeed performed. For the scenario discussed above the webservice
response had around ten types, this meant ten, quick unit tests ensured
the whole mapping functionality worked correctly. The built in testable
assertion makes much of this process a joy to do. While the two main
methods you use with AutoMapper are static, we simply wrapped these in
instance methods that we use in our production code.&lt;/p&gt;
&lt;p&gt;Like most open source projects, the documentation for AutoMapper is
pretty weak, though the error output you receive when developing is
outstanding. Each failed test will indicate in plain English what is
wrong, and better yet how to solve it. A few of us are pretty excited
about AutoMapper and I look forward to mapping again in the future,
something I feel odd stating. Yes, this tool is that good.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Unit Testing C# attributes</title><link href="https://blog.shaunfinglas.co.uk/2011/05/unit-testing-c-attributes.html" rel="alternate"></link><published>2011-05-01T00:00:00+02:00</published><updated>2011-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-05-01:/2011/05/unit-testing-c-attributes.html</id><summary type="html">&lt;p&gt;For a recent coding session I needed to handle an exception being thrown
when some Json was incorrectly bound to a view model. With the framework
we were using (&lt;a href="http://www.asp.net/mvc" title="ASP.NET MVC2"&gt;ASP.NET&lt;/a&gt; MVC2) I
was unable to handle the exception at the controller level, nor could I
handle it at the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a recent coding session I needed to handle an exception being thrown
when some Json was incorrectly bound to a view model. With the framework
we were using (&lt;a href="http://www.asp.net/mvc" title="ASP.NET MVC2"&gt;ASP.NET&lt;/a&gt; MVC2) I
was unable to handle the exception at the controller level, nor could I
handle it at the "global" level when the framework carries out its
bindings. Another way ASP.NET MVC handles &lt;a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.handleerrorattribute.aspx"&gt;exceptions is via
attributes&lt;/a&gt;
to catch errors you specify. The resulting exception is strongly typed
and then can be passed into a view, from which you have full control of
what to do. Typically we would log the error, display a friendly message
and so forth.&lt;/p&gt;
&lt;p&gt;In the past these attributes have been simply applied without a test -
the general consensus being this was a framework specific thing which
had no value in being tested. I agreed with those statements up until
several minutes ago. Having fixed a defect in which the user was not
seeing a friendly error message I carried on with a new feature only to
find somehow the error handling had broken. It turned out I had indeed
broken the attribute by providing an incorrect parameter.&lt;/p&gt;
&lt;p&gt;As luck would have it there is a very nice, quick way to &lt;a href="http://stackoverflow.com/questions/2007434/how-to-nunit-test-for-a-methods-attribute-existance"&gt;unit test
attributes as discussed on
StackOverflow&lt;/a&gt;.
In the end I created several tests to check the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The type of the attribute is correct&lt;/li&gt;
&lt;li&gt;The attributes properties were correctly set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tests ended up ensuring that my action does indeed handle certain
exceptions, redirecting the user to the correct view. The nice thing
about these tests are they will only take minutes to write next time,
yet save me a long time figuring out why the error handling has broken.
Plus being unit tests they execute in the blink of an eye, no need to
write a regression test to check the redirection has been carried out.
These tests are therefore more "documentation" of how the system should
behave.&lt;/p&gt;</content><category term="testing"></category></entry><entry><title>Getters and Setters are Evil</title><link href="https://blog.shaunfinglas.co.uk/2011/04/getters-and-setters-are-evil.html" rel="alternate"></link><published>2011-04-01T00:00:00+02:00</published><updated>2011-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-04-01:/2011/04/getters-and-setters-are-evil.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: There is a &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/getters-and-setters-are-evil-redux.html"&gt;new
version&lt;/a&gt;
of this post.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I've been programming with OO languages since I was seventeen yet in the
last week I've had what is without doubt one of the biggest learning
experiences since I've started.&lt;/p&gt;
&lt;p&gt;Numerous developers that I've worked with claimed that we aren't doing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: There is a &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/getters-and-setters-are-evil-redux.html"&gt;new
version&lt;/a&gt;
of this post.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I've been programming with OO languages since I was seventeen yet in the
last week I've had what is without doubt one of the biggest learning
experiences since I've started.&lt;/p&gt;
&lt;p&gt;Numerous developers that I've worked with claimed that we aren't doing
OO properly. By we I mean software developers as a whole. Their argument
being having all your code defined in classes does not mean you are
obeying OO principles. By this they are often referring to the "&lt;a href="http://pragprog.com/articles/tell-dont-ask"&gt;Tell
Don't Ask&lt;/a&gt;" principle. One
particular individual at Codeweavers introduced me to idea that getters
and setters are evil. While not true at face value, this statement is to
get you thinking about what you expose to the outside world. Consider
one of the founding pillars of OO programming; encapsulation.&lt;/p&gt;
&lt;p&gt;Encapsulation states that an objects internal state should be just that,
internal. If we want a object to do something we should tell it. We
shouldn't care how its done either. The more I begin to think about what
I'm programming the more I begin to question myself. In a recent
programming session this was even more apparent. I stumbled across a
situation in which I wished to hide a objects internal state, and in
turn tell the object to do stuff. The problem I encountered was how the
hell do I display the state of this object to the user (say on a GUI)
without adding a load of properties (getters/setters).&lt;/p&gt;
&lt;p&gt;Had I added the properties to the object I could ignore the methods on
the object and just dig down and fiddle the objects internal state from
the outside. This was not right, alarms bells were going off yet I was
unsure how to solve this. Thankfully some inspiration from a helpful
&lt;a href="http://stackoverflow.com/questions/5573479/oo-encapsulation-object-conversion-to-get-to-innards"&gt;StackOverflow
user&lt;/a&gt;
and advice from a collegue pointed me in the right direction.&lt;/p&gt;
&lt;p&gt;The solution was simple and can be summarised in the following pseudo
code:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/c9e599dd3d133c60a6b2.js"&gt;&lt;/script&gt;

&lt;p&gt;A more encapsulated approach could be:&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/cf632d3c42c1951ff144.js"&gt;&lt;/script&gt;

&lt;p&gt;A business object should property free, or at least only able to be
updated from the outside world by asking it to do something. Its
internal state may be internal to the class itself, or there may be a
DTO passed in at construction it matters not. The Writer in this case is
an abstraction around some form of output. We could have a console
writer, HTML writer, Json writer and so on. By inverting the dependency
we can avoid adding properties to the business object. Any consumer of
this object must invoke the business object's methods - aka tell the
object to do stuff. There is no way of the outside world modifying this
objects internal state without abiding by the business rules. What's
nice about this revelation?&lt;/p&gt;
&lt;p&gt;There are many examples of this pattern at Codeweavers, yet I was
unaware of the problem it was solving. By being burned by this issue
personally the reason for patterns such as the one detailed above become
much clearer and stand out. Whats better is when this problem crops up
again I'll be able to handle it.&lt;/p&gt;
&lt;p&gt;Properties or accessors have their place. They are required for DTOs,
frameworks and certain language features, yet as with any tool their
usage should always be considered. Blindly adding properties to a
object, or worse, having the IDE auto generate accessors to an objects
state is a clear problem. The biggest lesson I've took away is that even
for input/output the use of accessors is not required. As usual the
Codeweavers saying of "&lt;em&gt;if it feels wrong, it probably is&lt;/em&gt;" still holds
true and on that I'm off to try and write some proper OO code for the
first time in six years...&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>MBUnit to NUnit</title><link href="https://blog.shaunfinglas.co.uk/2011/03/mbunit-to-nunit.html" rel="alternate"></link><published>2011-03-01T00:00:00+01:00</published><updated>2011-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-03-01:/2011/03/mbunit-to-nunit.html</id><summary type="html">&lt;p&gt;Over the last few weeks we've ported our tests from
&lt;a href="http://www.mbunit.com/"&gt;MBUnit&lt;/a&gt; to &lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;. This
was done as after a quick spike it was seen that NUnit tests run almost
fifty percent quicker. For example our common projects' test time went
from around &lt;strong&gt;40s&lt;/strong&gt; to around &lt;strong&gt;20s&lt;/strong&gt; on average.&lt;/p&gt;
&lt;p&gt;This whole …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the last few weeks we've ported our tests from
&lt;a href="http://www.mbunit.com/"&gt;MBUnit&lt;/a&gt; to &lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;. This
was done as after a quick spike it was seen that NUnit tests run almost
fifty percent quicker. For example our common projects' test time went
from around &lt;strong&gt;40s&lt;/strong&gt; to around &lt;strong&gt;20s&lt;/strong&gt; on average.&lt;/p&gt;
&lt;p&gt;This whole process was no easy task. Initially our largest project was
converted by the whole team. We split into pairs/individuals and tackled
a test project each. Working in this manner we could commit after each
project, meaning at any one time the build was only fractionally broke,
rather than completely unbuildable. Previously we tried a big bang
approach but after several thousand errors, we quickly reverted. After
each commit the tests were gradually moved over. This took around an
hour or so, and therefore our allocated dojo/technical dojo time for
that week was used. For the remaining projects an ad-hoc approach was
taken. The first pairs to work on a project would be responsible for
porting the tests over. Thankfull our other projects bar one were fairly
straightforward to upgrade and were done as part of waste or kaizen.&lt;/p&gt;
&lt;p&gt;Some of this process could be automated however things were not
completely smooth. For example converting the MBUnit namespace over was
achieved by project level find and replace. Other issues such as Asserts
being slightly different required a manual fix. One example being
asserting a exception is thrown. The MBUnit approach used attributes
while in NUnit it is more preferable to use &lt;em&gt;Assert.Throws&lt;/em&gt;. The other
issue we faced was porting over the relevant build scripts and Cruise
Control configs. Again there was no easy way to do this. We had a fair
few CI fails when this was done, but when editing the xml build files
there is no real way to test what you've done without actual trying it!&lt;/p&gt;
&lt;p&gt;Overall the whole episode was not as bad as I thought it would be. We
seem pretty stable at time of writing, and the tests are definitely
quicker to run locally. We still have slow tests, and as part of waste
we'll be looking into whether these slow tests are needed. One
interesting practice I've noticed over the upgrade is how many dodgy
tests we've removed. Tests such as &lt;em&gt;Assert.IsNotNull&lt;/em&gt; after creating a
new object - the sort of tests everyone writes when starting TDD have
been removed. These legacy tests serve no purpose now, but were the key
starting point of the TDD introduction to Codeweavers several years ago.
Other tests which are covered else where or simply not needed were also
removed. The final issue we are aiming to improve is that of our
regression/acceptance tests, many of which are Selenium tests.&lt;/p&gt;
&lt;p&gt;Would we recommend upgrading your test suite to the latest/next best
thing? Not unless you can prove with figures that it has an actual
benefit. We provided no value to the business by doing this, but by
hopefully taking one step to increase our feedback cycle we'll see the
benefit over time. If anything, we should be more likely to run our
tests. As for why MBUnit was slower? It features a lot of stuff we
simply don't need, while NUnit is more lightweight and just plain faster
for our use. We could perhaps speed the tests even more by writing our
own test runner, but the likes of Visual Studio integration are a must
therefore this is no easy task.&lt;/p&gt;
&lt;p&gt;One interesting point to conclude was that during this process there was
talk about wrapping NUnit within a Codeweavers test framework,
essentially meaning we could switch test frameworks whenever. Is this
overkill for most projects? Most likely, but it was something to
consider especially for large applications. As who knows, maybe there
will be an even faster framework out there that we can upgrade to again,
next year...&lt;/p&gt;</content><category term="testing"></category><category term="programming"></category></entry><entry><title>Mock Roles not Types</title><link href="https://blog.shaunfinglas.co.uk/2011/03/mock-roles-not-types.html" rel="alternate"></link><published>2011-03-01T00:00:00+01:00</published><updated>2011-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2011-03-01:/2011/03/mock-roles-not-types.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;"if it feels wrong, it probably is" - numerous Codeweavers' developers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The framework we use at Codeweavers is the excellent
&lt;a href="http://code.google.com/p/moq/"&gt;Moq&lt;/a&gt;, therefore when something is
difficult to mock we are forced by the framework to write an adapter. We
use an interface for testing, then create a concrete type which simply …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;"if it feels wrong, it probably is" - numerous Codeweavers' developers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The framework we use at Codeweavers is the excellent
&lt;a href="http://code.google.com/p/moq/"&gt;Moq&lt;/a&gt;, therefore when something is
difficult to mock we are forced by the framework to write an adapter. We
use an interface for testing, then create a concrete type which simply
invokes the hard to test code such as static code, third party libraries
and resources that are expensive to set up. There are some ways ways in
C# to get around this, but they involve black magic and should be
avoided at all costs unless you are deeply entangled in legacy code. A
refactoring would be preferable over hard to test code.&lt;/p&gt;
&lt;p&gt;The process of writing an
&lt;a href="http://en.wikipedia.org/wiki/Adapter_pattern"&gt;adapter&lt;/a&gt; around hard to
test code is a standard practice, we do it all the time as we are forced
to by the unit testing framework. Some frameworks we use at Codeweavers
such as [&lt;a href="http://asp.net/mvc"&gt;ASP.NET
MVC&lt;/a&gt;]{style="text-decoration:underline;"}are
designed with testability in mind, so unlike scenarios where you cannot
test code easily, the MVC framework makes it possible. In a recent
feature myself and a fellow colleague wrote some code within a
controller which relied on some of the controllers' (the MVC framework)
internals.&lt;/p&gt;
&lt;p&gt;Rather than abstracting this into a class which we inject to make
testing easier we went the route of setting up a complex, messy and
tedious routing test fixture. Why you ask? Maybe it was the fact it was
possible to test. Had it been straight up impossible or much harder,
then introducing an abstraction would have been the obvious solution.
The code in question was a small method that depending on the somewhat
complex and unique routing values performed on a certain response. Fast
forward a week later and the feature is to be expanded.&lt;/p&gt;
&lt;p&gt;We were back were we started, the new feature needed more setup that
relied on the framework, and in turn once this production code was
changed, the old test fixture would need updating. The very thought of
this made me feel tired, fed up and generally annoyed that the test code
was harder to write than the actual production code! While the code did
not feel right, the actual process was a by the book approach, so it
must have been right. Taking a step back myself and my new pairing
partner decided for a different approach. Lets abstract the controller
internals we need and inject this into the controller. In turn our code
would read better and the tests would be easy to construct.&lt;/p&gt;
&lt;p&gt;Having made this refactoring the tests were still green. The refactoring
was a great success. Now the test fixture set up consisted of a few
simple lines. All the complex framework specific nonsense had
disappeared. Getting to this stage took a bit of thought with regards
the implementation, but we got there non the less. Having made this
change, we wrote the next tests with such ease and joy it actually felt
fun, enjoyable and completely stress free. Just how programming should
be.&lt;/p&gt;
&lt;p&gt;For the production code, as the framework is test friendly we had some
unit tests around the concrete object used in production. For scenarios
where this is not possible, a high level acceptance test to ensure
things are wired up correctly would suffice. Either way we should always
be confident when using code we do not own that it is correct, providing
we use it correctly. After all, this will be heavily tested by the third
party or so we hope. Manual testing will catch any integration issues
with third party code with any luck.&lt;/p&gt;
&lt;p&gt;The whole process was staggering, I was blown away by my ignorance. I
knew the best practices, yet I chose &lt;a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod"&gt;to depend on concrete
implementations rather than
abstractions&lt;/a&gt;.
After this session the whole theory behind &lt;a href="http://www.mockobjects.com/files/mockrolesnotobjects.pdf"&gt;mocking roles and not
types&lt;/a&gt; [pdf]
became so much clearer. This is yet one more revelation to add to the
list. Every time I write &lt;code&gt;Mock&amp;lt;name&amp;gt;&lt;/code&gt;, stop and think. Do I own the
type? If not then maybe there is an abstraction waiting to escape, after
all it will save a lot of pain.&lt;/p&gt;</content><category term="testing"></category><category term="programming"></category></entry><entry><title>Lists or Objects</title><link href="https://blog.shaunfinglas.co.uk/2010/12/lists-or-objects.html" rel="alternate"></link><published>2010-12-01T00:00:00+01:00</published><updated>2010-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:blog.shaunfinglas.co.uk,2010-12-01:/2010/12/lists-or-objects.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;"Our rule of thumb is that we try to limit passing around types with
generics (the types closed in angle brackets). Particularly when
applied to collections, we view it as a form of duplication. It's a
hint that there's a domain concept that should be extracted into a
type." [&lt;a href="http://www.growing-object-oriented-software.com/"&gt;Growing …&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;"Our rule of thumb is that we try to limit passing around types with
generics (the types closed in angle brackets). Particularly when
applied to collections, we view it as a form of duplication. It's a
hint that there's a domain concept that should be extracted into a
type." [&lt;a href="http://www.growing-object-oriented-software.com/"&gt;Growing Object-Oriented Software, Guided by
Tests&lt;/a&gt; - Steve
Freeman, Nat Pryce, page 136)]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Not ideal - business logic will leak.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/24ed5ead118ea8e2730c.js"&gt;&lt;/script&gt;

&lt;p&gt;Better - quotes are now encapsulated.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/ed5e69d1e10925e7a4dd.js"&gt;&lt;/script&gt;

&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;The benefit of the second approach is that you begin to force the
collection to do the work. Consider a collection of quotes - using the
first approach a developers' typical instinct would be to loop over the
list and check each quote until the lowest quote was found. You could
argue that this in turn violates the '&lt;a href="http://www.pragprog.com/articles/tell-dont-ask"&gt;Tell Don't
Ask&lt;/a&gt;' principle because
very quickly you can find yourself digging down into objects. We would
not do this with standalone objects, so collections should not be any
different. Yet as developers we often avoid creating objects to
encapsulate collections, despite this principle being taught in the
early chapters of any OO programming beginners book.&lt;/p&gt;
&lt;p&gt;Another key point of encapsulating collections is that you reduce
duplication. If another part of the application needs to perform a check
for the lowest quote, you'd end up either duplicating the code to loop
over the quotes, or creating a helper method to do the actual
processing. Using the collection means such features are only a method
call away at all times.&lt;/p&gt;
&lt;p&gt;In a recent &lt;a href="http://codekata.com/kata/kata09-back-to-the-checkout/"&gt;code
kata&lt;/a&gt; as well as
a current set of work, we are applying some of the above concepts and
finding a dramatic increase in the quality of our code. Those of you may
have noticed that the above implementation inherits from a standard
list, therefore it is indeed possible to still violate encapsulation and
dig through the collection yourself. There are pros and cons to this
approach, one benefit is all of the out of the box functionality you get
for free - the ability to loop over the quotes (for displaying say) and
return a count for example. The downside being developers can treat
these collections as if they were a list.&lt;/p&gt;
&lt;p&gt;In C# it is possible to use
&lt;a href="http://msdn.microsoft.com/en-us/library/aa288465%28v=vs.71%29.aspx"&gt;indexers&lt;/a&gt;or
interfaces to improve the above implementation, though we tend to agree
that it's up to the developers to do the "right" thing - in other words,
not dive down into the collection. Interesting this very topic has been
&lt;a href="http://stackoverflow.com/questions/21715/listbusinessobject-or-businessobjectcollection"&gt;discussed on the excellent
StackOverflow&lt;/a&gt;
- I and others will sure agree that the answer(s) provided are well off
the mark. Encapsulate your public collections - do not treat them as
primitives!&lt;/p&gt;</content><category term="code-quality"></category><category term="programming"></category></entry></feed>