<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shaun Finglas - 2015</title><link href="/" rel="alternate"></link><link href="/feeds/2015.atom.xml" rel="self"></link><id>/</id><updated>2015-12-01T00:00:00+01:00</updated><entry><title>ReactJS and JSHint</title><link href="/2015/12/reactjs-and-jshint.html" rel="alternate"></link><published>2015-12-01T00:00:00+01:00</published><updated>2015-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-12-01:/2015/12/reactjs-and-jshint.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://facebook.github.io/react/docs/getting-started.html"&gt;ReactJS Getting Started
Guide&lt;/a&gt; states
that the recommended way of using React is combined with npm.&lt;/p&gt;
&lt;p&gt;This is great but poses a problem when trying to use JSHint. The default
example outputs a single JS file containing both your code and the React
library. The end result is the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://facebook.github.io/react/docs/getting-started.html"&gt;ReactJS Getting Started
Guide&lt;/a&gt; states
that the recommended way of using React is combined with npm.&lt;/p&gt;
&lt;p&gt;This is great but poses a problem when trying to use JSHint. The default
example outputs a single JS file containing both your code and the React
library. The end result is the bundle when linted contains code you
don't and shouldn't need to care about.&lt;/p&gt;
&lt;p&gt;The guide does provide a solution, though not as clear as it probably
should be. Offline Transforms. These will transform your jsx files into
plain Javascript without bundling react alongside.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;babel --presets react app.js --out-file main.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simply take the result of the transform and perform your linting
process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jshint main.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This may seem obvious but I did lose some time realising the benefit of
offline transforms.&lt;/p&gt;
&lt;p&gt;Offline transforms do require that you either bundle the transformed
file with React, or you simply include the standalone JS scripts in your
html. This can be done after the fact. JSHint can then play nicely with
your React apps without the need for other tooling such as wrappers or
text editor extensions.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Recommended Reading List 2015</title><link href="/2015/12/recommended-reading-list-2015.html" rel="alternate"></link><published>2015-12-01T00:00:00+01:00</published><updated>2015-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-12-01:/2015/12/recommended-reading-list-2015.html</id><summary type="html">&lt;p&gt;In a similar manner to
&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/recommended-reading-list-2014.html"&gt;previous&lt;/a&gt;
&lt;a href="https://blog.shaunfinglas.co.uk/2012/10/recommended-reading-2012.html"&gt;years&lt;/a&gt;
here is my recommended reading list for 2015. As before some of these
books have been released for a while, but these are some of my
highlights for various reasons.&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Dependency-Injection-NET-Mark-Seemann/dp/1935182501"&gt;Dependency Injection in .NET&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;I had put off reading this book for …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;In a similar manner to
&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/recommended-reading-list-2014.html"&gt;previous&lt;/a&gt;
&lt;a href="https://blog.shaunfinglas.co.uk/2012/10/recommended-reading-2012.html"&gt;years&lt;/a&gt;
here is my recommended reading list for 2015. As before some of these
books have been released for a while, but these are some of my
highlights for various reasons.&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Dependency-Injection-NET-Mark-Seemann/dp/1935182501"&gt;Dependency Injection in .NET&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;I had put off reading this book for a while despite numerous teams
having a copy. It turns out a good chunk of the book is applicable
to any language, with the later third being dedicated to actual .NET
solutions. The other two thirds of the book has expanded my
understanding of DI.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Effective-Java-Programming-Language-Series-ebook/dp/B00B8V09HY"&gt;Effective Java: A Programming Language Guide&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Many developers recommend this book even for non Java development.
Many of the tips and advice included we not new to myself but the
book provided further insight and explanation. A good summary of
best practices for any OO developers.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Web-Application-Security-Beginners-Guide-ebook/dp/B006DVPWX0"&gt;Web Application Security, A Beginner's Guide&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A good introductory book on security which provided a useful
refresher for myself as well as providing a platform for further
research on some of the key areas and topics.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Enterprise-Integration-Patterns-Designing-Addison-Wesley-ebook/dp/B007MQLL4E/"&gt;Enterprise Integration Patterns&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A useful sequel to expand on Patterns of Enterprise Application
Architecture. This book focuses more on messaging concepts, going
into detail on a number of topics. The content of the book is
expressed in technology agnostic terms, which has been incredibly
useful when applied to actual implementations.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/REST-Design-Rulebook-Mark-Masse-ebook/dp/B005XE5A7Q"&gt;REST API Design Guidelines&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Much of the guidelines in here fall into the category of common
sense or industry experience. Despite this the guidelines provide
great justifications for API design. An essential reference for any
REST API.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Exercises-Programmers-Challenges-Develop-Coding-ebook/dp/B0170Q50LK"&gt;57 Exercises for Programmers&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A highly practical book in the sense that the book is full of over
sixty practical tasks. Many of these fall into code katas which are
ideal for learning new languages or just staying sharp.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Practical-Object-Oriented-Design-Ruby-Addison-Wesley-ebook/dp/B0096BYG7C"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Despite the name this book applies to OO development in general
while the examples use Ruby. The ideas and concepts expressed in
this book have changed my view on OO programming. If anything the
book will make you think differently about how to design and develop
solutions.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Fifty-Quick-Ideas-Improve-Tests-ebook/dp/B00XVFFK7E"&gt;Fifty Quick Ideas To Improve Your Tests&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A light read with each chapter dedicated to a single, focused topic.
Many of the ideas are well known practices but with expanded
justifications and recommendations.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/HTTP-Definitive-Guide-Guides-ebook/dp/B0043D2EKO"&gt;HTTP The Definitive Guide&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The guide to HTTP if you are a developer. Each area is explained
from high level concepts down to the nitty gritty details.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Process&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley-ebook/dp/B00HNB3VQE"&gt;Implementing Lean Software Development: From Concept to Cash&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A great summary of applying lean concepts to software development.
Much of the content is familiar though the ideas applied to software
development makes this book stand out. This acts as a useful
refresher for lean processes as well.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Lean-Startup-Innovation-Successful-Businesses-ebook/dp/B005PR422K"&gt;The Lean Startup&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;One of the most inspirational books I've read this year. Full of
useful and tested practices that has changed my perspective on
beginning a startup. Interestingly much of the advice can be applied
to individuals working within larger organizations on smaller
projects.&lt;/dd&gt;
&lt;/dl&gt;</content><category term="reading"></category></entry><entry><title>Reducing Conditional Logic to a Single Location</title><link href="/2015/12/reducing-conditional-logic-to-single.html" rel="alternate"></link><published>2015-12-01T00:00:00+01:00</published><updated>2015-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-12-01:/2015/12/reducing-conditional-logic-to-single.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2013/05/the-anti-if-campaign.html"&gt;My Anti If Campaign
post&lt;/a&gt;
still generates a lot of questions and discussion. In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conditional statements are not bad. They are a core programming
    construct.&lt;/li&gt;
&lt;li&gt;If you are working in an OO language, type checks are probably not
    the best solution to your problem. Rely on polymorphism.&lt;/li&gt;
&lt;li&gt;You need …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2013/05/the-anti-if-campaign.html"&gt;My Anti If Campaign
post&lt;/a&gt;
still generates a lot of questions and discussion. In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conditional statements are not bad. They are a core programming
    construct.&lt;/li&gt;
&lt;li&gt;If you are working in an OO language, type checks are probably not
    the best solution to your problem. Rely on polymorphism.&lt;/li&gt;
&lt;li&gt;You need to perform conditional checks somewhere. In my first
    example the conditional check was pushed into routing. The
    conditional statement in this case had been offloaded to the
    consumer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A recent real world example was refactored which highlighted the points
previously, but inverts the problem and solution. How do you remove
conditional statements if your system itself has to make the decisions
internally?&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;The simplified example shows the result of invoking a third party
service. This result contained a flag indicating either success or
failure. Effectively there were two hidden types here. Finally the
result was returned based on the HTTP status code.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/9c27094d9728ec85a6f7.js"&gt;&lt;/script&gt;

&lt;p&gt;After the result of the third party call, the domain would decide how to
respond.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/6f11ea92b82c82a032e3.js"&gt;&lt;/script&gt;

&lt;p&gt;Both the client and the domain logic was split over multiple source
files. This made noticing the duplication tricky. Both the client and
the domain also knew the fact that the result of the third party call
can succeed or fail.&lt;/p&gt;
&lt;p&gt;Sadly the domain violates the SRP at a method level. While not a
requirement yet, if further status codes are required or the contents of
responses controlled flow, we are in trouble. The type flag would need
to evolve from a boolean to something more complex. The contents of the
responses may also need to be provided. This solution could leak HTTP
details down into the domain unless careful.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Recognise the boolean flag is actually hidden two types. Remove the flag
and introduce a concrete type for each path. Each concrete type performs
the right operation. In this case executing the relevant methods within
the domain.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/997b68262b19b4d73912.js"&gt;&lt;/script&gt;

&lt;p&gt;Each concrete type is easy to test, change or throw away. In this
example an interface is provided. This contains just the necessary
methods that the process requires. The domain is now simplified. The
domain instance itself is simply provided as an argument. The concrete
instance of each result will perform the right operation.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/03e2b8b6f3ada56479ad.js"&gt;&lt;/script&gt;

&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Now possible to add and remove additional redemption handling
    easily.&lt;/li&gt;
&lt;li&gt;The procedural code remains on the boundary of the system. There is
    no need to try an use OO concepts here. Keep it simple.&lt;/li&gt;
&lt;li&gt;The domain becomes flexible and removes the procedural checks. OO
    concepts can be applied as much as you like here.&lt;/li&gt;
&lt;li&gt;The redemption service works with anything that can play the role of
    a redeemer. Open to refactoring.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Closing&lt;/h4&gt;
&lt;p&gt;Stick the procedural code on the edge of your system and be done with
it. Just ensure that you only perform such checks once.&lt;/p&gt;
&lt;p&gt;Just because you are not performing explicit type checks, the use of
boolean flags usually indicates at least two hidden types.&lt;/p&gt;
&lt;p&gt;The anti if campaign is not the removal of all conditional checks. They
need to happen somewhere. Just try to limit them.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Year in Review 2015</title><link href="/2015/12/year-in-review-2015.html" rel="alternate"></link><published>2015-12-01T00:00:00+01:00</published><updated>2015-12-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-12-01:/2015/12/year-in-review-2015.html</id><summary type="html">&lt;h4&gt;January&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Started the year with reasons as to why &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/why-technical-blogging.html"&gt;technical blogging is
    useful and
    recommended&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kick started a series of posts themed around simplicity,
    recommending to &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;abstract data use and not data
    access&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;February&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;series of posts on
    abstractions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The power of &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;Value Objects as a key
    refactoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;March …&lt;/h4&gt;</summary><content type="html">&lt;h4&gt;January&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Started the year with reasons as to why &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/why-technical-blogging.html"&gt;technical blogging is
    useful and
    recommended&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kick started a series of posts themed around simplicity,
    recommending to &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;abstract data use and not data
    access&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;February&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;series of posts on
    abstractions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The power of &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;Value Objects as a key
    refactoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;March&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Concluded the series on abstractions.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;
    and &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;
    have been two of the biggest changes I've made in my coding habits
    this year.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;April&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A follow up to one of my previous posts around the &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/getters-and-setters-are-evil-redux.html"&gt;use of getters
    and
    setters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I realised I had &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cool-uris-dont-change.html"&gt;failed at maintaining and managing
    URIs&lt;/a&gt;
    for the content on the site.&lt;/li&gt;
&lt;li&gt;The end of the month saw a focus on two simple topics that can
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/dry-vs-damp-in-tests.html"&gt;clean up duplication in
    tests&lt;/a&gt;
    and &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;remove obscurity from
    assertions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;May&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A focus on &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/tasking-in-software-development.html"&gt;tasking and planning in software
    development&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Two core techniques of producing a &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;Walking
    Skeleton&lt;/a&gt;
    and &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/mob-programming.html"&gt;Mob
    Programming&lt;/a&gt;
    have proved invaluable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;June&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Provided two techniques that allow continuous delivery of software
    thanks to &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;feature
    toggles&lt;/a&gt;
    and &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/branch-by-abstraction.html"&gt;branching by
    abstraction&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/do-you-really-need-microservice.html"&gt;question of whether or not you actually need a
    microservice&lt;/a&gt;
    also came up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;July&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;value in integration testing was
    highlighted&lt;/a&gt;,
    along with an introduction into &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;contract
    testing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The month concluded with a key reminder of &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/you-still-need-manual-tests.html"&gt;how important manual
    testing
    is&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;August&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Began with &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/why-i-dont-like-mocking-frameworks.html"&gt;an alternative to complex mocking
    frameworks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/queue-centric-work-pattern.html"&gt;use of message
    queues&lt;/a&gt;
    is one of the biggest changes in my software development process of
    the last few years.&lt;/li&gt;
&lt;li&gt;The month concluded with the acceptance that high quality
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/production-code-is-dirty.html"&gt;production code is often considered
    dirty&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;September&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This year the concepts and ideas in &lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-1.html"&gt;Release
    It&lt;/a&gt;
    have proved incredibly useful.&lt;/li&gt;
&lt;li&gt;A key principle I have applied this year is to &lt;a href="https://blog.shaunfinglas.co.uk/2015/09/waste-write-less-code.html"&gt;write less
    code&lt;/a&gt;,
    truly following the benefits of DRY and KISS.&lt;/li&gt;
&lt;li&gt;The use of the &lt;a href="https://blog.shaunfinglas.co.uk/2015/09/the-self-shunt-test-doubles-without.html"&gt;self shunt
    pattern&lt;/a&gt;
    was provided as a simply testing strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;October&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/10/abstractions-in-code-details-in-metadata.html"&gt;Abstractions in code and details in
    metadata&lt;/a&gt;
    is one of the many pieces of advice the Pragmatic Programmer
    highlights.&lt;/li&gt;
&lt;li&gt;Another big change in my coding habits this year has been the focus
    of &lt;a href="https://blog.shaunfinglas.co.uk/2015/10/header-interfaces-vs-role-interfaces.html"&gt;header interfaces vs role
    interfaces&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The use of &lt;a href="https://blog.shaunfinglas.co.uk/2015/10/set-based-design.html"&gt;Set Based
    Design&lt;/a&gt;
    stands out as one of the most thought provoking idea of this year.&lt;/li&gt;
&lt;li&gt;The month concluded with a summary of what &lt;a href="https://blog.shaunfinglas.co.uk/2015/10/coding-in-real-world.html"&gt;coding in the real
    world&lt;/a&gt;
    is.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;November&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/11/pre-computation.html"&gt;Pre-Computation&lt;/a&gt;
    is a simple and incredibly effective solution to improve performance
    and reduce complexity.&lt;/li&gt;
&lt;li&gt;The lack of the ability to &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;iterate upon
    architecture&lt;/a&gt;
    was acknowledged.&lt;/li&gt;
&lt;li&gt;The month ended with two odd, but valuable lessons - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;try not to
    build
    anything&lt;/a&gt;
    and make sure you &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;throw code
    away&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;December&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;December closed out with a look back at the &lt;a href="https://blog.shaunfinglas.co.uk/2015/12/reducing-conditional-logic-to-single.html"&gt;anti if campaign from
    another
    perspective&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The month ended with a round up of some of my &lt;a href="https://blog.shaunfinglas.co.uk/2015/12/recommended-reading-list-2015.html"&gt;best reads of the
    last twelve
    months&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="year-in-review"></category><category term="retro"></category></entry><entry><title>Don't Build a Thing</title><link href="/2015/11/dont-build-thing.html" rel="alternate"></link><published>2015-11-01T00:00:00+01:00</published><updated>2015-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-11-01:/2015/11/dont-build-thing.html</id><summary type="html">&lt;p&gt;Part two of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;Throw Code
    Away&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Here is a real life example of where I treated a unknown project
incorrectly. Why I handled this is badly and how I should have handled
it if I could rewind …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Part two of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;Throw Code
    Away&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Here is a real life example of where I treated a unknown project
incorrectly. Why I handled this is badly and how I should have handled
it if I could rewind time.&lt;/p&gt;
&lt;h4&gt;Whoops&lt;/h4&gt;
&lt;p&gt;An external client had a proposal for a web service which would power
part their new web application. This service sounded very simple. Data
import and some basic querying. There were plans to add additional bells
and whistles at a later date. After an initial meeting development
began.&lt;/p&gt;
&lt;p&gt;A week later a second meeting was placed. A good few hours of
development had been invested by this point. The meeting was useful,
however some changes had cropped up. The data format had been modified,
my solution could not handle the new format. Also the querying needed
various modifications.&lt;/p&gt;
&lt;p&gt;A week later, after several more hours of changes, the second meeting
landed. There were more changes. This time technical adjustments based
on the feedback from the clients' developers.&lt;/p&gt;
&lt;p&gt;The third meeting introduced scope creep. Could this service handle any
potential customer going forwards? It certainly could not at present.&lt;/p&gt;
&lt;p&gt;You should see where this is heading. Eventually the requirements
stabilized. Not until several days of my time had been taken up building
something that was not needed, only to have to tear it down and salvage
what I could.&lt;/p&gt;
&lt;p&gt;The end result was a project I was not proud of. Due to my heavily
invested time I wanted to save as much work as I could. It would be hard
to tell my superiors we've wasted X amount of money. The project also
lacked long term stability. Each iteration built upon the next. The
feature to handle generic customers was tacked on. Had this been known
from day one, things would have looked much better both in terms of code
quality and architecture.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;There is an easy way to transform a unknown project into a known project
- build as little as you possibly can. Do this in the shortest amount of
time to gather feedback, learn and defer decisions. After this process
you will be in the best possible shape to tackle the project. These
principles are the key to the processes within a lean start up.&lt;/p&gt;
&lt;h4&gt;How I Should Have Handled It&lt;/h4&gt;
&lt;p&gt;Starting with a minimal project in order to demo and deploy this would
do nothing other than returned a hardcoded JSON literal. Enough to
demonstrate and spark conversations.&lt;/p&gt;
&lt;p&gt;During week two the discovery that a new data format had been chosen
would not matter. The feature to load data had not been written after
all. At this point the hardcoded data would be tweaked to match the new
content. Easy.&lt;/p&gt;
&lt;p&gt;Week three would pose no threat. Technical changes around best practices
or technology are easily handled because very little code exists.&lt;/p&gt;
&lt;p&gt;The newly required functionality discovered in week four would
prototyped, estimated and agreed. As no real work has been done, adding
this feature in would not only be achievable, it would be
architecturally sound rather than bolted on as an after thought.&lt;/p&gt;
&lt;h4&gt;Why?&lt;/h4&gt;
&lt;p&gt;Deferring decisions such as the above is so useful that this can be
applied to any project from my experience. Knowing how long a decision
can be deferred is dependent on the scenario, but you will be pleasantly
surprised in many cases at just how long decisions can and should be
deferred. Even for known projects the power that deferral brings is so
beneficial I tend to favour this style whenever possible. Build just
enough to gather feedback and go from there.&lt;/p&gt;
&lt;p&gt;The key point is that very little time and energy has been invested. In
the second example of how I should have handled the client I invested
hours of my time. In reality I invested days. I was invested in the
first solution. The second solution however could be chopped, changed or
thrown away with no protest. The act of throwing code away is so
important, yet so rarely practised it will be the subject of the third
part of this series.&lt;/p&gt;</content><category term="architecture"></category><category term="agile-architecture-series"></category></entry><entry><title>Pre Computation</title><link href="/2015/11/pre-computation.html" rel="alternate"></link><published>2015-11-01T00:00:00+01:00</published><updated>2015-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-11-01:/2015/11/pre-computation.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/caching.html"&gt;Caching is a common
technique&lt;/a&gt;,
especially with HTTP as it is made so easy. However pre computation is
an alternative that can be used to reduce failures as well as speed up
processing and response times.&lt;/p&gt;
&lt;h4&gt;Caching Example&lt;/h4&gt;
&lt;p&gt;Assume a list of countries to be displayed on the UI. These …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/caching.html"&gt;Caching is a common
technique&lt;/a&gt;,
especially with HTTP as it is made so easy. However pre computation is
an alternative that can be used to reduce failures as well as speed up
processing and response times.&lt;/p&gt;
&lt;h4&gt;Caching Example&lt;/h4&gt;
&lt;p&gt;Assume a list of countries to be displayed on the UI. These are often
stored in one logical place, the database. A remote call is issued to
query the database and return the results. The results are then
manipulated and inserted into the UI. Repeat calls will then be cached
for some period by the web server and/or proxy.&lt;/p&gt;
&lt;h4&gt;Pre Computed Example&lt;/h4&gt;
&lt;p&gt;As part of the build process have the same query performed, dynamically
building up the result set. Using a templating language modify a base
source file which simply inserts the dynamic result set. The end result
of this would be a source file containing a collection of countries as
if you had hardcoded the values. The difference is these values are
pulled from a single source of truth as part of the pre build step.&lt;/p&gt;
&lt;p&gt;In a statically compiled language you would have compile time safety
after this file is generated. Regardless a simple suite of tests to
ensure the collection is not empty or badly formed would be beneficial.&lt;/p&gt;
&lt;p&gt;Once the deploy is complete all queries to retrieve the collection of
countries would be performed by the pre computed collection. This
technique works regardless of language due to the simplicity of storing
a collection of items in a literal array or hashtable. For content that
changes regularly you can use a separate content deploy which simply
deploys any changes to content.&lt;/p&gt;
&lt;p&gt;Pre computation works for even what appears to be dynamic content.
Article submission sites, e-commerce or wikis could all be developed
using pre computation.&lt;/p&gt;
&lt;p&gt;Use punch outs for anything that varies based on user or context.
Javascript is the natural choice for inserting this dynamic content.
This advice flies in the face of much of the direction the modern web is
heading. However the benefits of reduced remote calls, fast responses
and less moving parts should not be under estimated.&lt;/p&gt;
&lt;p&gt;Naturally pre computation will not work in areas where content is highly
dynamic or specific to users. Single page applications, social media
streams and the like are better suited to dynamic content cached where
possible. Additionally adjusting a system to handle content deploys is
not something that can be achieved lightly. As the build and deploy
process must accommodate these changes, pre computation is usually
required to be thought of up front or require some rework to introduce.&lt;/p&gt;</content><category term="architecture"></category></entry><entry><title>Throw Code Away</title><link href="/2015/11/throw-code-away.html" rel="alternate"></link><published>2015-11-01T00:00:00+01:00</published><updated>2015-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-11-01:/2015/11/throw-code-away.html</id><summary type="html">&lt;p&gt;The third and final part of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;Part
one&lt;/a&gt;
suggested walking skeletons for new features or projects. &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Part
two&lt;/a&gt;
suggested building the limited, smallest and simplest functionality
possible. However you do not always have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The third and final part of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;Part
one&lt;/a&gt;
suggested walking skeletons for new features or projects. &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Part
two&lt;/a&gt;
suggested building the limited, smallest and simplest functionality
possible. However you do not always have the luxury of deferral.
Likewise if the project already exists and you are amending
functionality, a walking skeleton is going to be limited.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Throw code away. This sounds brutal and overkill, but throwing code away
has many advantages.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The second time around you will solve the problem quicker having
    benefited from first time. The first attempt is a prototype in this
    case. Throwing away prototypes is expected. They are not production
    ready, usually built with short cuts or quality comprises
    intentionally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The cleanest code is no code. Your following attempts will be
    cleaner. Knowing the issues from the previous attempt allows the
    ability to put code and procedures in place to prevent the same
    quality problems occurring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long term goals can be achieved rather than aiming for short term
    wins. Instead of focusing on meeting the current iterations' goal,
    answer whether or not your solution is fit for purpose going
    forwards. Does it scale? Is the quality there?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You benefit from hindsight. Most code to be replaced should have
    lived through some sort of review process. If the code has lived
    through production you have even more ammo to target the weak
    points. Where are the hotspots? What changes more frequently? Where
    do bugs tend to reside?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Objections&lt;/h4&gt;
&lt;p&gt;Throwing code away should not be taken lightly, but it is certainly a
valid technique under the right circumstances.&lt;/p&gt;
&lt;p&gt;You will have an easier time suggesting to start over on two days worth
of work than you would two weeks, two months or two years. Keep your
batch sizes small and the ability to throw code away will become easier
to accept, with the benefits outweighing the negatives.&lt;/p&gt;
&lt;p&gt;Small batches are not the only prerequisite to suggest throwing code
away. Small changes are also essential. You can easily suggest throwing
a method or class away, but you will rightly so have a harder time
suggesting throwing away a module or system.&lt;/p&gt;
&lt;p&gt;Refactoring is often used as a suggestion to combat the need to rewrite
or throw code away but this is rarely the case in practice. Refactoring
is a misused word and crucially misunderstood technique. If you change
architecture you are not refactoring.&lt;/p&gt;
&lt;p&gt;The biggest objector you will likely find is yourself. Having become
invested in a task it can be hard to try again. Fight the urge to resist
and throw code away. You may be pleasantly surprised by the results.&lt;/p&gt;</content><category term="architecture"></category><category term="agile-architecture-series"></category></entry><entry><title>You Cannot Iterate upon Architecture</title><link href="/2015/11/you-cannot-iterate-upon-architecture.html" rel="alternate"></link><published>2015-11-01T00:00:00+01:00</published><updated>2015-11-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-11-01:/2015/11/you-cannot-iterate-upon-architecture.html</id><summary type="html">&lt;p&gt;This is the first part of a series of posts as to why gradual iteration,
doing the simplest thing that can possibly work over a software project
fails in many cases. This series will explain why this is the case, and
provide solutions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is the first part of a series of posts as to why gradual iteration,
doing the simplest thing that can possibly work over a software project
fails in many cases. This series will explain why this is the case, and
provide solutions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;Throw Code
    Away&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="http://blog.crisp.se/2013/01/13/henrikkniberg/how-spotify-builds-products"&gt;Spotify has gave a
talk&lt;/a&gt;
on how it builds products and manages teams internally. This provides
some great insights and advice. As part of this an incredibly effective
image is used. This shows the production of a form of transport to
travel from A to B.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Building a car from a skateboard." src="http://3.bp.blogspot.com/-GIv_yj7SN08/VkDhOX_5DoI/AAAAAAAAAIo/12OKoGVoCvY/s1600/images.duckduckgo.com.png"&gt;&lt;/p&gt;
&lt;p&gt;In the first half of the image, the product is built in iterations. Each
step adds to the next. It is not until the fourth step that the product
is able to take passengers from A to B. Agile development aims to solves
the issues around this.&lt;/p&gt;
&lt;p&gt;The second half of the image is built iteratively. The goal is still the
same. A product to travel from A to B. From the first version this goal
is complete. However the team would be embarrassed to release in this
state. Further iterations are carried out as the team learns more.&lt;/p&gt;
&lt;p&gt;From my experience building software in this manner only works half of
the time. Any software projects from my first line of code up until
present day fall into one of two categories.&lt;/p&gt;
&lt;h4&gt;Known Projects or Unknown Projects&lt;/h4&gt;
&lt;p&gt;A known project would be where the destination is clear and well
defined. Internal development projects, refactoring, or replacement
would fall into this category. Easily half of my professional time has
been spent on projects where we know what we are building and when it
must be complete by.&lt;/p&gt;
&lt;p&gt;The second type of projects is where the destination is unknown. You are
working for an external customer directly. On a regular basis you
regroup with the client. You gather feedback and iterate. Over the
course of this process your destination may very well surprise you,
along with the route you use to get there.&lt;/p&gt;
&lt;h4&gt;Refactoring is Class or Method Level Only&lt;/h4&gt;
&lt;p&gt;You could claim the image works for unknown projects. At any point the
client (internal or external) could put a halt on development after
their vision is complete. For known projects, the area this image fails
is simple - if a car is required, build a car. If this is demonstrating
a known project, building only then to start recycling, refactoring and
forming the code into another shape is costly. Sticking with the vehicle
analogy - building a car is complex. In one iteration it would not be
possible to gather feedback until it was too late. Much time and
resources would be wasted.&lt;/p&gt;
&lt;p&gt;Translating to a software example, this would be the same as building a
complex web application. The goal is known, yet the first stab is a HTML
page. This is followed by some simple sever side logic. On top of this
we add an ORM. Further iterations thrash and push the code around. Early
simple decisions start to come back to haunt us. This technical debt is
either repaid or ignored. As further iterations follow the architecture
of the application suffers. Through sheer force of determination the web
application is complete. Usually there are many compromises along the
way. Further enhancements or changes could be costly.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;p&gt;For unknown projects there are two solutions. First and foremost build a
&lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;walking
skeleton&lt;/a&gt;.
Using the vehicle example, the first iteration of a known project should
produce the frame of the car. Other than wheels there would be very
little else here. However this is still a car, though limited in
functionality and features. Using the software example this would be the
core flow of the web app. Either hardcoded in places or built using
scaffolding. You would still be embarrassed to release this.
Architecturally you have all the core parts you need. The benefit of
this is that future iterations simply build upon the good, known
framework. The foundations of the project are stable. There is no fear
that after several iterations you stumble upon a technical
implementation issue.&lt;/p&gt;
&lt;p&gt;The second solution is turn an unknown project into a known project.
This sounds difficult but there is a remarkable easy way to achieve this
- the subject of the next post.&lt;/p&gt;</content><category term="architecture"></category><category term="agile-architecture-series"></category></entry><entry><title>Abstractions in Code, Details in Metadata</title><link href="/2015/10/abstractions-in-code-details-in-metadata.html" rel="alternate"></link><published>2015-10-01T00:00:00+02:00</published><updated>2015-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-10-01:/2015/10/abstractions-in-code-details-in-metadata.html</id><summary type="html">&lt;p&gt;I've programmed many games - each one was special in its own way. One in
particular stands out early in my university studies, a top down
shooter. It was not graphics, gameplay, or sound that made it stand out
however. It was the lesson it taught me about software development.&lt;/p&gt;
&lt;h4&gt;Level …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;I've programmed many games - each one was special in its own way. One in
particular stands out early in my university studies, a top down
shooter. It was not graphics, gameplay, or sound that made it stand out
however. It was the lesson it taught me about software development.&lt;/p&gt;
&lt;h4&gt;Level One&lt;/h4&gt;
&lt;p&gt;With the deadline for completion of the project looming, time was
running out. The core game engine was complete but other than the first
level there was nothing else for the player to do. With more marks
awarded for various components I decided to add a second level.&lt;/p&gt;
&lt;p&gt;At the time the game consisted of a source file called &lt;code&gt;level.cs&lt;/code&gt;. This
contained parts of functionality explicit to every level that I would
need. It also contained code specific to the first level. My solution
was to extract a base class and introduce &lt;code&gt;level.cs&lt;/code&gt; and &lt;code&gt;level1.cs&lt;/code&gt;.
This worked. The addition of level two was not as easy. The second level
required a considerable amount of additional code, despite the shared
functionality. A slow feedback cycle of change, compile, and test, made
this addition even more tedious. With the test phase consuming much of
my time.&lt;/p&gt;
&lt;p&gt;Hopefully you can see where this is going. While I never added a third
level, the same problem exists. In fact for every additional level the
problem would get worse.&lt;/p&gt;
&lt;h4&gt;Lesson&lt;/h4&gt;
&lt;p&gt;The lesson I learned here was that a game engine should be abstract,
while the details of the level should be data that is configured outside
of the code. This allows anyone to make levels for the game. Levels can
be unique rather than constrained to how the programmers coded them to
be, introducing novel gameplay elements constrained only by the
imagination of the designers.&lt;/p&gt;
&lt;p&gt;This concept is not unique to games programming. I would learn a few
years later that this is a well known and advised practice - &lt;a href="https://pragprog.com/book/tpp/the-pragmatic-programmer"&gt;The
Pragmatic
Programmer&lt;/a&gt;
summarises that abstractions should live in code, while details lives in
metadata (data about data).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Program for the general case, and put the specifics outside the
compiled code base."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those of you with a keen sense for code smells may be thinking about
another issue with this story, and yes, you're right. The base class
caused issues. The use and misuse of inheritance will be the subject of
a future post.&lt;/p&gt;</content><category term="programming"></category><category term="retro"></category></entry><entry><title>Coding In the Real World</title><link href="/2015/10/coding-in-real-world.html" rel="alternate"></link><published>2015-10-01T00:00:00+02:00</published><updated>2015-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-10-01:/2015/10/coding-in-real-world.html</id><summary type="html">&lt;p&gt;As a student when confronted with a problem, I would end up coding it
and thinking - &lt;em&gt;how do the professionals do this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For some reason I had the impression that once I entered the industry I
would find enlightenment. Discovering the one true way to write high
quality, professional code …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a student when confronted with a problem, I would end up coding it
and thinking - &lt;em&gt;how do the professionals do this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For some reason I had the impression that once I entered the industry I
would find enlightenment. Discovering the one true way to write high
quality, professional code.&lt;/p&gt;
&lt;p&gt;It turns out that code in industry is not too far removed from the code
I was writing back when I knew very little.&lt;/p&gt;
&lt;p&gt;Code in the real world can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;messy or clean&lt;/li&gt;
&lt;li&gt;hard or easy to understand&lt;/li&gt;
&lt;li&gt;simple or complex&lt;/li&gt;
&lt;li&gt;easy or hard to change&lt;/li&gt;
&lt;li&gt;or any combination of the above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Very rarely will you be confronted with a problem that is difficult.
Most challenges typically are formed around individuals and processes,
rather than day to day coding. Years later I finally have the answer.
Code in the real world is not that much different to code we were all
writing when we first started out.&lt;/p&gt;
&lt;p&gt;If I could offer myself some advice back in those early days it would be
to follow KISS, YAGNI and DRY religiously. The rest will fall into place
naturally. Above all, aim for simplicity.&lt;/p&gt;
&lt;p&gt;The best way to summarise my feelings would be this image courtesy of
&lt;a href="http://imgur.com/gallery/L0VoWT9"&gt;Imgur&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="//imgur.com/L0VoWT9"&gt;View post on imgur.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="retro"></category></entry><entry><title>Header Interfaces vs Role Interfaces</title><link href="/2015/10/header-interfaces-vs-role-interfaces.html" rel="alternate"></link><published>2015-10-01T00:00:00+02:00</published><updated>2015-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-10-01:/2015/10/header-interfaces-vs-role-interfaces.html</id><summary type="html">&lt;p&gt;In some languages such as C++ you must define header interfaces. These
constructs define how a public type is exposed in terms of its public
interface. Other languages take a different route. C# or Java do not
require headers but they are still very much in circulation. This
unfortunately brings …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In some languages such as C++ you must define header interfaces. These
constructs define how a public type is exposed in terms of its public
interface. Other languages take a different route. C# or Java do not
require headers but they are still very much in circulation. This
unfortunately brings along some unwanted side effects.&lt;/p&gt;
&lt;h4&gt;Header Interfaces&lt;/h4&gt;
&lt;p&gt;Header interfaces are a one to one mapping of public methods that match
the type it is defining. In other words, they are recreating the
overhead of headers in languages that do not need them.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/191d9a210e830cb61d83.js"&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;Header interfaces tend to break the Interface Segregation Principle.&lt;/li&gt;
&lt;li&gt;Harder to switch objects via DI as you are forced to implement all
    members even if you do not use the whole interface.&lt;/li&gt;
&lt;li&gt;Prone to breakages as the one to one mapping means any change is
    breaking.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Role Interfaces&lt;/h4&gt;
&lt;p&gt;Role interfaces define the role an object plays. Due to various roles
having different responsibilities they are usually grouped by
functionality. Role interfaces are usually combined with composition or
interface inheritance.&lt;/p&gt;
&lt;p&gt;The role of a &lt;code&gt;Developer&lt;/code&gt; has now been introduced. This is a separate
concept from the rest of the object.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/ae647867f27a7404720e.js"&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;Easier to follow the Interface Segregation Principle.&lt;/li&gt;
&lt;li&gt;Closely related to the Liskov Substitution Principle - no need for
    partial implementations.&lt;/li&gt;
&lt;li&gt;Less chance of breaking changes - interfaces can be removed or added
    easily.&lt;/li&gt;
&lt;li&gt;Reduced scope - anything that fulfils the role of &lt;code&gt;Developer&lt;/code&gt; can be
    provided as an argument.&lt;/li&gt;
&lt;li&gt;DI frameworks may take more configuration if role interfaces are
    used. This may explain the bias towards header interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;More&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.ploeh.dk/2013/01/10/RoleInterfaceRoleHint"&gt;http://blog.ploeh.dk/2013/01/10/RoleInterfaceRoleHint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pluralsight.com/courses/encapsulation-solid"&gt;http://www.pluralsight.com/courses/encapsulation-solid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/bliki/RoleInterface.html"&gt;http://martinfowler.com/bliki/RoleInterface.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="code-quality"></category><category term="tutorial"></category></entry><entry><title>Set Based Design</title><link href="/2015/10/set-based-design.html" rel="alternate"></link><published>2015-10-01T00:00:00+02:00</published><updated>2015-10-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-10-01:/2015/10/set-based-design.html</id><summary type="html">&lt;p&gt;Each morning newspapers hit the newstands without fail. Live broadcasts
are the same. Come show time they hit the air without fail. You can
probably think of more examples of deadlines that are constantly
achieved. So why does software development accept missed deadlines?
Software development not only encourages software to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Each morning newspapers hit the newstands without fail. Live broadcasts
are the same. Come show time they hit the air without fail. You can
probably think of more examples of deadlines that are constantly
achieved. So why does software development accept missed deadlines?
Software development not only encourages software to be late, it has
become accepted or just another risk to the project by default.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley/dp/0321437381"&gt;Implementing Lean Software
Development&lt;/a&gt;
introduces the concept of Set Based Design (SBD). SBD provides an answer
on how to never miss a deadline every again, providing the deadline is
feasible. SBD will allow software to constantly hit deadlines just as
newspapers and TV shows do.&lt;/p&gt;
&lt;p&gt;SBD requires multiple teams to implement the same functionality split
over several sets (versions) of work. Each team works independently and
in parallel to fulfil the same goal. This is in stark contrast to normal
proceedings where each team is usually assigned to separate projects. At
the end of the deadline the set that is best fit for purpose is chosen.
This ensures the teams as a collective have delivered the best possible
solution within the deadline. Each set should increase in scope and
complexity. This means each additional set has a higher chance of
missing the deadline.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;The number of sets you decide upon is based on each variation, so there
is no fixed limit. Assume three for the following introduction.&lt;/p&gt;
&lt;h5&gt;Set One&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Start by accepting and acknowledging the deadline. This may be an
    integration deadline, a release or third party dependencies.&lt;/li&gt;
&lt;li&gt;One of the teams should be working on the simplest thing that can
    possibly work. Some may say this is verging on a bodge or hack. You
    may end up adding logic to views, inserting business logic into
    sprocs or committing any other coding related atrocity. Despite this
    you must ensure the functionality is fit for purpose, tested and
    agreed by all.&lt;/li&gt;
&lt;li&gt;The worst case scenario is the first set is released. You hit the
    deadline and you resolve some technical debt in the background
    afterwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Set Two&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;The team working on the second set would up their game. Still aiming
    for the deadline while the scope increases. Instead of adding logic
    into views, it goes into domain objects. Logic in sprocs? No chance.
    Other further enhacements could be added.&lt;/li&gt;
&lt;li&gt;The worst case scenario? The deadline is missed but they have a
    solution which is better than the first set and close to completion.&lt;/li&gt;
&lt;li&gt;After the first release the team simply finish up and deploy after
    the fact. This wipes out the technical debt of the first set and
    provides both a met deadline (via the first set) and the best
    possible solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Set Three&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;A third set would take a much higher level approach to the solution.
    This would be the best proposed solution. A strategic decision for
    the team factoring in long term goals and ambitions.&lt;/li&gt;
&lt;li&gt;The chance of completing this set within the deadline are slim to
    none.&lt;/li&gt;
&lt;li&gt;The worst case scenario is the team on the third set miss the
    deadline and one of the other two sets are released.&lt;/li&gt;
&lt;li&gt;This is not the end of the world. Depending on how much work is left
    would dictate what happens. Scope could be further reduced, the set
    could be finished, or abandoned completely.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Questions&lt;/h4&gt;
&lt;h5&gt;Is this waste?&lt;/h5&gt;
&lt;p&gt;No. The goal is to hit the deadline with the best possible solution.
While a number of sets will never be released, the teams have hit their
target. Teams should judge success on goal completion, not lines of code
into production.&lt;/p&gt;
&lt;h5&gt;What are the downsides?&lt;/h5&gt;
&lt;p&gt;Trying to explain SBD and actually convincing the business to have a
number of teams all working on the same project would sadly be an
incredible challenge in most organisations.&lt;/p&gt;
&lt;h5&gt;When would you not use SBD?&lt;/h5&gt;
&lt;p&gt;SBD makes sense when there is a fixed scope deadline that cannot be
missed. If this is not the case, iteration or refactoring at each step
would suffice.&lt;/p&gt;
&lt;h5&gt;Alternatives?&lt;/h5&gt;
&lt;p&gt;Producing an architecture that allows replacement or changes easily is
another alternative, though this has risks of its own. Changeable
architecture will be covered in a future post.&lt;/p&gt;</content><category term="architecture"></category></entry><entry><title>Release It - Highlights Part 1</title><link href="/2015/09/release-it-highlights-part-1.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-09-01:/2015/09/release-it-highlights-part-1.html</id><summary type="html">&lt;p&gt;&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt; is one of the
most useful books I've read. The advice and suggestions inside certainly
change your perspective on how to write software. My key takeaway is
that software should be cynical. Expect the worst, expect failures and
put up boundaries. In the majority of cases these failures …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt; is one of the
most useful books I've read. The advice and suggestions inside certainly
change your perspective on how to write software. My key takeaway is
that software should be cynical. Expect the worst, expect failures and
put up boundaries. In the majority of cases these failures will be
trigged by integration points with other systems, be it third parties or
your own.&lt;/p&gt;
&lt;p&gt;My rough notes and snippets will be spread across the following two
posts. There is much more to the book than this, including various
examples of real life systems failing and how they should have handled
the problem in the first place.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - Shared Resources, Responses, SLA, Databases and Circuit
    Breakers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-2.html"&gt;Part 2 - Caches, Testing, HTML, Pre-Computation and
    Logging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Shared Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Shared Resources can jeopardize scalability.&lt;/li&gt;
&lt;li&gt;When a shared resource gets overloaded, it will become a bottleneck.&lt;/li&gt;
&lt;li&gt;If you provide the front end system, test what happens if the back
    end is slow/down. If you provide the back end, test what happens if
    the front end is under heavy load.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Responses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Generating a slow response is worse than refusing to connect or
    timing out.&lt;/li&gt;
&lt;li&gt;Slow responses trigger cascading failures.&lt;/li&gt;
&lt;li&gt;Slow responses on the front end trigger more requests. Such as the
    user hitting refresh a few times, therefore generating more load
    ironically.&lt;/li&gt;
&lt;li&gt;You should error when a response exceeds the systems allowed time,
    rather than waiting.&lt;/li&gt;
&lt;li&gt;Most default timeouts of libraries and frameworks are far too
    generous - always configure manually.&lt;/li&gt;
&lt;li&gt;One of the worst places that scaling effects will bite you is with
    point to point communication. Favour &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/queue-centric-work-pattern.html"&gt;other alternatives such as
    messaging&lt;/a&gt;
    to remove this problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SLA&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When calling third parties, services levels only decrease.&lt;/li&gt;
&lt;li&gt;Make sure even without a third party response your system can
    degrade gracefully.&lt;/li&gt;
&lt;li&gt;Be careful when crafting SLA's. Do not simply state 99.999%, it
    costs too much to hit this target and most systems don't need this
    sort of uptime.&lt;/li&gt;
&lt;li&gt;Reorient the discussion around SLA's to focus on features, not
    systems.&lt;/li&gt;
&lt;li&gt;You cannot offer a better SLA than the worst of any external
    dependencies you use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Databases&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Your application probably trusts the database far too much.&lt;/li&gt;
&lt;li&gt;Design with scepticism and you will achieve resilience.&lt;/li&gt;
&lt;li&gt;What happens if the DB returns 5 million rows instead of 5 hundred?
    You could run out of memory trying to load all this. The only
    answers a query can return is 0, 1 or many. Don't rely on the
    database to follow this limit. Other systems or batch processes may
    not respect this rule and insert too much data.&lt;/li&gt;
&lt;li&gt;After a system is in production, fetch results can return huge
    result sets. Unlike developer testing where only a small subset of
    data is around.&lt;/li&gt;
&lt;li&gt;Limit your DB queries, e.g. SELECT * FROM table LIMIT 15 (the
    wildcard criteria would be substituted)&lt;/li&gt;
&lt;li&gt;Put limits into other application protocols such REST endpoints via
    paging or offsets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Circuit Breakers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Now and forever &lt;a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"&gt;networks will always be
    unreliable&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The timeout pattern prevents calls to integration points from
    becoming blocked threads.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/bliki/CircuitBreaker.html"&gt;Circuit
    Breakers&lt;/a&gt; area
    way of automatically degrading functionality when a system is under
    stress.&lt;/li&gt;
&lt;li&gt;Changes in a circuit breaker should always be logged and monitored.&lt;/li&gt;
&lt;li&gt;The frequency of state changes in a circuit breaker can help
    diagnose other problems with the system.&lt;/li&gt;
&lt;li&gt;When there is a problem with an integration point, stop calling it
    during a cool off period. The circuit breaker will enable this.&lt;/li&gt;
&lt;li&gt;Popping a circuit breaker always indicates a serious problem - log
    it.&lt;/li&gt;
&lt;/ul&gt;</content><category term="release-it-series"></category></entry><entry><title>Release It - Highlights Part 2</title><link href="/2015/09/release-it-highlights-part-2.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-09-01:/2015/09/release-it-highlights-part-2.html</id><summary type="html">&lt;p&gt;This is the second part of my collection of notes and snippets from
&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-1.html"&gt;Part 1 - Shared Resources, Responses, SLA, Databases and Circuit
    Breakers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - Caches, Testing, HTML, Pre-Computation and Logging (Future
    Post)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Caches&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Low memory conditions are a threat to both stability and capacity.&lt;/li&gt;
&lt;li&gt;You need to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is the second part of my collection of notes and snippets from
&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-1.html"&gt;Part 1 - Shared Resources, Responses, SLA, Databases and Circuit
    Breakers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - Caches, Testing, HTML, Pre-Computation and Logging (Future
    Post)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Caches&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Low memory conditions are a threat to both stability and capacity.&lt;/li&gt;
&lt;li&gt;You need to ask whether the possible keys are infinite or finite and
    would the items ever need to change?&lt;/li&gt;
&lt;li&gt;The simplest cache clearing mechanism is time based.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/caching.html"&gt;Improper use of
    caching&lt;/a&gt; is the
    major cause of memory leaks, which turn into horrors like daily
    server restarts.&lt;/li&gt;
&lt;li&gt;Your system should run for at least the typical deployment cycle. If
    you deploy once every two weeks, it should be able to run for at
    least two weeks without restart.&lt;/li&gt;
&lt;li&gt;Limit the amount of memory a cache can use.&lt;/li&gt;
&lt;li&gt;Caches that do not limit memory will eventually eat all memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Testing&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Every integration point should have a test harness that can be
    substituted.&lt;/li&gt;
&lt;li&gt;Make your test harness act like a hacker - try large payloads,
    invalid characters, injection and so on.&lt;/li&gt;
&lt;li&gt;Have your test harness log requests so you can see what has caused
    problems.&lt;/li&gt;
&lt;li&gt;Run longevity tests - tests that put impulse and stress upon a
    system over long periods of time.&lt;/li&gt;
&lt;li&gt;Someone saying "&lt;em&gt;the odds of that happening is millions to one&lt;/em&gt;" is
    actually quite likely to happen. Given a average site, making
    thousands of requests a day this is an easy target to hit.&lt;/li&gt;
&lt;li&gt;Sessions are the Achilles heel of every application server.&lt;/li&gt;
&lt;li&gt;Most testing uses the app in the way it was expected to be use such
    as load testing a site using the correct workflow. What about load
    testing without using cookies? Would this spawn a new session each
    time?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;HTML&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Whitespace costs! In HTML (or the markup generated) remove all
    whitespace. It costs time to generate and money to send across the
    wire. You could argue this is for big traffic sites only, but this
    technique is very simple to apply as part of the build and speeds up
    client side rendering.&lt;/li&gt;
&lt;li&gt;Omit needless characters in HTML such as comments. Use server side
    commenting instead, this will be removed when processed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Pre-Computation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Precompute as much of the page as possible. Use "punch outs" for
    dynamic content. For example Slashdot generates its page once and
    serves to thousands of users. All users get the page equally as
    fast. Caching would mean handfuls of users would get a slow
    experience.&lt;/li&gt;
&lt;li&gt;Precomputed content should be deployed as part of the build. For
    more frequent updates another strategy or "content deploys" would be
    required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Logging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The human visual system is an excellent pattern matching machine.
    Make logs readable by using a custom format. Scanning logs is very
    easy then.&lt;/li&gt;
&lt;li&gt;Two line log files are difficult. Harder to grep. Keep everything on
    one line.&lt;/li&gt;
&lt;li&gt;Each week review the systems tickets. Try to identify and fix
    problems as you go. Try and predict future problems where possible
    based on this info.&lt;/li&gt;
&lt;li&gt;Check the logs daily for stack traces that are suspicious. These
    could be common errors that are bugs/problems that need fixing.&lt;/li&gt;
&lt;/ul&gt;</content><category term="release-it-series"></category></entry><entry><title>The Self Shunt - Test Doubles without a Framework</title><link href="/2015/09/the-self-shunt-test-doubles-without.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-09-01:/2015/09/the-self-shunt-test-doubles-without.html</id><summary type="html">&lt;p&gt;Generally you should &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/why-i-dont-like-mocking-frameworks.html"&gt;favour hand crafted stubs without a framework by
default&lt;/a&gt;.
Before you reach for a framework there is another bridging step that you
can take only pulling in a framework if complexity arises - the Self
Shunt.&lt;/p&gt;
&lt;p&gt;Assume a simple &lt;em&gt;Hello World&lt;/em&gt; subject under test where we can provide …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Generally you should &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/why-i-dont-like-mocking-frameworks.html"&gt;favour hand crafted stubs without a framework by
default&lt;/a&gt;.
Before you reach for a framework there is another bridging step that you
can take only pulling in a framework if complexity arises - the Self
Shunt.&lt;/p&gt;
&lt;p&gt;Assume a simple &lt;em&gt;Hello World&lt;/em&gt; subject under test where we can provide
different formatters that format the message to a console, XML or JSON
for example. How do we test that the formatter is used, with the right
arguments?&lt;/p&gt;
&lt;p&gt;Enter the &lt;a href="http://www.objectmentor.com/resources/articles/SelfShunPtrn.pdf"&gt;Self Shunt
(pdf)&lt;/a&gt;.
Have the test fixture implement the interface aka assume the role of a
message formatter. It provides itself as a parameter to the greeter in
the form of &lt;code&gt;self/this&lt;/code&gt;. The greeter uses this implementation during its
execution, the test fixture can then assert or set state.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/698caab47b1428d0e303.js"&gt;&lt;/script&gt;

&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Quick and simple to get up and running.&lt;/li&gt;
&lt;li&gt;Most commands fall into the category of invoke something with some
    parameters, with little more complexity.&lt;/li&gt;
&lt;li&gt;Forces you to respect the Interface Segregation Principle, otherwise
    this technique can become painful. A framework usually masks this
    complexity.&lt;/li&gt;
&lt;li&gt;Code is inline to the test or fixtures.&lt;/li&gt;
&lt;li&gt;Exposes and explains how frameworks work conceptually to new
    developers - removing some of the &lt;em&gt;magic&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Self Shunt is my default approach for testing commands which are
usually local to test fixtures. Queries default to hand crafted stubs
which are usually shared amongst tests. If further tests need the same
configuration the shunt can be promoted to a full object that lives
independently of the test fixture. Finally if this starts to become
difficult to work with I would reach for a framework - commands usually
reach this point first.&lt;/p&gt;</content><category term="testing"></category><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Types of Test Doubles</title><link href="/2015/09/types-of-test-doubles.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-09-01:/2015/09/types-of-test-doubles.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Mock&lt;/em&gt; is an overloaded term in software development. Sadly this leads
to developers answering with "&lt;em&gt;mock it&lt;/em&gt;" when a mock object may not be
the right solution. &lt;a href="http://xunitpatterns.com/Test%20Double.html"&gt;Test
Doubles&lt;/a&gt; are a more general
term. I should try to use this naming more than I do at present - a goal
I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Mock&lt;/em&gt; is an overloaded term in software development. Sadly this leads
to developers answering with "&lt;em&gt;mock it&lt;/em&gt;" when a mock object may not be
the right solution. &lt;a href="http://xunitpatterns.com/Test%20Double.html"&gt;Test
Doubles&lt;/a&gt; are a more general
term. I should try to use this naming more than I do at present - a goal
I aim to work towards. The result of choosing the wrong test double may
seem innocent but the effect will be a very different style of test
method, with increased coupling to implementation details. The following
definitions are ordered in terms of complexity and increased coupling.&lt;/p&gt;
&lt;h4&gt;Stubs&lt;/h4&gt;
&lt;p&gt;Provide canned responses. By their nature stubs would respond to
queries. Stubs allow you to test paths of the code that would be
otherwise difficult as they always provide the same answer.&lt;/p&gt;
&lt;h4&gt;Spies&lt;/h4&gt;
&lt;p&gt;Similar to a stub but with the addition that a spy records its actions.
When responding to a query or a command the spy keeps track of what
happened, how often and anything else relevant. The test can then
inspect the spy for the answer, deciding whether to pass or fail. Unlike
Mocks, spies play well with the Arrange-Act-Assert pattern. Spies let
you answer the question &lt;em&gt;has something happened&lt;/em&gt; whereas Mocks tend to
lead you towards &lt;em&gt;how has something happened&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Fakes&lt;/h4&gt;
&lt;p&gt;Fake objects tend to be used in higher level tests. These are fake
implementations of the object they are standing in for. A fake
repository would be implemented in a simple manner, instead opting for a
simple in memory hash table for its implementation. This allows tests to
be run with some confidence that the system will behave as expected.
Combined with &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;Contract
Tests&lt;/a&gt;,
fakes can turbo charge the speed of your test execution while still
providing confidence.&lt;/p&gt;
&lt;h4&gt;Mocks&lt;/h4&gt;
&lt;p&gt;Similar to spies mocks are primarily in charge with recording what
happens. However while spies are silent in their nature relying on the
test to interrogate them, mocks differ by throwing exceptions if their
expectations are not met. Mocks natural partner is commands. Unlike
spies Mocks can struggle to fit into the Arrange-Act-Assert pattern. Of
all the test doubles Mocks are the most coupled to implementation
details so their use should be limited.&lt;/p&gt;</content><category term="testing"></category><category term="unit-testing"></category></entry><entry><title>Waste: Write Less Code</title><link href="/2015/09/waste-write-less-code.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-09-01:/2015/09/waste-write-less-code.html</id><summary type="html">&lt;p&gt;One of the biggest &lt;a href="https://en.wikipedia.org/wiki/Lean_manufacturing#Types_of_waste"&gt;forms of
waste&lt;/a&gt;
is code. &lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley-ebook/dp/B00HNB3VQE"&gt;An estimated 80% of features in a software project are never
or rarely
used&lt;/a&gt;.
This makes code the software development equivalent of inventory. Having
a warehouse full of inventory is not a benefit, neither is having a
repository full of code …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the biggest &lt;a href="https://en.wikipedia.org/wiki/Lean_manufacturing#Types_of_waste"&gt;forms of
waste&lt;/a&gt;
is code. &lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley-ebook/dp/B00HNB3VQE"&gt;An estimated 80% of features in a software project are never
or rarely
used&lt;/a&gt;.
This makes code the software development equivalent of inventory. Having
a warehouse full of inventory is not a benefit, neither is having a
repository full of code.&lt;/p&gt;
&lt;h4&gt;How to Have Less Code?&lt;/h4&gt;
&lt;h5&gt;Delete it!&lt;/h5&gt;
&lt;p&gt;As much as you can within reason of course, tests must pass and features
must still work. Deleting feels great when you can successfully remove
some legacy code. You'll be surprised at what can be removed. Commented
out code, unused classes and methods are the obvious first candidates.&lt;/p&gt;
&lt;h5&gt;Say &lt;em&gt;No&lt;/em&gt; To Features by Default&lt;/h5&gt;
&lt;p&gt;Only add them if the benefit outweighs planning, designing, development,
testing and maintenance costs combined. Even then, do you really need
it? The advice here is &lt;a href="http://www.amazon.com/ReWork-Change-Way-Work-Forever-ebook/dp/B003ELY7PG/"&gt;do not listen to your customers regarding which
features to
add&lt;/a&gt;,
instead listen to their problems.&lt;/p&gt;
&lt;h5&gt;Libraries/Frameworks&lt;/h5&gt;
&lt;p&gt;Try and see if a library or framework can handle your use case. They may
not be a perfect fit, but if isolated correctly the use of third party
code can mean a massive reduction in code you need to write. You still
need to maintain and configure third party code however.&lt;/p&gt;
&lt;h4&gt;Benefits of Less Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Quicker to compile/parse.&lt;/li&gt;
&lt;li&gt;Tests run quicker.&lt;/li&gt;
&lt;li&gt;Easier on-boarding - less to understand and familiarise with.&lt;/li&gt;
&lt;li&gt;Less chance of bugs - more code is more likely to have bugs.&lt;/li&gt;
&lt;li&gt;Potential performance related problems should be reduced.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember - code is a liability. The job of software developer is not to
write code, it is to solve problems. Sometimes this takes thousands of
lines of code, other times it can take a simple conversation.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Loops vs Functional Programming Styles</title><link href="/2015/08/loops-vs-functional-programming-styles.html" rel="alternate"></link><published>2015-08-01T00:00:00+02:00</published><updated>2015-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-08-01:/2015/08/loops-vs-functional-programming-styles.html</id><summary type="html">&lt;p&gt;The following examples are four of the most common functional
programming patterns that appear in mainstream languages though they may
be known under different names.&lt;/p&gt;
&lt;p&gt;Being a &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;fan of CQS and
CQRS&lt;/a&gt;,
queries work great when coding using the functional style. While this is
completely subjective in terms of style …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The following examples are four of the most common functional
programming patterns that appear in mainstream languages though they may
be known under different names.&lt;/p&gt;
&lt;p&gt;Being a &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;fan of CQS and
CQRS&lt;/a&gt;,
queries work great when coding using the functional style. While this is
completely subjective in terms of style there is another benefit -
composition. In other words the functional styles below can all be
joined together with minimal changes. A traditional loop would require
additional modifications. The benefit composition provides is similar to
the &lt;a href="http://www.enterpriseintegrationpatterns.com/PipesAndFilters.html"&gt;pipes and filter
architecture&lt;/a&gt;
- it is very easy to change the behaviour of the pipeline by simply
adding or removing statements.&lt;/p&gt;
&lt;p&gt;Composition and concise code aside, traditional loops should not be
avoided fully. Each scenario will have different solutions. Sometimes
you really just want a standard loop.&lt;/p&gt;
&lt;p&gt;The benefit of learning the key concepts behind &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;,
&lt;code&gt;ForEach&lt;/code&gt; and &lt;code&gt;Reduce&lt;/code&gt; is the ability to translate these styles and
idioms into other languages that may have the same functionality just
behind a different interface.&lt;/p&gt;
&lt;h4&gt;Map&lt;/h4&gt;
&lt;p&gt;Also known as Projection. Convert the array into a new array based on
the callback provided.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/76da9beecc3f482daf20.js"&gt;&lt;/script&gt;

&lt;h4&gt;Filter&lt;/h4&gt;
&lt;p&gt;Filter the array based on the callback if the result is true. In the
same manner as Map, the non functional version of this code is an
extremely common pattern so the functional version really shines here.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/1347cd4e6b5fb318429c.js"&gt;&lt;/script&gt;

&lt;h4&gt;ForEach&lt;/h4&gt;
&lt;p&gt;Invokes the callback for each member of the array. This is another very
common pattern that really benefits from the functional form.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/cd49450677bd2583dffe.js"&gt;&lt;/script&gt;

&lt;h4&gt;Reduce&lt;/h4&gt;
&lt;p&gt;Converts the array into a single value by taking the current index and
the next index as parameters to be applied.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/41ebbc74a83232227db8.js"&gt;&lt;/script&gt;</content><category term="javascript"></category><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Production Code is Dirty</title><link href="/2015/08/production-code-is-dirty.html" rel="alternate"></link><published>2015-08-01T00:00:00+02:00</published><updated>2015-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-08-01:/2015/08/production-code-is-dirty.html</id><summary type="html">&lt;p&gt;Production code is dirty. &lt;em&gt;Dirty&lt;/em&gt; may be the wrong word however. Complex
could be more suitable. Unlike code that is not yet in production, it is
weathered, proven, and full of edge cases including numerous bug fixes.
After some time this build up of additions can cause the code to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Production code is dirty. &lt;em&gt;Dirty&lt;/em&gt; may be the wrong word however. Complex
could be more suitable. Unlike code that is not yet in production, it is
weathered, proven, and full of edge cases including numerous bug fixes.
After some time this build up of additions can cause the code to be
considered dirty or legacy.&lt;/p&gt;
&lt;p&gt;Greenfield development used to appeal so much more. Small classes. Small
methods. Few dependencies. Just simple, clean code. Except this is not
the case. Get into production and that clean code starts to weather.
You'll handle edge cases, fix bugs and stabilize the functionality. That
lovely, small, well factored application starts to accumulate dirt. The
new code smell wears off and you're back waiting for the next new
project so you can do it properly a second time around.&lt;/p&gt;
&lt;p&gt;This does not have to be the case however. Long living software such as
operating systems, browsers and embedded systems are maintained and
extended well after they were created. Production code can be
complicated but still clean with redeemable qualities. In order to do
this you should write tests, &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;control
dependencies&lt;/a&gt;
and get into production or the hands of the user as soon as possible.
This may seem an obvious solution but sadly many software projects fall
into this trap of dirty code after a handful of iterations.&lt;/p&gt;</content><category term="retro"></category><category term="code-quality"></category></entry><entry><title>Queue Centric Work Pattern</title><link href="/2015/08/queue-centric-work-pattern.html" rel="alternate"></link><published>2015-08-01T00:00:00+02:00</published><updated>2015-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-08-01:/2015/08/queue-centric-work-pattern.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern"&gt;Queue Centric Work Pattern
(QCWP)&lt;/a&gt;
is simple. Send a message declaring the intent of the command,
acknowledge the message and proceed. All work takes place in a
background process so the user is not kept waiting for the request to
return. Acknowledgement usually takes the form of persistence to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern"&gt;Queue Centric Work Pattern
(QCWP)&lt;/a&gt;
is simple. Send a message declaring the intent of the command,
acknowledge the message and proceed. All work takes place in a
background process so the user is not kept waiting for the request to
return. Acknowledgement usually takes the form of persistence to ensure
that no messages are lost. Real life examples of the QCWP in action
would be the sending of an email or the confirmation of an order being
accepted from an online retailer.&lt;/p&gt;
&lt;p&gt;The QCWP will introduce the concept of &lt;a href="https://en.wikipedia.org/wiki/Eventual_consistency"&gt;eventual
consistency&lt;/a&gt;, which
surprisingly is not an issue in most cases. The queue itself should be
implemented via some form of message queue that handles some of the more
complicated technical issues regarding message meta data, routing,
persistence and so on. Once a message queue has been chosen the code
required to implement QCWP does not differ to far from simple
request-response examples in terms of both complexity and lines of code.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;h5&gt;Reduced Latency&lt;/h5&gt;
&lt;p&gt;Transferring the message, confirming acknowledgement and returning to
user with some form of confirmation can be very quick. If the process is
long running, it can be vastly quicker to use the QCWP. Even for low
latency scenarios, the use of the QCWP introduces other benefits.&lt;/p&gt;
&lt;h5&gt;Retry&lt;/h5&gt;
&lt;p&gt;If something fails you can retry the command in a background process.
Nothing is lost when one or more systems are down. If the command fails
consistently, then you can simply notify the user or perform some other
compensating action.&lt;/p&gt;
&lt;h5&gt;Decoupled&lt;/h5&gt;
&lt;p&gt;If one system is offline the message is just stored and the queue builds
up. Once back online the queue will be emptied. The temporal coupling
between the two systems is now removed. Coupling has been reduced so
much that you can switch consumer with another system and the client
would be unaware as long as the message formats remain the same. This
allows different languages to read and populate the queues.&lt;/p&gt;
&lt;h5&gt;Scaling&lt;/h5&gt;
&lt;p&gt;To increase throughput you can simple introduce a competing consumer
until the appropriate amount of messages is handled within a SLA
boundary. The inverse is also true. The QCWP allows throttling. Rather
than peak load from web server traffic hitting the back end services,
these can be scaled independently. As the consumer of the messages will
handle each message at its own pace, there is no chance that other
dependencies such as databases would become overwhelmed.&lt;/p&gt;
&lt;h4&gt;Downsides&lt;/h4&gt;
&lt;p&gt;These benefits don't come for free however. The main issue with the QCWP
is the time it takes to get to grips with this change of conceptual
model. Testing asynchronous code is a lot harder, introducing problems
such as polling shared resources for changes. The very same issue means
simply debugging asynchronous systems can be challenging even with good
monitoring and auditing in place.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;QCWP was a real change in terms of how I think about two services
communicating. This change in pattern is not hard, merely different.
Once you adjust to the challenges, the benefits enable some truly
resilient systems when communication must occur out of process.&lt;/p&gt;</content><category term="microservices"></category><category term="distributed-systems"></category><category term="SOA"></category></entry><entry><title>Why I Don't Like Mocking Frameworks</title><link href="/2015/08/why-i-dont-like-mocking-frameworks.html" rel="alternate"></link><published>2015-08-01T00:00:00+02:00</published><updated>2015-08-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-08-01:/2015/08/why-i-dont-like-mocking-frameworks.html</id><summary type="html">&lt;p&gt;Disclaimer: By &lt;em&gt;mocking&lt;/em&gt; framework I generalize anything that includes
support for stubs and mock objects.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The use of mocking frameworks was a difficult part of my TDD journey.
Not only are newcomers expected to get their head around the basics of
the practice there are now new tools to contend …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Disclaimer: By &lt;em&gt;mocking&lt;/em&gt; framework I generalize anything that includes
support for stubs and mock objects.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The use of mocking frameworks was a difficult part of my TDD journey.
Not only are newcomers expected to get their head around the basics of
the practice there are now new tools to contend with. To make matters
worse there is a lot of mocking frameworks out there with differing
quality qualities and suitability.&lt;/p&gt;
&lt;p&gt;The use of mocking frameworks includes a variety of disadvantages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Readability suffers in most cases. You often find yourself asking
    &lt;em&gt;what is exactly happening here?&lt;/em&gt; The frameworks themselves usually
    impose these constraints and make the issue worse.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ploeh.dk/2010/12/02/Interfacesarenotabstractions/"&gt;The use of frameworks tends to lead to header interfaces and not
    role interfaces being
    used&lt;/a&gt;.
    IDE's usually have a factor in this as they make this anti pattern
    so very easy to introduce.&lt;/li&gt;
&lt;li&gt;A lot of developers are not aware of what these frameworks are doing
    behind the scenes. This can lead to confusing tests and a general
    lack of understanding.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;My preference is to use hand crafted test doubles. While these are
looked down upon by some, they offer numerous benefits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/6674671"&gt;Stubs and Fakes are easier to
    understand&lt;/a&gt;, write and maintain
    when hand crafted.&lt;/li&gt;
&lt;li&gt;Manual test doubles read easier. The key benefit here being able to
    name implementations after their use and function.&lt;/li&gt;
&lt;li&gt;Hand crafted test doubles promote reuse. It is likely that such
    doubles will be used across numerous tests. Once created code
    duplication actually reduces.&lt;/li&gt;
&lt;li&gt;Hand crafted test doubles are a &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;prerequisite to enable contract
    testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The actual implementation of these hand crafted doubles is minimal. In
most cases simply providing the arguments as constructor or method
parameters works. For more complicated scenarios &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/dry-vs-damp-in-tests.html"&gt;DAMP
tests&lt;/a&gt;
can be used.&lt;/p&gt;
&lt;p&gt;One area where frameworks provide a benefit is that of mock objects. In
non trivial examples the requirements to verify numerous parameters and
configurations can be verbose to hand craft. However there are
alternatives to hand crafted test doubles such as the self shunt pattern
which will be expanded upon in a future post.&lt;/p&gt;</content><category term="tdd"></category><category term="unit-testing"></category></entry><entry><title>DRY vs Coupling in Production Code</title><link href="/2015/06/dry-vs-coupling-in-production-code.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-07-01:/2015/06/dry-vs-coupling-in-production-code.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;Duplication in tests can be a good
thing&lt;/a&gt;.
The same can be said for production code as well in some cases. No. I'm
not going mad. I probably wouldn't believe this if you showed me this
several years ago either. More experience has shown me that loose
coupling is often …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;Duplication in tests can be a good
thing&lt;/a&gt;.
The same can be said for production code as well in some cases. No. I'm
not going mad. I probably wouldn't believe this if you showed me this
several years ago either. More experience has shown me that loose
coupling is often more desirable than removing duplication. In other
words, the more duplication you remove, the more coupling you introduce
inadvertently.&lt;/p&gt;
&lt;p&gt;Duplication of logic is bad and will always be the case. I am not
debating this. You should only have one logical place for any domain
logic. As always follow the DRY principle. However just because two
pieces of code look the same, does not mean there is duplication.&lt;/p&gt;
&lt;h5&gt;Example&lt;/h5&gt;
&lt;p&gt;A system from my past had two places where an address was required for
display and serialization. Billing and Delivery addresses.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/d8d327e65dc0620cb372.js"&gt;&lt;/script&gt;

&lt;p&gt;My gut reaction was to introduce a common address model that could be
used for serialization and display. After all this screams of
duplication. However a billing address and delivery address are two
conceptually different things despite appearing identical.&lt;/p&gt;
&lt;p&gt;Given time the needs of the billing functionality may very well differ
from the needs of the delivery domain. Duplication of models/contracts
is weak duplication. There is no logic here.&lt;/p&gt;
&lt;p&gt;In DDD each bounded context will have different needs. As it turned out
the Billing Address began to have specific billing related functionality
added such as "IsDefaultAddress" and "IsSameAsDelivery". At this point
the two models are very different. This was a problem.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/f5606f1f8a68f7caef78.js"&gt;&lt;/script&gt;

&lt;p&gt;Sharing via a common library would have removed the total lines of code
but increase the number of dependencies. The Address is now coupled to a
single form meaning updates and new requirements are harder. Versioning
and packaging are now a concern. Any updates would need to be
coordinated across teams. Udi Dahan has warned about this previously in
what is summarized as "&lt;a href="http://programmer.97things.oreilly.com/wiki/index.php/Beware_the_Share"&gt;Beware the
Share&lt;/a&gt;".&lt;/p&gt;
&lt;h5&gt;Inheritance?&lt;/h5&gt;
&lt;p&gt;This example makes inheritance look like a good fit. While the use of
inheritance when applied correctly is not a bad thing, this scenario is
not appropriate. Inheritance is one of the strongest forms of coupling.
Applying inheritance across a type that we don't own is risky for the
reasons detailed previously. Now change is not only harder, it would
potentially be a breaking change. How would we model a delivery address
with multiple addresses? Why should both the billing and delivery domain
use the same terminology for its fields? If we accept that both
addresses are conceptually different despite looking identical at
present, we can side step these issues.&lt;/p&gt;
&lt;h5&gt;What to Share?&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Domain types should be shared. Using the previous example a
    PostalCode would make a good type to share. The functionality here
    is identical regardless of the type of address. PostalCode would
    likely have logic associated with the type which would not make
    sense to duplicate or implement in each sub system.&lt;/li&gt;
&lt;li&gt;Shared functionality that must be consistent makes a good candidate
    also. Examples such as UI widgets including headers and footers.&lt;/li&gt;
&lt;li&gt;Crossing cutting concerns such as logging, security and
    configuration can be shared when appropriate. A downside to this is
    you now force your consumers to take specific dependency versions
    which may or may not be acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Shared Kernel&lt;/h5&gt;
&lt;p&gt;DDD has the concept of a Shared Kernel. The dictionary definition of a
kernel is "&lt;em&gt;the central or most important part of something&lt;/em&gt;". Shared
Kernel's make sense to share the common functionality previously. The
name "common" is poorly thought out however. Most codebases will have a
common or utility library but by there very nature these will grow into
large components.&lt;/p&gt;
&lt;p&gt;The reason for this growth is everything is common across applications.
All applications need some sort of data access, so stick it in the
common library. All applications need some sort of serialization
mechanisms, so stick it in the common library. All applications need
some sort of web technology, so stick it in the common library. You
should be able to see where this is going.&lt;/p&gt;
&lt;h5&gt;Conclusion&lt;/h5&gt;
&lt;p&gt;As always when dealing with duplication apply the &lt;a href="http://c2.com/cgi/wiki?RuleOfThree"&gt;Rule of
Three&lt;/a&gt; where appropriate. If you
really must create a shared component, a small, concise library is
better than a library that handles multiple concerns. This will allow
consumers to adopt a "&lt;em&gt;plug 'n play&lt;/em&gt;" approach with which components
they require. Even then, try to fight removing duplication unless you
can be really sure there is a good reason to increase coupling. That
reuse you are striving for might not even come to fruition.&lt;/p&gt;</content><category term="tutorial"></category><category term="programming"></category></entry><entry><title>Integration Tests</title><link href="/2015/07/integration-tests.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-07-01:/2015/07/integration-tests.html</id><summary type="html">&lt;p&gt;It is well documented you need a balance between different categories of
automated tests. The split is usually in the form.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;70% unit&lt;/li&gt;
&lt;li&gt;20% integration&lt;/li&gt;
&lt;li&gt;10% acceptance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While unit tests make up the majority of tests, there is a limit to
their effectiveness. As soon as you leave the system …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is well documented you need a balance between different categories of
automated tests. The split is usually in the form.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;70% unit&lt;/li&gt;
&lt;li&gt;20% integration&lt;/li&gt;
&lt;li&gt;10% acceptance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While unit tests make up the majority of tests, there is a limit to
their effectiveness. As soon as you leave the system boundary you need
integration tests. Examples of when integration tests are required is
code that interacts with databases, web services or the file system.&lt;/p&gt;
&lt;p&gt;These integration tests should not test logic, this is a mistake. They
will become brittle and slow to execute otherwise. Instead of checking
domain logic, test at a lower level. Go as low as you can without
leaking implementation details of the subject under test. By going as
low as possible you will radically reduce the number of integration
tests required. Less tests means easier maintenance. Less tests also
means faster tests.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Assuming a SQL database, invoke the repository and test as lightly as
possible. Do not indirectly test this repository by invoking the code
higher levels in the stack. Avoid concerning yourself with what is
happening behind the scenes. Simply test that you can insert a record,
and retrieve the newly inserted record. Any other code that is involved
at higher levels can suffice at a unit level.&lt;/p&gt;
&lt;p&gt;Assertions should be loose enough to verify that the code is working,
but not asserting basic correctness. In other words prefer assertions
that check for the presence of results, rather than what those results
look like. If the value is of concern, convert into a fast, isolated
unit test.&lt;/p&gt;
&lt;h4&gt;Integration Tests are a Scam&lt;/h4&gt;
&lt;p&gt;The term &lt;em&gt;Integrated Tests&lt;/em&gt; is my preference given that &lt;a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/"&gt;integration
tests are a
scam&lt;/a&gt;.
This slight change in terminology helps keep these tests focused. Rather
than spiraling out of control, they are small in number and simply
verify that "&lt;em&gt;something is working&lt;/em&gt;". This is done by pushing all tests
of logic to the unit level.&lt;/p&gt;
&lt;p&gt;The key point here is that integration tests are required. Strongly
resist the urge to write all tests at the integrated level. Likewise do
not fall into the trap that thinking all tests must be done at the unit
level. The key here is balance.&lt;/p&gt;
&lt;p&gt;There is a fatal flaw with integration tests however. They can be wrong.
Given tests at a unit level will stub out anything that is out of
process, how do you stop such tests falling out of sync with the real
implementation? This is where &lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;Contract
Tests&lt;/a&gt;
come into play.&lt;/p&gt;</content><category term="testing"></category><category term="unit-testing"></category></entry><entry><title>Static Code</title><link href="/2015/07/static-code.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-07-01:/2015/07/static-code.html</id><summary type="html">&lt;p&gt;Static code is considered a bad thing by developers. This is especially
true when working with legacy code. The use of static code is often seen
as a smell and should not be used.&lt;/p&gt;
&lt;p&gt;This is not as black and white as it first seems. Static code can be
problematic …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Static code is considered a bad thing by developers. This is especially
true when working with legacy code. The use of static code is often seen
as a smell and should not be used.&lt;/p&gt;
&lt;p&gt;This is not as black and white as it first seems. Static code can be
problematic when global state is involved. Not only is it hard to
change, static code is very hard to test in an automated fashion. Bad
examples of static code include persistence, third party services, and
out of process calls. These examples should avoid static code where
possible.&lt;/p&gt;
&lt;p&gt;One guideline that served me very well in my early days of TDD was
treating &lt;a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/"&gt;static code as a death to
testability&lt;/a&gt;.
Unfortunately some developers don't move on from this guideline and
treat any use of static code as bad.&lt;/p&gt;
&lt;p&gt;In fact static code can have a benefit. If a method within a class can
be promoted to a public static method (PSM) it shows that the code is
stateless. This allows the "extract class" refactoring to be performed.
Without a PSM such refactoring is much more difficult. IDEs can automate
this step and if in a dynamic language you can simply lean on the
runtime to catch issues.&lt;/p&gt;
&lt;p&gt;The steps to perform this refactor are easy. If at any stage this is not
possible the method contains state.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the method public.&lt;/li&gt;
&lt;li&gt;Make the method static.&lt;/li&gt;
&lt;li&gt;Move the public static method to the new class.&lt;/li&gt;
&lt;li&gt;Update usage of the previous calls.&lt;/li&gt;
&lt;li&gt;Optionally remove the static modifier and update previous call
    sites.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the code cannot be promoted to a PSM then state exists. Increasingly
the code I write leads itself to a functional paradigm despite not be
written in a strictly functional language. Small, focused classes that
tend to be immutable. The use of PSM makes transition to this style of
code easy. There is no reason to avoid the use of static code as an
intermediate step to get to this position.&lt;/p&gt;</content><category term="programming"></category><category term="code-quality"></category></entry><entry><title>The Benefits of Contract Testing</title><link href="/2015/07/the-benefits-of-contract-testing.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-07-01:/2015/07/the-benefits-of-contract-testing.html</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;I previously claimed that you need some integrated tests but as few as
possible&lt;/a&gt;.
There are huge benefits to this approach, but there is a problem. How do
you stop your test doubles falling out of line with the real
implementations? The answer is to use Contract Tests.&lt;/p&gt;
&lt;h4&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Create …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;I previously claimed that you need some integrated tests but as few as
possible&lt;/a&gt;.
There are huge benefits to this approach, but there is a problem. How do
you stop your test doubles falling out of line with the real
implementations? The answer is to use Contract Tests.&lt;/p&gt;
&lt;h4&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Create a base test fixture, this is where your tests live. All
    assertions belong here.&lt;/li&gt;
&lt;li&gt;Subclass this base class with each implementation.&lt;/li&gt;
&lt;li&gt;Override each setup step to provide the implementation that is to be
    tested.&lt;/li&gt;
&lt;li&gt;All tests should pass for each instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;In this example there is a SQL repository and an in memory repository.
It is not possible to change either in any manner that causes them to
behave differently. We can safely use the in memory repository for
tests, with confidence that the test double matches the contract of the
real implementation.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/63a042dd2a20487410ab.js"&gt;&lt;/script&gt;

&lt;p&gt;The test double implementations can be executed on every test run. While
real implementations can be relegated to execution prior to commit or
during continuous integration. This trade off allows for fast feedback
cycles while ensuring all tests are run against production like
implementations.&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.thecodewhisperer.com/2009/10/08/who-tests-the-contract-tests/"&gt;Contract
    Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arlobelshee/ArsEditorExample/blob/master/SimulatableApi.Tests/FileSystemCanLocateFilesAndDirs.cs"&gt;No Mocks
    Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="testing"></category><category term="contracts"></category><category term="unit-testing"></category></entry><entry><title>You Still Need Manual Tests</title><link href="/2015/07/you-still-need-manual-tests.html" rel="alternate"></link><published>2015-07-01T00:00:00+02:00</published><updated>2015-07-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-07-01:/2015/07/you-still-need-manual-tests.html</id><summary type="html">&lt;p&gt;This blog has numerous examples of why unit,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;integration&lt;/a&gt;and
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;contract&lt;/a&gt;testing
is essential. However you still need manual tests. It is foolish to
believe that all testing can be covered by automated tests despite the
bias in this area.&lt;/p&gt;
&lt;h4&gt;Why?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Manual tests can catch anything you may have missed …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This blog has numerous examples of why unit,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;integration&lt;/a&gt;and
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;contract&lt;/a&gt;testing
is essential. However you still need manual tests. It is foolish to
believe that all testing can be covered by automated tests despite the
bias in this area.&lt;/p&gt;
&lt;h4&gt;Why?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Manual tests can catch anything you may have missed at an automation
    level.&lt;/li&gt;
&lt;li&gt;Manual tests can be unique. Use exploratory testing to try
    &lt;em&gt;different&lt;/em&gt; scenarios.&lt;/li&gt;
&lt;li&gt;Manual tests that fail become automated tests, so they can never
    regress.&lt;/li&gt;
&lt;li&gt;Manual tests exercise the full stack. Many areas such as DI
    conventions, logging, and other framework related configuration are
    better suited to manual verification.&lt;/li&gt;
&lt;li&gt;UI changes require visual verification - automation is near
    impossible here.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;More Than Just Functionality&lt;/h4&gt;
&lt;p&gt;Over the years, manual testing has caught numerous bugs, issues or
things I've just plain missed. When you are deep in a problem it can be
hard to see the wood for the tress. A second party manually testing
provides an unbiased check of your code for a second time.&lt;/p&gt;
&lt;p&gt;The key with manual tests is to ensure any issue is converted into an
automated test. This offsets the fact that manual testing is expensive
both in terms of time and cost. By doing so any regressions will be
prevented.&lt;/p&gt;
&lt;p&gt;QA includes more than functional testing. Security, performance and
usability to name a few are equally important. Do not avoid the manual
test step. Automated tests are only as good as the tests themselves.
Embrace manual and automated testing for the best of both worlds.&lt;/p&gt;</content><category term="acceptance-testing"></category><category term="unit-testing"></category></entry><entry><title>Branch by Abstraction</title><link href="/2015/06/branch-by-abstraction.html" rel="alternate"></link><published>2015-06-01T00:00:00+02:00</published><updated>2015-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-06-01:/2015/06/branch-by-abstraction.html</id><summary type="html">&lt;p&gt;Feature toggles are great for new features or features that are either
enabled or disabled. Branch by Abstraction offers the &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;same benefits as
feature
toggles&lt;/a&gt;
but the seam to introduce the change is the abstraction itself. Unlike
Feature Toggles, the use of Branch by Abstraction allows a gradual
transition to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Feature toggles are great for new features or features that are either
enabled or disabled. Branch by Abstraction offers the &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;same benefits as
feature
toggles&lt;/a&gt;
but the seam to introduce the change is the abstraction itself. Unlike
Feature Toggles, the use of Branch by Abstraction allows a gradual
transition to new functionality.&lt;/p&gt;
&lt;p&gt;Start by duplicating the type or implementing a new version of the
abstraction. The work in progress changes can be made safely while the
system is using the original implementations. In order to demonstrate
the new functionality, rely on automated tests or wire up the new
version. Once fully integrated and tested, simply remove the old
implementation. The addition or removal of implementations acts as the
toggle in this case.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/779dc06ff19e7e842ff6.js"&gt;&lt;/script&gt;

&lt;p&gt;To extend the &lt;code&gt;SimpleReceiptWriter&lt;/code&gt; a new version is made. This work in
progress implementation has no limit on the time to complete. The new
implementation will only take effect once configured.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/bfe505e8f7946fa9b2fc.js"&gt;&lt;/script&gt;

&lt;p&gt;Configuration takes the form of composition root or dependency injection
container changes. Given your code does not know the concrete
implementation (apart from tests) you should be fine to make these
switches.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;If no abstraction exists you can introduce one if
valid&lt;/a&gt;. If no
valid abstraction exists you can simply fallback to feature toggles.&lt;/p&gt;
&lt;p&gt;Branch by Abstraction plays nicely with &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;Walking
Skeletons&lt;/a&gt;.
Your first implementation will most likely be a simple first pass
attempt. Overtime these can be replaced with more fleshed out versions.&lt;/p&gt;
&lt;p&gt;Anytime you feel the need to create a branch in source, Branch by
Abstraction can be a valid alternate in most cases. &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;UI changes are
better suited as Feature
Toggles&lt;/a&gt;
due to the nature of the code.&lt;/p&gt;</content><category term="tutorial"></category><category term="programming"></category></entry><entry><title>Do you really need a Microservice?</title><link href="/2015/06/do-you-really-need-microservice.html" rel="alternate"></link><published>2015-06-01T00:00:00+02:00</published><updated>2015-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-06-01:/2015/06/do-you-really-need-microservice.html</id><summary type="html">&lt;p&gt;Lately there has been two sets of advice around the use of
Microservices. &lt;a href="http://martinfowler.com/bliki/MonolithFirst.html"&gt;Some advise that Microservices should be built after the
fact&lt;/a&gt;. &lt;a href="http://www.martinfowler.com/articles/dont-start-monolith.html"&gt;Others advise
the opposite
solution&lt;/a&gt;.
In conjunction there is a third option that deserves more attention. Do
you even need a Microservice at all? A &lt;a href="https://twitter.com/natpryce/status/593763168977088513"&gt;recent
tweet …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately there has been two sets of advice around the use of
Microservices. &lt;a href="http://martinfowler.com/bliki/MonolithFirst.html"&gt;Some advise that Microservices should be built after the
fact&lt;/a&gt;. &lt;a href="http://www.martinfowler.com/articles/dont-start-monolith.html"&gt;Others advise
the opposite
solution&lt;/a&gt;.
In conjunction there is a third option that deserves more attention. Do
you even need a Microservice at all? A &lt;a href="https://twitter.com/natpryce/status/593763168977088513"&gt;recent
tweet&lt;/a&gt; sparked
off the exact thought I have found myself conveying.&lt;/p&gt;
&lt;p&gt;Creating a Microservice is no easy feat. Despite the limited code or
functionality that is involved. There is a whole host of things that
need consideration; source control, project setup, databases, project
conventions, monitoring, logging, deployment, hosting and security to
name a few.&lt;/p&gt;
&lt;p&gt;The so called monolith or "application" as it was known before is a
tried and tested way of structuring applications. One of the big
criticisms levelled against monolithic applications is coupling. Having
worked with some terribly coupled applications I agree fully with this
complaint, but there are steps you can take to prevent this.&lt;/p&gt;
&lt;p&gt;A whole application does not need to live inside one logical project,
but instead can be split appropriately. In DDD a Bounded Context makes
sense. Using this model you would end up with a Customer and Products
project rather than a single project containing both.&lt;/p&gt;
&lt;p&gt;An easy step is the &lt;a href="https://blog.shaunfinglas.co.uk/2014/07/i-need-to-stop-misusing-namespaces.html"&gt;correct use of namespaces that are structured by
features rather than technology
choices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Education is also important, simply put in agreements across teams such
as "&lt;em&gt;nothing from the customer project will directly reference the
products functionality&lt;/em&gt;". This can be taken a step further by
introducing assertions into the build process that will fail if
"&lt;em&gt;project A references project B&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;There is no correct answer on whether you should or should not start
with a Microservice architecture. Each team will need to judge and base
their answer on their needs which will most likely vary over time. As it
has been said before - &lt;a href="http://www.codingthearchitecture.com/2014/07/06/distributed_big_balls_of_mud.html"&gt;if you can't structure a monolith what makes you
think you can structure Microservices any
better?&lt;/a&gt;&lt;/p&gt;</content><category term="microservices"></category><category term="retro"></category></entry><entry><title>Feature Toggles</title><link href="/2015/06/feature-toggles.html" rel="alternate"></link><published>2015-06-01T00:00:00+02:00</published><updated>2015-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-06-01:/2015/06/feature-toggles.html</id><summary type="html">&lt;p&gt;I'm a fan of regular releasing. My background and experience leads me to
release as regularly as possible. There are numerous benefits to regular
releases; limited risk, slicker release processes and the ability to
change as requirements evolve.&lt;/p&gt;
&lt;p&gt;The problem with this concept is how can you release when features …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm a fan of regular releasing. My background and experience leads me to
release as regularly as possible. There are numerous benefits to regular
releases; limited risk, slicker release processes and the ability to
change as requirements evolve.&lt;/p&gt;
&lt;p&gt;The problem with this concept is how can you release when features are
not functionally complete?&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;If there is still work in progress, one solution to allow frequent
releases is to use &lt;a href="http://martinfowler.com/bliki/FeatureToggle.html"&gt;feature
toggles&lt;/a&gt;. Feature
toggles are simple conditional statements that are either enabled or
disabled based on some condition.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/89438d0ec51aff4149d0.js"&gt;&lt;/script&gt;

&lt;p&gt;This simple example shows a feature toggle for an "Edit User" feature.
If the boolean condition is false, then we only show the "New User"
feature and the "Admin" feature. This boolean value will be provided by
various means, usually a configuration file. This means at certain
points we can change this value in order to demonstrate the "Edit User"
functionality. Our demo environment could have this enabled, while the
live system would be disabled until the feature is fully complete.&lt;/p&gt;
&lt;p&gt;If the feature to edit users took more than an ideal release cycle the
code could still be released. As long as all the tests and other release
checks pass there is no reason to defer this task. This is after all one
of the benefits of continuous integration. Any consumer of this code
base would always be working with up to date code, merge conflicts would
be next to non existent. Our new code would be integrated regularly.&lt;/p&gt;
&lt;p&gt;Ideally feature toggles live as high as possible in the dependency graph
of your application. In most cases this would be the composition root of
the application or within UI/presentation logic. This simplifies the
addition of toggles, but you need to be careful that just because the UI
hides a feature it is not truly disabled. In scenarios where security is
a concern the feature toggles may need to live further down the stack.&lt;/p&gt;
&lt;p&gt;It's best to remove feature toggles once the feature is complete
otherwise they can become a maintenance burden. Is this feature enabled
or disabled? Can we delete this code? These sort of questions can cause
legacy code to live unquestioned. One way to aid in their removal is to
add assertions to fail the build at a certain point in the future or
include a toggle with built in date/time logic.&lt;/p&gt;
&lt;p&gt;Feature Toggles help with demonstrating features, but they can be more
complex. For risky features you may want to slowly ramp up the number of
users who are exposed to the feature. In this case the actual toggle may
perform some basic logic such as "&lt;em&gt;one out of ten requests&lt;/em&gt;" enable the
new feature. Overtime this ratio can be increased until the feature is
fully enabled and proven.&lt;/p&gt;
&lt;p&gt;Another technique to allow fast, regular releases is to rely on &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/branch-by-abstraction.html"&gt;Branch
by
Abstraction&lt;/a&gt;.
This works great when the toggles live in the composition root or the
team have the ability to split work around features.&lt;/p&gt;</content><category term="tutorial"></category><category term="releasing"></category></entry><entry><title>FirstOrDefault in LINQ</title><link href="/2015/06/firstordefault-in-linq.html" rel="alternate"></link><published>2015-06-01T00:00:00+02:00</published><updated>2015-06-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-06-01:/2015/06/firstordefault-in-linq.html</id><summary type="html">&lt;p&gt;Explicit null checking is a code smell in most cases. It should be
limited where possible, or pushed to the edge of the system. A common
anti pattern I've noticed is the incorrect use of &lt;code&gt;First()&lt;/code&gt; in LINQ,
which I have used myself on many occasions in this manner.&lt;/p&gt;
&lt;p&gt;Assuming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Explicit null checking is a code smell in most cases. It should be
limited where possible, or pushed to the edge of the system. A common
anti pattern I've noticed is the incorrect use of &lt;code&gt;First()&lt;/code&gt; in LINQ,
which I have used myself on many occasions in this manner.&lt;/p&gt;
&lt;p&gt;Assuming a collection of items that you wish to query, the incorrect
approach is to explicitly check for a null return value and act
accordingly.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/0ab1ace9e1d582047485.js"&gt;&lt;/script&gt;

&lt;p&gt;The use of &lt;code&gt;FirstOrDefault()&lt;/code&gt; is redundant because no default is
actually set. The default value of a reference type would be null.
Meaning the explicit null checked is required. We could use &lt;code&gt;First()&lt;/code&gt;
alone, but this will throw an exception if there are no elements to
query against.&lt;/p&gt;
&lt;p&gt;A better solution is to set the default. As long as our initial query is
not operating on a null reference this is safe. Here the explicit null
check is gone. We have replaced it with a more functional solution which
is after all what LINQ is based upon. While both are equivalent, the
second example is much cleaner as well as being open to further chained
statements.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/f8622201f6cd44af138d.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;First()&lt;/code&gt; relies on one or more items being in the sequence. When you
are only ever dealing with one result &lt;code&gt;Single()&lt;/code&gt; is more appropriate.
This method will throw an exception if more than one result is found,
acting as a form of assertion. Like &lt;code&gt;First()&lt;/code&gt;, &lt;code&gt;Single()&lt;/code&gt; offers
&lt;code&gt;SingleOrDefault()&lt;/code&gt; which would work in the same manner as above.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Mob Programming</title><link href="/2015/05/mob-programming.html" rel="alternate"></link><published>2015-05-01T00:00:00+02:00</published><updated>2015-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-05-01:/2015/05/mob-programming.html</id><summary type="html">&lt;p&gt;I first saw this video of &lt;a href="http://mobprogramming.org/mob-programming-time-lapse-video-a-day-of-mob-programming/"&gt;Mob
Programming&lt;/a&gt;
a couple of years back. Mob Programming is pair programming taken one
step further, the whole team is based around a single machine. The
developers rotate regularly and those who are not driving can add
feedback, make suggestions or simply watch and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I first saw this video of &lt;a href="http://mobprogramming.org/mob-programming-time-lapse-video-a-day-of-mob-programming/"&gt;Mob
Programming&lt;/a&gt;
a couple of years back. Mob Programming is pair programming taken one
step further, the whole team is based around a single machine. The
developers rotate regularly and those who are not driving can add
feedback, make suggestions or simply watch and learn. Everyone should be
placed on a level playing field. I will admit to being highly sceptical
of Mob Programming at first.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;I advocate walking skeletons to ensure we are on the "right path" when
developing&lt;/a&gt;.
We wanted to do these as a team, during our planning and tasking phase.
I suggested mobbing rather than watching a solo developer on a projector
and it turned out to be quite fun. We also learned a few new tricks such
as keyboard shortcuts or IDE techniques along the way.&lt;/p&gt;
&lt;p&gt;There were a few rough edges, mainly due to the setup used. A laptop
around a screen proved difficult and this in turned seemed to put
pressure on individuals. In repeat sessions we have used a dedicated
space, with a proper machine and large screen or projector. The ten
minute rotation is enough to allow focus, while not being too long
between switching.&lt;/p&gt;
&lt;p&gt;While Mob Programming is a relatively new experience for myself, it is
proving quite valuable as technique to help develop a walking skeleton.
Currently we have not used Mob Programming for full time development. As
it stands, I would find it hard to recommend this for some development
tasks. Additionally I can think of developers and managers that would
simply resist any suggestion of mob programming. Unfortunately for some
teams this may be too much of a hard sell.&lt;/p&gt;
&lt;p&gt;The end result of a mobbing session is a task board filled up with minor
tasks such as improving test coverage, refactoring, or edge cases. The
core functionality is delivered as a team. Combined with the walking
skeleton Mob Programming solves some of the key &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/tasking-in-software-development.html"&gt;problems that
traditional tasking and planning
introduces&lt;/a&gt;
and is well worth an experiment.&lt;/p&gt;</content><category term="development"></category><category term="team"></category></entry><entry><title>Tasking in Software Development</title><link href="/2015/05/tasking-in-software-development.html" rel="alternate"></link><published>2015-05-01T00:00:00+02:00</published><updated>2015-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-05-01:/2015/05/tasking-in-software-development.html</id><summary type="html">&lt;p&gt;Tasking is core part of XP, Kanban, Scrum and other software development
methodologies. It is required when more than one developer is working on
a feature. I consider it to be the most wasteful part of the development
process as practiced in the mainstream.&lt;/p&gt;
&lt;p&gt;Tasking typically involves the team sitting …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tasking is core part of XP, Kanban, Scrum and other software development
methodologies. It is required when more than one developer is working on
a feature. I consider it to be the most wasteful part of the development
process as practiced in the mainstream.&lt;/p&gt;
&lt;p&gt;Tasking typically involves the team sitting around a
machine/desk/whiteboard/projector. From past experience this can take
anywhere from an hour up to a day or more. Engagement is often low and
this process can be both mentally and physically tiring. During which
many assumptions about what should be done is made.&lt;/p&gt;
&lt;p&gt;The end result is nothing but index cards, scribbled diagrams or other
lightweight documentation. These artifacts are often transformed into
digital versions.&lt;/p&gt;
&lt;h4&gt;Problems&lt;/h4&gt;
&lt;p&gt;The foolish understanding is that now any developer can pick up a task
and start work. This leads to dependent tasks being worked on in an
independent manner. Team members then find themselves being impeded
until a certain piece of code is in place. No amount of swarming or pair
programming can help in most cases.&lt;/p&gt;
&lt;p&gt;The biggest failure that poor tasking encourages is a task board with
numerous items moved to complete, &lt;a href="http://ronjeffries.com/articles/2015-01-02-hours-estimation/"&gt;yet the actual functionality is
broken and stood no chance of
working&lt;/a&gt;.
In my past experience, this is unfortunately very common.&lt;/p&gt;
&lt;p&gt;An equally common scenario is when task cards are stationary for long
periods, until they all move across to "done" very suddenly. This is
usually a symptom of a unidentified problem or change coming into play.&lt;/p&gt;
&lt;p&gt;Ultimately poor tasking results in waste.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;p&gt;Due to the frustrations of experiencing these problems week after week,
across numerous teams, I have experimented with a variety of solutions.&lt;/p&gt;
&lt;p&gt;Possibly the most controversial and difficult to sell is to have small
enough stories and features that mean a single developer/pair can work
on. Tasking becomes organic, just part of the day to day work. A simple
check list of tasks can suffice here. Both team members stay in sync
because the overhead of other team members has been removed. Ultimately
you still need to integrate these small(er) features but there are ways
to slimline this.&lt;/p&gt;
&lt;p&gt;A less dramatic solution is to task in a ad-hoc basis, per story/feature
and limit WIP to include tasking. In other words, if you are aiming to
deliver three features over several weeks, task the first feature and
move onto coding. If during this coding phase you change plans or
discover a problem, limited work is lost. Additionally tasking in
smaller chunks is better for the teams' morale.&lt;/p&gt;
&lt;p&gt;The two other solutions are the most powerful at combating the tasking
problem I have described, these are to utilize a &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/walking-skeleton.html"&gt;Walking
Skeleton&lt;/a&gt;
and try &lt;a href="https://blog.shaunfinglas.co.uk/2015/05/mob-programming.html"&gt;Mob
Programming&lt;/a&gt;.
Both of which will be detailed in future posts.&lt;/p&gt;</content><category term="retro"></category><category term="team"></category></entry><entry><title>Testing Private Code</title><link href="/2015/05/testing-private-code.html" rel="alternate"></link><published>2015-05-01T00:00:00+02:00</published><updated>2015-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-05-01:/2015/05/testing-private-code.html</id><summary type="html">&lt;p&gt;A common problem many people ask is - should you test private code? In
short, you shouldn't. You should always test the public api of your code
where possible. This is not always easy. Based on the context of the
code in question there are a few options available.&lt;/p&gt;
&lt;h5&gt;Don't Test …&lt;/h5&gt;</summary><content type="html">&lt;p&gt;A common problem many people ask is - should you test private code? In
short, you shouldn't. You should always test the public api of your code
where possible. This is not always easy. Based on the context of the
code in question there are a few options available.&lt;/p&gt;
&lt;h5&gt;Don't Test&lt;/h5&gt;
&lt;p&gt;Either don't test the private code or rely on manual testing. This will
not be ideal in many cases, but if the code is covered in higher level
tests you may be able to get away with it. If the code will be stable,
short lived or low risk you can default to this option.&lt;/p&gt;
&lt;h5&gt;Test via Public Tests&lt;/h5&gt;
&lt;p&gt;Simply test the private code by adding assertions or verifications to
exisiting public behaviour tests. If the setup requires a lot of work,
many edge cases or much duplication you may want to avoid this
technique.&lt;/p&gt;
&lt;h5&gt;Make the Code Public&lt;/h5&gt;
&lt;p&gt;Once public, the code is easily testable. Are we making this code public
just for the sake of an automated test? Yes, but there are valid times
to do this. Providing the behaviour is logically part of the object in
question there is no harm, the single responsibility principle is not
violated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.ploeh.dk/2011/02/28/Interfacesareaccessmodifiers/"&gt;Interfaces can be used to control visibility
here&lt;/a&gt;.
For testing you always use a concrete instance, while your production
code should hold references to interfaces only. To simply hide the
method, don't add it to the interface. For dynamic langauges this is as
simple as "&lt;em&gt;don't invoke it&lt;/em&gt;" or relying on naming conventions to
denoate implementation details.&lt;/p&gt;
&lt;h5&gt;Make a Public Class&lt;/h5&gt;
&lt;p&gt;When single responsibility principle would be violated in the technique
above, this is your other option. &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Beware the power of just adding a new
class and making it
public&lt;/a&gt;.
While it will allow testing in one place, &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;each public dependency you
introduce further increases
coupling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If the code that needs testing is a service, the act to introduce a
public object should be considered thoughtfully. Once the class is
pubic, you simply need to verify the use of the class, rather than what
it does. However &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;Value Objects can help limit the tests you need to
write&lt;/a&gt;
entirely and should be used whenever possible.&lt;/p&gt;</content><category term="testing"></category><category term="tdd"></category><category term="unit-testing"></category></entry><entry><title>Walking Skeleton</title><link href="/2015/05/walking-skeleton.html" rel="alternate"></link><published>2015-05-01T00:00:00+02:00</published><updated>2015-05-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-05-01:/2015/05/walking-skeleton.html</id><summary type="html">&lt;p&gt;&lt;a href="http://alistair.cockburn.us/Walking+skeleton"&gt;A Walking Skeleton is the thinnest possible slice of new functionality
that can be delivered end to
end&lt;/a&gt;. The term "&lt;em&gt;walking&lt;/em&gt;"
refers to the ability for the feature to "&lt;em&gt;stand on its own&lt;/em&gt;". You
should be able to deploy a Walking Skeleton and demonstrate it. Just
like a human skeleton …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://alistair.cockburn.us/Walking+skeleton"&gt;A Walking Skeleton is the thinnest possible slice of new functionality
that can be delivered end to
end&lt;/a&gt;. The term "&lt;em&gt;walking&lt;/em&gt;"
refers to the ability for the feature to "&lt;em&gt;stand on its own&lt;/em&gt;". You
should be able to deploy a Walking Skeleton and demonstrate it. Just
like a human skeleton is an incomplete body, a Walking Skeleton is an
incomplete piece of software with many internals stubbed, not
implemented or consisting of basic functionality.&lt;/p&gt;
&lt;p&gt;While the software won't do much it provides rapid feedback. It allows
your build and deploy pipeline to be set up if not already in place.
More importantly it gives developers a framework or scaffold to work
with.&lt;/p&gt;
&lt;p&gt;Production of a Walking Skeleton should be fast. Components such as
&lt;a href="https://blog.shaunfinglas.co.uk/2014/02/top-down-vs-bottom-up.html"&gt;which objects to introduce should ideally be developed top
down&lt;/a&gt;,
however the actual direction each solution takes will vary. Some design
will still be required, but the choice of patterns or implementation
details should be deferred where possible. Core interfaces such as
application services, domain models and data access will naturally fall
out of this process.&lt;/p&gt;
&lt;h4&gt;Tasking&lt;/h4&gt;
&lt;p&gt;Each new story or feature should be implemented as a Walking Skeleton
whenever possible. The first task a team should implement should be to
create the skeleton itself. An optional step during implementation is to
wrap the functionality in a acceptance test. Once the skeleton is
complete, a task per object can be created with clear inputs, outputs
and responsibilities.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Highlights problems that tasking often misses.&lt;/li&gt;
&lt;li&gt;Tasks can be implemented in parallel once a framework is in place.&lt;/li&gt;
&lt;li&gt;Implementing or replacing stubbed code is easy given a stable API.&lt;/li&gt;
&lt;li&gt;Provides working software very quickly and cheaply, which is great
    for feedback or exploration.&lt;/li&gt;
&lt;li&gt;Puts the whole team on the same page.&lt;/li&gt;
&lt;li&gt;Code trumps documentation.&lt;/li&gt;
&lt;li&gt;Leads to a more stable API.&lt;/li&gt;
&lt;li&gt;TDD is a natural fit once the skeleton is complete.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Producing a Walking Skeleton is not perfect, problems still crop up, but
they can be handled in a more controlled manner. Most issues relate to
implementation details at lower levels, rather than integration or
functional failures which are often symptoms of tasking before writing
any code.&lt;/p&gt;</content><category term="development"></category><category term="team"></category></entry><entry><title>Abstractions</title><link href="/2015/02/abstractions.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-04-01:/2015/02/abstractions.html</id><summary type="html">&lt;p&gt;This is the first part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Coupling is one of the enemies of a healthy code base. One way to combat
high coupling is to introduce abstractions.&lt;/p&gt;
&lt;p&gt;Too few abstractions is bad. Your code can become …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Coupling is one of the enemies of a healthy code base. One way to combat
high coupling is to introduce abstractions.&lt;/p&gt;
&lt;p&gt;Too few abstractions is bad. Your code can become coupled. Some of the
worst code I've worked with was highly coupled to either the database,
UI or both. Working with such code is difficult.&lt;/p&gt;
&lt;p&gt;Too many abstractions is equally as bad. Abstraction behind abstraction
can become so difficult to work with the benefit of abstracting in the
first place is lost. Some of the worst code I've worked with was so
convoluted with needless abstractions it made any development a tricky
process.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.ploeh.dk/2010/12/02/Interfacesarenotabstractions/"&gt;Most abstractions are not really abstractions at
all&lt;/a&gt;, but
nothing more than simple indirection. Indirection is sometimes required,
though it is wrong to confuse with abstraction. &lt;code&gt;IFileWriter&lt;/code&gt; is not an
abstraction. &lt;code&gt;IReciept&lt;/code&gt; that happens to write to the file system when
implemented as &lt;code&gt;FileSystemReceipt&lt;/code&gt; is an abstraction. &lt;code&gt;IFileWriter&lt;/code&gt;
&lt;em&gt;could&lt;/em&gt; be an abstraction if the software we were writing involved
working directly with the file system, such as a text editor. In the
case of printing receipts, where they are printed is simply an
implementation detail.&lt;/p&gt;
&lt;p&gt;Finding a balance between the right level of abstraction can be tricky.
From my experience there a few techniques that can be used.&lt;/p&gt;
&lt;h4&gt;Techniques&lt;/h4&gt;
&lt;h5&gt;Embrace Coupling&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://www.udidahan.com/?blog=true"&gt;Udi Dahan&lt;/a&gt; makes this point in his
presentations. If you have a traditional application with a UI, domain
and data layer why bother adding further layers to abstract these? If we
wish to retrieve a new field from the database and display the value we
have three places to change, adding further models and mapping layers
does nothing but increase coupling. &lt;a href="https://blog.shaunfinglas.co.uk/2014/07/i-need-to-stop-misusing-namespaces.html"&gt;Applying namespaces
correctly&lt;/a&gt;
can also help here, if everything that needs to change at the same time
is logically grouped, such changes are easier.&lt;/p&gt;
&lt;h5&gt;Apply YAGNI&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://codeopinion.com/simplify-your-code/"&gt;Do you truly need a database model mapped into a domain model, mapped
into a view model and back?&lt;/a&gt;
Applying YAGNI can limit many abstractions by simply not worrying about
"&lt;em&gt;what if&lt;/em&gt;" scenarios until they actually occur.&lt;/p&gt;
&lt;h5&gt;CQRS&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://martinfowler.com/bliki/CQRS.html"&gt;Command Query Responsibility Separation or
CQRS&lt;/a&gt; deserves an explanation
on its own, but for now applying CQRS reduces unnecessary coupling by
embracing it. For querying data and displaying it on a screen my default
choice is to use CQRS to simply read from the database and populate a
view model. This limits abstractions and helps keep the code focused,
flexible and open to change. &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;I will expand on CQRS in a future
post&lt;/a&gt;.&lt;/p&gt;</content><category term="abstractions-series"></category><category term="code-quality"></category></entry><entry><title>Cool URI's Don't Change</title><link href="/2015/04/cool-uris-dont-change.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-04-01:/2015/04/cool-uris-dont-change.html</id><summary type="html">&lt;p&gt;I switched domains back in June 2013. This was out of my control. A lot
of links were lost despite an attempt to backlink in order to keep the
traffic from the old links and new links crossing over. The previous
domain also broke content without consideration, there are links …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I switched domains back in June 2013. This was out of my control. A lot
of links were lost despite an attempt to backlink in order to keep the
traffic from the old links and new links crossing over. The previous
domain also broke content without consideration, there are links around
that simply point to nothing.&lt;/p&gt;
&lt;p&gt;To compound the issue I switched this blogs platform back in June 2014.
This was much overdue, but an issue fully in my control. This yet again,
broke links despite being for the better. My link management has been
poor and given how annoyed I become at other sites breaking links, it's
time to make a stand.&lt;/p&gt;
&lt;p&gt;A recent example was when I was on holiday with a limited wifi
connection of an evening. &lt;a href="https://twitter.com/mdpopescu/status/576647332671946752"&gt;A couple of users on Twitter wanted to share
some of my
content&lt;/a&gt;, but
the link was broken. After some delay and flip flopping I was finally
able to share the post they were after. I am extremely happy that Paul
thought of a blog post I wrote, so the fact that he was unable to share
it was embarrassing.&lt;/p&gt;
&lt;p&gt;An old mentor of mine introduced me to &lt;a href="http://www.w3.org/Provider/Style/URI.html"&gt;Cool
URI's&lt;/a&gt; early on in my career
and highlighted the importance of choosing a good URI scheme. From this
post onwards no links to my content both past and future will break,
despite hosting or platform choices. I've introduced an automated
process to check each post when the blog is backed up, to ensure this
never happens again.&lt;/p&gt;
&lt;p&gt;The lesson here is simple. If you publish content on a site under your
control, it's your duty to ensure you handle breaking changes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I debated the use of URL or URI for this post initially. For future
reference, &lt;a href="http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn"&gt;URI's identify, URL's identify and
locate&lt;/a&gt;.&lt;/p&gt;</content><category term="blogging"></category></entry><entry><title>CQRS - The Simplest Introduction</title><link href="/2015/04/cqrs-simplest-introduction.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-04-01:/2015/04/cqrs-simplest-introduction.html</id><summary type="html">&lt;p&gt;&lt;a href="http://martinfowler.com/bliki/CQRS.html"&gt;CQRS or Command Query Responsibility
Separation&lt;/a&gt; is easy to
understand but it can become complex due to various levels to which
developers take the principle behind it. Simply - &lt;a href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS is two models,
where the used to be
one&lt;/a&gt;.
Nothing more at its heart.&lt;/p&gt;
&lt;p&gt;Take the Customer aggregate below. This exposes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://martinfowler.com/bliki/CQRS.html"&gt;CQRS or Command Query Responsibility
Separation&lt;/a&gt; is easy to
understand but it can become complex due to various levels to which
developers take the principle behind it. Simply - &lt;a href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS is two models,
where the used to be
one&lt;/a&gt;.
Nothing more at its heart.&lt;/p&gt;
&lt;p&gt;Take the Customer aggregate below. This exposes both commands as void
methods and queries as methods with return types. Public state is
leaked, but needed in order to display or persist the data. Many
frameworks or libraries require public accessibility in order to
function.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/c1d94351de393f782435.js"&gt;&lt;/script&gt;

&lt;p&gt;CQRS states we split commands from queries. This means we end up with a
pure Customer aggregate root that exposes behaviour only. Likewise we
end up with a basic application service that simply returns data.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/dd2ff5c706847c3f4734.js"&gt;&lt;/script&gt;

&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;h5&gt;Commands&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Domain model is purely behaviour.&lt;/li&gt;
&lt;li&gt;No data is exposed, public fields/methods gone (no getters/setters)&lt;/li&gt;
&lt;li&gt;Only way to modify customers is via the commands - encapsulation is
    preserved.&lt;/li&gt;
&lt;li&gt;Less relationships simply for querying/persistence (has-a
    relationships)&lt;/li&gt;
&lt;li&gt;Testing is easier, check event raised/command issued rather than
    state&lt;/li&gt;
&lt;li&gt;Allows task based UI's, rather than CRUD focused interactions.&lt;/li&gt;
&lt;li&gt;If you use repositories, you only need a GetById method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Queries&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Queries can be simplified - in many cases by a huge amount. Just
    read from the data store, no need to create relationships between
    models.&lt;/li&gt;
&lt;li&gt;You can &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;use direct data access, rather than repositories or other
    abstractions&lt;/a&gt;.
    This has a lot of benefit.&lt;/li&gt;
&lt;li&gt;It's easy to develop, less layers and moving parts.&lt;/li&gt;
&lt;li&gt;You can independently replace persistent storage mechanisms per
    query based on use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Complexity&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CQRS is not architecture - it is a pattern, often used within
    boundaries of a system.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/"&gt;Event Sourcing and Eventual Consistency don't need to be
    used&lt;/a&gt;,
    but they can be employed if needed. Many examples of CQRS include
    these, making CQRS appear more complicated than it really is.&lt;/li&gt;
&lt;li&gt;You can separate read and write stores. For example, store the read
    data in document store, while storing write data in a relational
    database. This increases complexity and means that seeding/feeding
    data becomes an issue. &lt;a href="http://www.udidahan.com/2011/04/22/when-to-avoid-cqrs/"&gt;A collaborative domain can signal the need
    to do this&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CQRS is an easy concept, that introduces many benefits. However
implementation of this pattern can vary from simple, to complicated. The
extent to which CQRS is implemented should be judged on a case by case
basis. Many systems can get away without separating read and write
stores, yet still enjoy the benefits that this pattern provides.&lt;/p&gt;</content><category term="programming"></category><category term="SOA"></category><category term="tutorial"></category></entry><entry><title>DRY vs DAMP in Tests</title><link href="/2015/04/dry-vs-damp-in-tests.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-04-01:/2015/04/dry-vs-damp-in-tests.html</id><summary type="html">&lt;p&gt;In the &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;previous post I mentioned that duplication in tests is not
always
bad&lt;/a&gt;.
Sometimes duplication becomes a problem. Tests can become large or
virtually identically excluding a few lines. Changes to these tests can
take a while and increase the maintenance overhead. At this point, DRY
violations need to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;previous post I mentioned that duplication in tests is not
always
bad&lt;/a&gt;.
Sometimes duplication becomes a problem. Tests can become large or
virtually identically excluding a few lines. Changes to these tests can
take a while and increase the maintenance overhead. At this point, DRY
violations need to be resolved.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;h5&gt;Test Helpers&lt;/h5&gt;
&lt;p&gt;A common solution is to extract common functionality into setup methods
or other helper utilities. While this will remove and reduce duplication
this can make tests a bit harder to read as the test is now split
amongst unrelated components. There is a limit to how useful such
extractions can help as each test may need to do something slightly
differently.&lt;/p&gt;
&lt;h5&gt;DAMP - Descriptive and Meaningful Phrases&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://www.pluralsight.com/courses/advanced-unit-testing"&gt;Descriptive and Meaningful
Phrases&lt;/a&gt; is
the alter ego of DRY. DAMP tests often use the builder pattern to
construct the System Under Test. This allows calls to be chained in a
fluent API style, similar to the &lt;a href="https://blog.shaunfinglas.co.uk/2014/05/flexible-selenium-tests-via-page-objects.html"&gt;Page Object
Pattern&lt;/a&gt;.
Internally the implementation will still use literals or value objects,
but each test can provide just the differences it needs in order to
execute. The key point regardless of how DAMP tests are implemented is
to favor readability over anything else, while still eliminating
duplication where possible.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/d9308078e672ce5fd64f.js"&gt;&lt;/script&gt;

&lt;p&gt;The example shows a typical arrange aspect of a test written in the DAMP
style. The end result of this builder is we will have the ability to now
act and assert against the result - a controller instance. If further
tests were required we could use the same setup but simply provide
different order dates for example. Additionally we could add or remove
further chained calls. Behind the scenes the &lt;a href="https://github.com/Finglas/Playground/blob/master/SutBuilder/SutBuilderExample.cs"&gt;implementation of these
builders is
straightforward&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tend to introduce this pattern after the third time of seeing
duplication between tests. There is a bit of an overhead otherwise, the
builder itself requires implementation and careful construction. Once
you go past three tests the overhead pays itself off by allowing you to
rapidly add new tests and make large, structural changes.&lt;/p&gt;
&lt;p&gt;Beware the builders becoming too big or complex. If this starts to
happen you may wish to refactor as there may be missing abstractions in
your design. DAMP tests have numerous advantages, but they should be
applied where required rather than for every scenario. Tests for objects
that are lower in the dependency graph tend to fit into the more
traditional testing patterns, while higher up your stack DAMP tests can
prove useful.&lt;/p&gt;</content><category term="programming"></category><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Getters and Setters are Evil - Redux</title><link href="/2015/04/getters-and-setters-are-evil-redux.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-04-01:/2015/04/getters-and-setters-are-evil-redux.html</id><summary type="html">&lt;p&gt;Back in early 2011 I wrote one of my &lt;a href="https://blog.shaunfinglas.co.uk/2011/04/getters-and-setters-are-evil.html"&gt;most viewed and commented posts at
the time - Getters and Setters are
Evil&lt;/a&gt;.
Four years later it's time to review this.&lt;/p&gt;
&lt;p&gt;The feedback within the team was generally positive. Production code was
written in this style to great success. The core …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back in early 2011 I wrote one of my &lt;a href="https://blog.shaunfinglas.co.uk/2011/04/getters-and-setters-are-evil.html"&gt;most viewed and commented posts at
the time - Getters and Setters are
Evil&lt;/a&gt;.
Four years later it's time to review this.&lt;/p&gt;
&lt;p&gt;The feedback within the team was generally positive. Production code was
written in this style to great success. The core benefit was
encapsulation was preserved as Business Objects were the sole source of
domain logic. As an additional side effect testing was easier.&lt;/p&gt;
&lt;p&gt;However not everyone within the team agreed that the benefits were worth
the extra hassle or believed in the benefits of encapsulation. I always
found the addition of an &lt;code&gt;IRender&lt;/code&gt; interface or similar broke the SRP,
even if you moved the logic to a separate class. The OCP suffered too,
if view requirements changed, you need dig out your business object. The
biggest failing is that legacy code and frameworks still require public
getters/setters to function.&lt;/p&gt;
&lt;p&gt;Overtime I found myself and others slipping back to the "old ways" of
applying getters/setters without thought.&lt;/p&gt;
&lt;h4&gt;2015&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;I now simply use two models, where the used to be
one&lt;/a&gt;.
Changes go to the domain model in the form of commands. Queries get
returned as view models. The big change here is to simply split commands
from queries and embrace the second model, everything else falls into
place. This style works without a rich domain model also. The commands
can be expressed as Transaction Scripts or similar if desired.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a9bdd46c394ac06032fe.js"&gt;&lt;/script&gt;

&lt;p&gt;This is not new, I've applied this style in the past, but the big
difference is the business object is never mapped or converted into a
view model. There is no relationship between the two. They are two
distinct paths in the code. This is the difference that CQRS brings -
limited coupling.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;p&gt;Encapsulation is preserved as before, but the view model can be tailored
to requirements. SOLID principles are not broken, while still having the
huge benefit of playing nicely with frameworks due to exposing public
getter/setters in order to facilitate model binding.&lt;/p&gt;
&lt;p&gt;Getters and Setters are not evil as I've concluded before. It just turns
out there are better ways of embracing the benefits of thinking they are
evil.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The term Business Object is also known as Domain Object. The later being
my preferred term now. I stuck with the original terminology to match
the original post's code example.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Randomly Generated Values in Tests</title><link href="/2015/04/randomly-generated-values-in-tests.html" rel="alternate"></link><published>2015-04-01T00:00:00+02:00</published><updated>2015-04-01T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-04-01:/2015/04/randomly-generated-values-in-tests.html</id><summary type="html">&lt;p&gt;The use of randomly generated test data seems like a good thing at first
glance. Having worked with several teams that have used this concept I
generally discourage the practice. Consider a simple method that joins
together two strings. A test using random values may look like this.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a52ff8867d6af0757059.js"&gt;&lt;/script&gt;

&lt;h4&gt;Problems&lt;/h4&gt;
&lt;h5&gt;Harder …&lt;/h5&gt;</summary><content type="html">&lt;p&gt;The use of randomly generated test data seems like a good thing at first
glance. Having worked with several teams that have used this concept I
generally discourage the practice. Consider a simple method that joins
together two strings. A test using random values may look like this.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a52ff8867d6af0757059.js"&gt;&lt;/script&gt;

&lt;h4&gt;Problems&lt;/h4&gt;
&lt;h5&gt;Harder to Read&lt;/h5&gt;
&lt;p&gt;While this is a toy example to demonstrate the problem, in more
realistic scenarios the lack of literal values harms the readability of
the tests. It is worth noting the lack of literals causes more lines of
code as anything that has importance needs to be stored in a variable or
field. My biggest concern is when assertions start to become complicated
or even worse, duplicate production code in order to pass. If we wish to
treat tests as examples, this is pretty poor.&lt;/p&gt;
&lt;h5&gt;Edge Cases&lt;/h5&gt;
&lt;p&gt;Generating a random string seems easy enough. Overtime the edge cases in
question start to ramp up. You have whitespace, special characters, new
lines, numbers and much more to worry about if you wish to do this
properly. The code to actually generate random values is often shared
via inheritance or composition, this makes changes tricky and dangerous
as you can inadvertently change more than one test when modifying this
common code. If the two inputs need to be different then you could
potentially generate the same string each time, leading to flaky tests
if you're not careful.&lt;/p&gt;
&lt;h5&gt;Psuedo Random&lt;/h5&gt;
&lt;p&gt;The random aspect of these tests can confuse developers. In the example
above, there is only ever one value for each variable. In other words
this test can run many times locally and pass, but fail when executed
elsewhere. There may be a subtle bug that is only found after the code
is declared complete. This issue often causes failures in the build, at
which developers declare "&lt;em&gt;it's just a random failure&lt;/em&gt;" before
re-triggering the build because a value may be invalid for a specific
scenario.&lt;/p&gt;
&lt;h5&gt;Date/Times can be Tricky&lt;/h5&gt;
&lt;p&gt;Date/Times are hard enough as it is. Trying to randomly generate these
is not worth the hassle.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;My recommendation is to rely on literal values or &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;value
objects&lt;/a&gt;
where possible, these make the test much more readable and act like an
example or specification. Additionally their use allows the inline
variable refactor to take place, meaning shorter, conciser tests.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/35666813e84b920420e3.js"&gt;&lt;/script&gt;

&lt;h5&gt;Test Cases/Parameterized Tests&lt;/h5&gt;
&lt;p&gt;If you wish to test similar scenarios in one go then &lt;a href="http://www.nunit.org/index.php?p=testCase&amp;amp;r=2.5"&gt;test
cases&lt;/a&gt; can help. This
is usually the case when you cannot name a test easily because the
functionality is the same as an existing test.&lt;/p&gt;
&lt;h5&gt;Bugs&lt;/h5&gt;
&lt;p&gt;The assumption that randomly generated tests catch bugs and cover more
ground is wrong. If you really do discover a bug after manual testing or
on a live system just write a new test exposing that bug and fix it.
Thinking you cover more scenarios by using random values is false.&lt;/p&gt;
&lt;h5&gt;Property Based Testing&lt;/h5&gt;
&lt;p&gt;I cannot comment on &lt;a href="http://www.scalatest.org/user_guide/property_based_testing"&gt;Property Based
Testing&lt;/a&gt;
fully, but this is certainly an interesting area and does not suffer
from the issues above. Worth looking into.&lt;/p&gt;
&lt;h5&gt;DRY?&lt;/h5&gt;
&lt;p&gt;This solution certainly violates DRY. There is clear duplication. If
this was production code I would remove it, however for tests my stance
for a long time has been to allow this duplication to remain.
Readability and expressiveness is much more important. There are valid
times when duplication between tests is a bad thing. While this simple
example doesn't suffer from this problem &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/dry-vs-damp-in-tests.html"&gt;I will expand on how to keep
your tests expressive but DRY in a future
post&lt;/a&gt;.&lt;/p&gt;</content><category term="testing"></category><category term="tdd"></category><category term="unit-testing"></category><category term="tutorial"></category></entry><entry><title>Dependency Elimination Principle</title><link href="/2015/03/dependency-elimination-principle.html" rel="alternate"></link><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-03-01:/2015/03/dependency-elimination-principle.html</id><summary type="html">&lt;p&gt;This is the third, and final part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I've wrote about what &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;good dependencies are before, and the benefits if
you can limit and remove them where
possible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can take this idea further though, by applying concepts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the third, and final part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I've wrote about what &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;good dependencies are before, and the benefits if
you can limit and remove them where
possible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can take this idea further though, by applying concepts from
functional programming such as "&lt;em&gt;depend on values rather than
dependencies&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;A wise colleague started me down this path of passing values, rather
than dependencies on collaborators after we repeatedly found ourselves
depending on implementation details. This meant our high level domain
logic was tightly coupled to low level implementation details.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/briangeihsler"&gt;Brian Geihsler&lt;/a&gt; reminded me of this
concept with an &lt;a href="http://qualityisspeed.blogspot.co.uk/2015/02/the-dependency-elimination-principle-a-canonical-example.html"&gt;excellent demonstration of this in
practice&lt;/a&gt;
and has allowed me to put a name to this practice.&lt;/p&gt;
&lt;p&gt;Additionally &lt;a href="http://blog.thecodewhisperer.com/2013/11/23/beyond-mock-objects/"&gt;J.B. Rainsberger's example is with a virtual
clock&lt;/a&gt;,
another common dependency we often need. In this case, ask for the time,
not how you get the time. The example also highlights another common
problem with conventions when using a framework or library.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/ca5bbde5a06f6c7c627b.js"&gt;&lt;/script&gt;

&lt;p&gt;Here we can handle commands but only those that match the signature of
taking a single command, and returning no response. In order to apply
the Dependency Elimination Principle (DEP) and remove the clock wrapper
we can introduce an overload. Our tests will be expressed using the
overload, while the production code will make use of the standard
method. If the class in question has a relevant set of interfaces, the
overload would be omitted from this to ensure that consumers have a
clean, focused API to consume.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/9fe933e771fad1c3a693.js"&gt;&lt;/script&gt;

&lt;p&gt;When the DEP is applied to other dependencies such as configuration
details, flexibility is achieved by the ability to provide these values
from any source. As a side effect, coupling has been reduced, while also
removing an unnecessary abstraction from the codebase.&lt;/p&gt;
&lt;p&gt;Try to apply the DEP where possible. Remove as many dependencies as
possible for flexible, maintainable code. Not all dependencies can be
eliminated, but unless the dependency is a valid abstraction it may be
worth considering removing or reducing use.&lt;/p&gt;</content><category term="abstractions-series"></category><category term="tutorial"></category></entry><entry><title>Remote Meetings - Balancing the Act</title><link href="/2015/03/remote-meetings-balancing-act.html" rel="alternate"></link><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-03-01:/2015/03/remote-meetings-balancing-act.html</id><summary type="html">&lt;p&gt;Meetings are hard when some team members are remote and are physically
based in the same location.&lt;/p&gt;
&lt;p&gt;It is easy for the remote user to feel second class in terms of the
meeting. Remote workers can find it hard to add to the meeting without
interrupting or getting left behind …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Meetings are hard when some team members are remote and are physically
based in the same location.&lt;/p&gt;
&lt;p&gt;It is easy for the remote user to feel second class in terms of the
meeting. Remote workers can find it hard to add to the meeting without
interrupting or getting left behind.&lt;/p&gt;
&lt;p&gt;One practice to balance the process of remote meeting is to ensure that
&lt;strong&gt;if one or more parties are remote, all participants remote into
meeting&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Levels playing field - everyone should have equal opportunity to
    contribute.&lt;/li&gt;
&lt;li&gt;Removes lag - everyone has the same experience of time/delay.&lt;/li&gt;
&lt;li&gt;Includes online benefits such as message logs, sharing of screen.&lt;/li&gt;
&lt;li&gt;Comfort of own desk/environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This idea was taken from &lt;a href="http://blog.stackoverflow.com/2013/02/why-we-still-believe-in-working-remotely/"&gt;Stack Exchange's
post&lt;/a&gt;
detailing why they still believe in remote working.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Reused Abstraction Principle</title><link href="/2015/03/reused-abstraction-principle.html" rel="alternate"></link><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-03-01:/2015/03/reused-abstraction-principle.html</id><summary type="html">&lt;p&gt;This is the second part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The Reused Abstraction Principle is a simple in concept in practice, but
oddly rarely followed in typical enterprise development. I myself have
been incredibly guilty of this in the past.&lt;/p&gt;
&lt;p&gt;Most code …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The Reused Abstraction Principle is a simple in concept in practice, but
oddly rarely followed in typical enterprise development. I myself have
been incredibly guilty of this in the past.&lt;/p&gt;
&lt;p&gt;Most code bases have a 1:1 mapping of interfaces to implementations.
Usually this is the sign of TDD or automated testing being applied
badly. The majority of these interfaces are wrong. &lt;a href="http://blog.ploeh.dk/2010/12/02/Interfacesarenotabstractions/"&gt;1:1 mappings between
interfaces and implementations is a code
smell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Such situations are usually the result of extracting an interface from
an implementation, rather than having the client drive behaviour.&lt;/p&gt;
&lt;p&gt;These interfaces are also often bad abstractions, known as "leaky
abstractions". As &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;I've discussed previously, these abstractions tend to
offer nothing more than simple
indirection&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Apply the "&lt;em&gt;rule of three&lt;/em&gt;". If there is only ever one implementation,
then you don't need the interface/base class. If you do need to
introduce an interface, have the client provide it. Try to resist the
urge to extract from an implementation. Any stubs or testing
implementations should be treated as valid implementations, despite no
use within the production code directly.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/53d16d4bcadaa6eda702.js"&gt;&lt;/script&gt;

&lt;p&gt;In the first example there is a 1:1 mapping. &lt;a href="http://www.codemanship.co.uk/parlezuml/blog/?postid=934"&gt;This is clutter and
needless
indirection&lt;/a&gt;.
As we have nothing to replace &lt;code&gt;FooService&lt;/code&gt; with, the interface offers no
value. The second example shows multiple implementations of &lt;code&gt;IFoo&lt;/code&gt;. Here
different implementations have unique responsibilities. We could use a
test stub, or use the decorator pattern whenever we use &lt;code&gt;IFoo&lt;/code&gt;. The
abstraction is valuable.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.ploeh.dk/2010/12/03/Towardsbetterabstractions/"&gt;If you can introduce a composite or decorator this is probably a sign
of a good abstraction at
work&lt;/a&gt;.
Likewise the ability to replace your implementation and have the code
still function is a good sign. Such an example would be &lt;code&gt;SqlRepository&lt;/code&gt;
replaced with &lt;code&gt;MongoRepository&lt;/code&gt; when &lt;code&gt;IRepository&lt;/code&gt; is required.&lt;/p&gt;
&lt;p&gt;Additionally just because you opt to use dependency injection, there is
no rule stating said dependency must be an interface or base class.&lt;/p&gt;
&lt;p&gt;The final point is to &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;remember what good dependencies
are&lt;/a&gt;,
everything else can be an implementation detail leading to more flexible
and resilient code.&lt;/p&gt;</content><category term="abstractions-series"></category><category term="code-quality"></category><category term="tutorial"></category></entry><entry><title>Value Object Refactoring</title><link href="/2015/02/value-object-refactoring.html" rel="alternate"></link><published>2015-02-03T20:36:00+01:00</published><updated>2015-02-03T20:36:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-02-03:/2015/02/value-object-refactoring.html</id><summary type="html">&lt;p&gt;After extract method or extract class introducing a value object is one
of the most powerful refactorings available. A value object encapsulates
a value or concept within your domain. While the term is more formally
known from Domain Driven Design, DDD is not a pre-requresite for use.
Introducing a value …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After extract method or extract class introducing a value object is one
of the most powerful refactorings available. A value object encapsulates
a value or concept within your domain. While the term is more formally
known from Domain Driven Design, DDD is not a pre-requresite for use.
Introducing a value object can be applied to any code base.&lt;/p&gt;
&lt;p&gt;Some excellent examples of value objects would include &lt;code&gt;CustomerId&lt;/code&gt;,
&lt;code&gt;Money&lt;/code&gt;, &lt;code&gt;OrderId&lt;/code&gt; and &lt;code&gt;PhoneNumber&lt;/code&gt;. These could all be identified as
integers, strings or decimal numbers, but doing so would lead to a
series of downsides.&lt;/p&gt;
&lt;p&gt;Making use of primitive data types to express concepts within an
application is a code smell known as primitive obsession. Replacing
primitives with value objects is the solution to this smell.&lt;/p&gt;
&lt;h4&gt;Primitive Obsession&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Duplication will be thrown throughout the codebase. Both in the form
    of simple guard clauses, or core domain logic.&lt;/li&gt;
&lt;li&gt;More tests are required. This ties into the duplication above.&lt;/li&gt;
&lt;li&gt;Your domain lends itself towards an anaemic model, full of utility
    classes that operate upon state.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;script src="https://gist.github.com/Finglas/e36d0ffc473d1dc12088.js"&gt;&lt;/script&gt;

&lt;p&gt;The implementation of &lt;code&gt;PersonalDetails&lt;/code&gt; would be straight forward to
begin with.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/5a37ae3fe12211d2b527.js"&gt;&lt;/script&gt;

&lt;p&gt;Over time areas of logic can slowly migrate and move towards the class.
In most IDE's, simply wrapping a primitive type as the first step can be
carried out in a few keystrokes.&lt;/p&gt;
&lt;p&gt;The constructor performs basic validation on a technical level. Once
complete we can carry out any domain logic. Likewise the behaviour
attached to this object (hidden for beravity) would include various
domain specific logic. For example, when changing surnames any leading
or trailing whitespace is removed.&lt;/p&gt;
&lt;p&gt;One recommendation would be to expose the underlying primitive. In this
example &lt;code&gt;ToString&lt;/code&gt; has been overridden to return the string value that
is being used. This should be a read only operation idealy, and enables
the object to play nicely with third parties. Such use cases for this
would be serialization, or writing the value to a persistent store.&lt;/p&gt;
&lt;p&gt;Equality (and hashcode in this case) should also be implemented. This is
because the nature of value objects allows them to be equal to other
instances that share the same value, despite being different references
in memory. The beauty of this is that value objects can be used as
needed, no need for injection or other patterns.&lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Removes duplication. Only the object in question will be the source
    of truth.&lt;/li&gt;
&lt;li&gt;Less tests need to be written. As the duplication has been removed,
    only one test per behaviour is required. Rather than duplicating
    checks for validation or formatting this can be contained to the
    object. As the rest of the system deals with our value object, we
    don't have to worry about dealing with an invalid representation.&lt;/li&gt;
&lt;li&gt;In statically typed languages you can lean on the compiler. It's
    impossible to supply anything other than PersonalDetails when we ask
    for an instance. Even for dynamic languages, the stack trace
    presented upon error would be far more useful than had a primitive
    type been provided.&lt;/li&gt;
&lt;li&gt;The surface area of mis-configuring arguments is smaller also.
    Previously we would accept two strings that are order dependant. Now
    this configuration has been reduced to a few areas.&lt;/li&gt;
&lt;li&gt;Using the example above, we can now rely on class pre-conditions to
    simplify our expectations when working with this type. Given any
    instance of &lt;code&gt;PersonalDetails&lt;/code&gt; we can be sure that the forename and
    surname are never null or empty, and that each personal details
    instance will have a forename of at least one character long. A
    simple string can never guarantee such conditions.&lt;/li&gt;
&lt;li&gt;Making value objects public generally makes sense. This provides an
    excellent seam for testing and integration.&lt;/li&gt;
&lt;li&gt;The introduction of a value object plays nicely with my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;three basic
    steps to code
    quality&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Consistency</title><link href="/2015/02/consistency.html" rel="alternate"></link><published>2015-02-01T00:00:00+01:00</published><updated>2015-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-02-01:/2015/02/consistency.html</id><summary type="html">&lt;p&gt;Striving for consistency within a codebase is a &lt;strong&gt;good thing&lt;/strong&gt;. I'm very
much someone who believes in applying a consistent formatting style,
patterns and practices. However there are two sides to this view.&lt;/p&gt;
&lt;p&gt;One colleague used to hate different apps that used different
frameworks, styles and conventions. This is a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Striving for consistency within a codebase is a &lt;strong&gt;good thing&lt;/strong&gt;. I'm very
much someone who believes in applying a consistent formatting style,
patterns and practices. However there are two sides to this view.&lt;/p&gt;
&lt;p&gt;One colleague used to hate different apps that used different
frameworks, styles and conventions. This is a fair point, it made
switching between them harder. In their eyes, a change to the
development process should cascade across all applications.&lt;/p&gt;
&lt;p&gt;Another colleague used to state that without breaking consistency then
improvements and progress would never happen. An equally fair point.
However this lead to scenarios where some of the code would be in
differing states of consistency, or improvements were avoided because
they were too large to implement safely.&lt;/p&gt;
&lt;p&gt;Like most things in software development, there is &lt;strong&gt;rarely a true
answer&lt;/strong&gt;. The best of both worlds is to apply both concepts at varying
levels.&lt;/p&gt;
&lt;p&gt;Applying consistency at package/assembly/module/namespace level works
well from my experience. &lt;strong&gt;Different boundaries can have different
consistency rules&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This approach allows incremental evolution, but still keeps consistency
within a boundary. This enables both benefits of favouring consistency,
while still allowing the code to evolve over time.
&lt;a href="https://blog.shaunfinglas.co.uk/2014/11/ratcheting.html"&gt;Ratcheting&lt;/a&gt; can
be used to ensure future work is aligned consistently. Rather than big
bang implementation, you can perform larger, long term changes steadily.&lt;/p&gt;
&lt;p&gt;Remember; software development is like gardening, it takes time to see
the results sometimes and blindly applying a coding convention to
conform to consistency requires thought.&lt;/p&gt;</content><category term="retro"></category></entry><entry><title>Guard Clauses and Assertions</title><link href="/2015/02/guard-clauses-and-assertions.html" rel="alternate"></link><published>2015-02-01T00:00:00+01:00</published><updated>2015-02-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-02-01:/2015/02/guard-clauses-and-assertions.html</id><summary type="html">&lt;p&gt;Two simple techniques to increase code quality, resilience, and ease
debugging scenarios is to use guard clauses effectively and ensure that
assertions are used liberally.&lt;/p&gt;
&lt;h4&gt;Guard Clauses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Any public method should perform guard clauses to ensure pre
    conditions are met.&lt;/li&gt;
&lt;li&gt;Ensures the code's invariants are not broken.&lt;/li&gt;
&lt;li&gt;Throw exceptions, because …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Two simple techniques to increase code quality, resilience, and ease
debugging scenarios is to use guard clauses effectively and ensure that
assertions are used liberally.&lt;/p&gt;
&lt;h4&gt;Guard Clauses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Any public method should perform guard clauses to ensure pre
    conditions are met.&lt;/li&gt;
&lt;li&gt;Ensures the code's invariants are not broken.&lt;/li&gt;
&lt;li&gt;Throw exceptions, because these are exceptional issues.&lt;/li&gt;
&lt;li&gt;Developer and user assistance as it is possible for these clauses to
    fail at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/Finglas/5b784bd2782d1478fa40.js"&gt;&lt;/script&gt;

&lt;p&gt;Here we enforce that any &lt;code&gt;PersonalDetails&lt;/code&gt; instance has a forename and
surname. A forename must also be at least one character long. As long as
these conditions are met, we finally assign the values internally. Guard
clauses should also be used on dependencies that are services, checking
that a service is not a null instance for example.&lt;/p&gt;
&lt;h4&gt;Assertions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Used within private methods/functions where required.&lt;/li&gt;
&lt;li&gt;Should be used for situations that should never happen, e.g the
    presence of a bug or invalid scenario.&lt;/li&gt;
&lt;li&gt;Developer only assistance, the user should never see these ideally
    because automated/manual testing should have detected them.&lt;/li&gt;
&lt;li&gt;Usually removed for release builds, though open to debate, best to
    judge on context. Is it better for the program to crash and inform
    the user, or carry on in an invalid state?&lt;/li&gt;
&lt;li&gt;Great for documenting assumptions, e.g. code a level above ensures
    object is in a certain state.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/Finglas/2a59051e9c3d566185f1.js"&gt;&lt;/script&gt;

&lt;p&gt;While this method is private, we have essentially stated that we take no
responsibility for validating that a name has been provided. This is the
concern of another part of the code (the constructor in this case).
However this simple assert statement means that if the method is used in
a different manner, it will fail spectacularly at runtime. This will
point at the incorrect use of the method and allow the developer to make
the required changes.&lt;/p&gt;
&lt;h5&gt;Summary&lt;/h5&gt;
&lt;p&gt;Code quality will improve because less invalid scenarios should be
allowed to happen. Due to clauses and assertions always being present
they go hand in hand with automated tests, often catching scenarios that
automated tests may miss. Debugging is easier because the stack trace
points you at the source of the problem, rather than an initial problem
hidden in layers of exceptions caused by invalid state. While applying
clauses and assertions increases lines of code, they are easy to
implement, and the return on investment is high. There are no excuses
not to use them.&lt;/p&gt;</content><category term="code-quality"></category><category term="tutorial"></category></entry><entry><title>Abstract Data Use Not Data Access</title><link href="/2015/01/abstract-data-use-not-data-access.html" rel="alternate"></link><published>2015-01-01T00:00:00+01:00</published><updated>2015-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-01-01:/2015/01/abstract-data-use-not-data-access.html</id><summary type="html">&lt;p&gt;Common data access abstractions I've come across and been guilty of
implementing myself are the likes of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IDatabase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPersistentStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDataStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IRepository&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is, these are not really abstractions. If anything they add
an extra layer of indirection. One such benefit of this level of
indirection is each concrete …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Common data access abstractions I've come across and been guilty of
implementing myself are the likes of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IDatabase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPersistentStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDataStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IRepository&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is, these are not really abstractions. If anything they add
an extra layer of indirection. One such benefit of this level of
indirection is each concrete implementation can be substituted. This
makes testing easy. Other than this, such generic solutions introduce a
&lt;strong&gt;whole host of problems&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Problems&lt;/h4&gt;
&lt;h5&gt;Abstraction&lt;/h5&gt;
&lt;p&gt;Such examples are said to be at the &lt;a href="http://blog.codinghorror.com/the-wrong-level-of-abstraction/"&gt;wrong level of
abstraction&lt;/a&gt;.
This indirection &lt;strong&gt;forces&lt;/strong&gt; developers to work at the wrong level of
abstraction. For example, a controller has no right to be directly
querying your data store directly. If the same query is required
somewhere else you introduce duplication.&lt;/p&gt;
&lt;h5&gt;Big Bang Upgrade&lt;/h5&gt;
&lt;p&gt;Given such indirection offers a poor abstraction, upgrading to use a
different implementation is tricky. If we assume one hundred usages of
&lt;code&gt;IDatabase&lt;/code&gt;, all of these code paths need to be migrated and tested.
This can be such a huge undertaking that upgrades are often left as
technical debt, &lt;strong&gt;never to be fulfilled&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;Leaky Abstractions&lt;/h5&gt;
&lt;p&gt;In a similar manner to the previous point, these abstractions are poor.
&lt;a href="http://www.joelonsoftware.com/Articles/LeakyAbstractions.html"&gt;They leak implementation
details&lt;/a&gt;.
Due to this they &lt;strong&gt;cannot be considered as valid abstractions&lt;/strong&gt;.
Consider a SQL implementation of &lt;code&gt;IDatabase&lt;/code&gt;, we may have a &lt;code&gt;FindById&lt;/code&gt;
method that takes an integer as the Id. If we wished to update to a
NoSQL solution the lack of a primary key causes problems. &lt;code&gt;FindById&lt;/code&gt; for
the NoSQL implementation may require a Guid. There interface is now
broken.&lt;/p&gt;
&lt;h5&gt;Interface Bloat&lt;/h5&gt;
&lt;p&gt;Another downside of coding at the wrong level of abstraction is that the
amount of use cases increase constantly. What might begin as a humble
interface consisting of a handful of query methods soon becomes a
&lt;strong&gt;dumping ground&lt;/strong&gt; for all sorts of exotic behaviour - specific to niche
use cases.&lt;/p&gt;
&lt;h5&gt;Lowest Common Denominator&lt;/h5&gt;
&lt;p&gt;Different data access providers have different capabilities, but in
order to stay "decoupled" only core functionality present in all
providers can be used. This leads to &lt;strong&gt;dull, limited interfaces&lt;/strong&gt;
consisting of standard data access functionality. The limited feature
set can mean a poor integration. Why avoid the advanced features your
library offers?&lt;/p&gt;
&lt;p&gt;A poor abstraction that exhibits the problems above may look like this.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/2ad697bce48b01a17a8f.js"&gt;&lt;/script&gt;

&lt;p&gt;To retrieve a user based on the Id.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/320fa71003931d994099.js"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;If we abstract how the data is used and not how the data access is
performed we can avoid these pitfalls. By staying at the right level of
abstraction and not leaking implementation details we end up with a
different looking interface.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a8183a4b9accc5fb4862.js"&gt;&lt;/script&gt;

&lt;p&gt;The concrete implementation in this example will be a SQL implementation
using &lt;a href="https://github.com/StackExchange/dapper-dot-net"&gt;Dapper.NET&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/c36fd801f48bb8e6588c.js"&gt;&lt;/script&gt;

&lt;p&gt;The usage is similar.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/cec4daf23ef4aea11a96.js"&gt;&lt;/script&gt;

&lt;p&gt;The key point here is that we solve the problems of the "generic"
solution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IUserQuery&lt;/code&gt; is a better abstraction, it allows selective upgrades.
    This use case will have limited use, meaning updating a handful of
    references is easier than updating every data access component in
    one go.&lt;/li&gt;
&lt;li&gt;The fact we use a SQL database as our store is hidden, no details
    leak. &lt;code&gt;UserId&lt;/code&gt; encapsulates how we identify users, if we were to
    switch to a NoSQL store our consumers would be unaware.&lt;/li&gt;
&lt;li&gt;One of the biggest benefits is the ability to use our third party
    library to its fullest. Rather than wrapping Dapper we can make use
    of it directly, making use of any special features it offers, rather
    than conforming to a limited subset of an API.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5&gt;Aren't We Introducing Lots of Classes?&lt;/h5&gt;
&lt;p&gt;More, but not "lots". However this is a common complaint when the above
solution is proposed, though given the vast benefits included this trade
off is certainly worth it. Additionally, each query or repository that
is implemented in this manner is easier to develop and test due to
closer adherence to the Single Responsibility Principle.&lt;/p&gt;
&lt;h5&gt;How Do We Unit Test SqlUserQuery?&lt;/h5&gt;
&lt;p&gt;You don't. In this example we make use of the third party library
directly. The benefits discussed prior justify this, though it means
unit testing is not possible. Therefore you should apply integration
testing against a real data store. The rest of the system will be coded
against the abstraction, so unit tests can be applied as normal here.
Any attempt to "abstract" or wrap the third party will remove many of
the benefits of this solution, so don't worry about it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For a great discussion on this topic, check out a talk by &lt;a href="http://ayende.com/blog/166594/ravendb-conf-videos-abstracting-ravendb-dont-do-it"&gt;Kijana
Woodard&lt;/a&gt;
for more examples.&lt;/p&gt;</content><category term="programming"></category><category term="tutorial"></category></entry><entry><title>Caching</title><link href="/2015/01/caching.html" rel="alternate"></link><published>2015-01-01T00:00:00+01:00</published><updated>2015-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-01-01:/2015/01/caching.html</id><summary type="html">&lt;p&gt;The naive approach to implement caching is to just store everything in
an in memory collection such as a hashtable. After all it works on my
machine.&lt;/p&gt;
&lt;p&gt;I've worked on systems in the past that used this technique but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bring in two processes and this falls apart&lt;/li&gt;
&lt;li&gt;No Time to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The naive approach to implement caching is to just store everything in
an in memory collection such as a hashtable. After all it works on my
machine.&lt;/p&gt;
&lt;p&gt;I've worked on systems in the past that used this technique but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bring in two processes and this falls apart&lt;/li&gt;
&lt;li&gt;No Time to Live (TTL)&lt;/li&gt;
&lt;li&gt;No cache eviction, memory will grow until it crashes the process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This sort of caching meant the system needed daily restarts due to each
worker process starting to eat up more and more RAM. At the time I
didn't realise this was the problem as to why daily restarts were
required. These were automated so the team just sort of forgot about the
problem after a while. This never felt right.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Improper use of caching is the major cause of memory leaks, which
turn into &lt;strong&gt;horrors like daily server restarts&lt;/strong&gt;" - &lt;a href="https://twitter.com/mtnygard"&gt;@mtnygard in
Release It!&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scale this system up, and daily becomes twice daily and so on. In a
global market where software shouldn't be constrained by time zones or
"working hours" this is wrong.&lt;/p&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;p&gt;There are numerous easy ways to solve these problems depending on the
application in question.&lt;/p&gt;
&lt;h5&gt;Don't Roll your Own, Try a Third Party&lt;/h5&gt;
&lt;p&gt;Easy. Just use an off the shelf solution that solves the problems above
plus includes a whole host of additional features.&lt;/p&gt;
&lt;h5&gt;Use your Standard Library&lt;/h5&gt;
&lt;p&gt;For example .NET includes caching functionality within the
&lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.caching%28v=vs.110%29.aspx"&gt;System.Runtime.Caching&lt;/a&gt;
namespace. While there are limitations to this, it will work for some
scenarios and solves some of the problems above.&lt;/p&gt;
&lt;h5&gt;Soft References&lt;/h5&gt;
&lt;p&gt;I've overlooked &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/lang/ref/SoftReference.html"&gt;soft
references&lt;/a&gt;
in the past but for caching they can be incredibly useful. Use soft
references for anything that isn't important or that can be
recalculated. An example would be content displayed within an MVC view
using the web servers session. Here if each item stored is a weak
reference we introduce some benefits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stops your web server running of of memory - references will be
    reclaimed if memory starts to become a bottleneck.&lt;/li&gt;
&lt;li&gt;Greater scalability with the same amount of memory - great for a
    sudden spike in traffic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A web server's session being full of references that won't expire for a
set period is a common cause of downtime. If soft references are used
all we need to do is perform a simple conditional check prior to
retrieval from the session. Different languages have similar features,
e.g. &lt;a href="http://msdn.microsoft.com/en-us/library/system.weakreference%28v=vs.110%29.aspx"&gt;Weak
References&lt;/a&gt;
in .NET.&lt;/p&gt;
&lt;h5&gt;Pre-Computation&lt;/h5&gt;
&lt;p&gt;Caching isn't always the best solution, in some cases pre-computation
can be much easier and offer better performance. In other words at least
some users will experience a slow response until the cache is warm,
other techniques can be used to avoid this completely. I will expand on
pre-computation in a future post.&lt;/p&gt;
&lt;h4&gt;Reference&lt;/h4&gt;
&lt;p&gt;More information can be found in the excellent book &lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release
It!&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Why Technical Blogging?</title><link href="/2015/01/why-technical-blogging.html" rel="alternate"></link><published>2015-01-01T00:00:00+01:00</published><updated>2015-01-01T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2015-01-01:/2015/01/why-technical-blogging.html</id><summary type="html">&lt;p&gt;Given this is my fifth year of blogging I figured it would be worth
while answering "&lt;em&gt;Why bother with technical blogging?&lt;/em&gt;".&lt;/p&gt;
&lt;h4&gt;Get Writing&lt;/h4&gt;
&lt;p&gt;Write about anything. Just get started, providing it fits your core
focus. This blog focuses on programming and software development related
topics, so anything that falls within …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Given this is my fifth year of blogging I figured it would be worth
while answering "&lt;em&gt;Why bother with technical blogging?&lt;/em&gt;".&lt;/p&gt;
&lt;h4&gt;Get Writing&lt;/h4&gt;
&lt;p&gt;Write about anything. Just get started, providing it fits your core
focus. This blog focuses on programming and software development related
topics, so anything that falls within this category is fair game. Take a
single idea and from this one blog post you can generate many more
ideas. This is where my &lt;a href="https://blog.shaunfinglas.co.uk/p/upcoming.html"&gt;upcoming
list&lt;/a&gt; comes from. A
single post can spawn many others and the process will repeat itself.&lt;/p&gt;
&lt;p&gt;Honest posts, that focus on your experiences tend to be the most well
received. Quality over quantity also factors. I try to focus posts,
rather than going for length or in depth topics. My early posts are very
rough around the edges, they will continue to improve as time goes by.
Ultimately the more you blog, the better you'll become at it.&lt;/p&gt;
&lt;h4&gt;Schedule&lt;/h4&gt;
&lt;p&gt;Finding the time to create posts is quite difficult. Making and sticking
to a schedule can help immensely though. Since adopting a weekly
schedule, this has lead to a steady stream of posts. In turn these posts
lead to a steady stream of views. Being completely honest, getting
started was hard. Following a schedule and using the advice in this post
can help though. Initially you may spend a long time working on content,
but overtime this will reduce.&lt;/p&gt;
&lt;h4&gt;Views&lt;/h4&gt;
&lt;p&gt;The best advice is to ignore view counts. High view counts make you feel
great, but there is much more to writing content than simply generating
stats. Your highest viewed posts may very well surprise you, likewise
content you feel should be seen by everyone can struggle. Rather than
views, interactions are much more rewarding. Any content that gets a
retweet, reply or email is much more satisfying.&lt;/p&gt;
&lt;h4&gt;People&lt;/h4&gt;
&lt;p&gt;In the area of technical blogging the majority of interactions are good
natured. People are overwhelmingly nice in most cases. Twitter tends to
yield positive comments or retweets partly due to the use of real names
in most cases. Article submission sites can be a mixed bag, but for any
negativity the view count to comment ratio will balance out. A lot of
interesting followers are discovered thanks to this blog.&lt;/p&gt;
&lt;h4&gt;Benefit Yourself&lt;/h4&gt;
&lt;p&gt;Regular posts allows you to practice writing, which is a surprisingly
enjoyable activity when you enjoy the content.&lt;/p&gt;
&lt;p&gt;I learn a lot from doing, but I also find writing down what I have
learned or discovered is incredibly valuable. Having an archive of
content that I find important is a huge help. If you've learned
something new? Blog about it. If you've talked about something relevant?
Blog about it. This helps with the generation of new content.&lt;/p&gt;
&lt;p&gt;Having an archive of posts is great for reflection. Looking back over
old posts and confirming whether or not I still agree helps with
learning. Have I discovered anything new since? Just the act of
re-reading and refreshing myself with a concept can be useful. This
tactic combined with a &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/developer-diaries.html"&gt;developer
diary&lt;/a&gt;
has proved a powerful combination.&lt;/p&gt;
&lt;h4&gt;Career Benefits&lt;/h4&gt;
&lt;p&gt;Additionally to personal benefits, regularly blogging has had a big
impact on my career. It has helped me during job interviews as it helps
provide evidence for my claims. Most surprisingly eighteen months ago I
was offered the chance to help write a book. Unfortunately due to a new
house and job I was forced to decline the offer at the time, however
without technical blogging and other writing there is no chance I would
have had this opportunity.&lt;/p&gt;
&lt;p&gt;Within the last couple of weeks I have received contacts from numerous
recruiters. As part of these there was a personalised email, which not
only detailed my blog but clearly saw other online contributions. This
recruiter went above and beyond the norm. While I never worked with
them, this polite and encouraging email is yet another benefit of
technical blogging.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The book &lt;a href="https://pragprog.com/book/actb/technical-blogging"&gt;Techinical
Blogging&lt;/a&gt; by
&lt;a href="https://twitter.com/acangiano"&gt;@acangiano&lt;/a&gt; is a great starting place
for more information and advice.&lt;/p&gt;</content><category term="blogging"></category><category term="retro"></category></entry></feed>