<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shaun Finglas - 2017</title><link href="/" rel="alternate"></link><link href="/feeds/2017.atom.xml" rel="self"></link><id>/</id><updated>2017-08-08T00:00:00+02:00</updated><entry><title>Code Smell: Time Span Embedded in Variable</title><link href="/2017/01/code-smell-time-span-embedded-in-variable.html" rel="alternate"></link><published>2017-08-08T00:00:00+02:00</published><updated>2017-08-08T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2017-08-08:/2017/01/code-smell-time-span-embedded-in-variable.html</id><summary type="html">&lt;p&gt;A common code smell that tends to go unnoticed is embedding a time span within a variable name. While developers recognize that embedding types into names is redundant they often fail to see this smell.&lt;/p&gt;
&lt;p&gt;You often need a variable to trigger on a set period, such as every fifteen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A common code smell that tends to go unnoticed is embedding a time span within a variable name. While developers recognize that embedding types into names is redundant they often fail to see this smell.&lt;/p&gt;
&lt;p&gt;You often need a variable to trigger on a set period, such as every fifteen minutes. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BlogPostFeedPollingIntervalInSeconds = 900
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, what is 900? Without the variable name this is hard to reason about. This is even harder when the value is external and replaced on deployment. Often the value will be found with a comment explaining what the figure is relative to other time periods. This is another hint that you have a time span embedded into a variable.&lt;/p&gt;
&lt;p&gt;This smell also becomes harder for more exotic or unfamiliar intervals. In other words most developers are familiar that 1 second in milliseconds is 1000, but not other common ranges or periods. Most standard libraries or lower level functions have fixed intervals which compound the problem. For example a data access libraries tend to use seconds as their highest unit of time, this may not be appropriate in some cases.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;The fix for this code smell is to use time spans. The previous example can be expressed in the following form.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BlogPostFeedPollingInterval = &amp;quot;00:15:00&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The value here is expressed in the form HH:MM:SS. Time spans can include days or levels of precision lower than a single second. Different languages may have alternative forms of specifying time spans but the principle is the same. Consult the documentation for more info. When the code reads this value the string time span will be converted. Using C# as an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var blogPostFeedPollingInterval = TimeSpan.Parse(timeSpan);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The use of time spans have a variety of benefits. Notice that the variable name has had the time component removed. This allows the value to increase or decrease without needing to change the variable name.&lt;/p&gt;
&lt;p&gt;Additionally time spans are human readably without the need to convert or do maths in your head.&lt;/p&gt;
&lt;p&gt;Time spans also offer type safety if the underlying code is doing further work with the value. This is in stark
contrast to doing numerical work with simple integers. Another example would include the ability to use higher time periods for clarity and then simply convert to the total number of minutes/seconds when required.&lt;/p&gt;
&lt;p&gt;It is worth bearing in mind that for time periods such as "12 months" or "every 3 weeks on Friday" an alternative is required. Some languages may offer this by default, others may require a third party library. This is due to the fact that a time span does not respect the calendar system. For example, over several months the number of days in each month can vary. For days, hours, minutes or seconds your standard libraries time span should be more than capable.&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Don't embed time spans in variables.&lt;/li&gt;
&lt;li&gt;Whenever you include a time span in a variable name consider using a time span.&lt;/li&gt;
&lt;li&gt;Check the documentation for your language as time span formats can differ or be tricky to remember.&lt;/li&gt;
&lt;li&gt;For periods of time (every 3 months on the 1st) time spans are not appropriate by default.&lt;/li&gt;
&lt;li&gt;For business rules that must trigger on on particular dates as previously use the calendar to work this out.&lt;/li&gt;
&lt;/ul&gt;</content><category term="code"></category><category term="tutorial"></category></entry><entry><title>Testing your Composition Root</title><link href="/2017/06/testing-your-composition-root.html" rel="alternate"></link><published>2017-06-27T00:00:00+02:00</published><updated>2017-06-27T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2017-06-27:/2017/06/testing-your-composition-root.html</id><summary type="html">&lt;p&gt;Separating configuration from your code itself is a good practice. Unfortunately this can quite be
quite complex in itself. In fact it is fair to say that in many cases the use of
&lt;a href="/2014/11/dependency-injection-di-containers.html"&gt;DI containers&lt;/a&gt; to achieve this can be overkill
for a task that should be rather basic.&lt;/p&gt;
&lt;p&gt;Recently …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Separating configuration from your code itself is a good practice. Unfortunately this can quite be
quite complex in itself. In fact it is fair to say that in many cases the use of
&lt;a href="/2014/11/dependency-injection-di-containers.html"&gt;DI containers&lt;/a&gt; to achieve this can be overkill
for a task that should be rather basic.&lt;/p&gt;
&lt;p&gt;Recently a project I've been involved with has struggled with the configuration of dependencies.
This lead to the dreaded runtime error, even though at compile time everything was seemingly
normal. This late feedback was compounded by the fact that getting the system up and running
locally is a chore, so in many cases it was CI that was detecting these issues after a deploy.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;The general practice states that your tests shouldn't need to use your production configuration.
However in this case the solution was to invoke the configuration and force it to resolve. This
test was odd in the sense that it does nothing other than successfully resolve. The fact that no
unhandled exception is thrown is good enough. Note there is only one new test here, all other unit
tests remain as-is, they are still separate from the use of the production configuration. All
this test does is ensure all wiring up and dependencies are satisfied. In cases where config
from an external file is used, that too will be exercised.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;[Test]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigurationTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RootType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The actual resolution aspect on line 5 is optional. There may be other ways to force resolution,
this may vary based on what library you use. In this example only one type is resolved. If your
project includes multiple entry points such as numerous controllers you may need to include these
as well.&lt;/p&gt;
&lt;p&gt;Hopefully the error that is thrown when this resolution fails is useful. Most DI libraries are
fairly good in this regard. Even so it may be worth documenting this test with the steps that
a developer would have to go through in order to fix.&lt;/p&gt;
&lt;h2&gt;Dynamic Languages&lt;/h2&gt;
&lt;p&gt;Even though DI libraries are a rare thing in dynamic languages, the use of a composition root
is still needed. Therefore I'd recommend a similar test be applied to dynamic languages to keep
the feedback loop fast.&lt;/p&gt;
&lt;h2&gt;Lessons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don't test your composition root in your current unit tests.&lt;/li&gt;
&lt;li&gt;Do include a single test that resolves your root dependencies.&lt;/li&gt;
&lt;li&gt;Include appropriate messaging to show how to fix the issue.&lt;/li&gt;
&lt;li&gt;Dynamic languages should aim to test their composition root can resolve also.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category><category term="testing"></category></entry><entry><title>Logging vs Auditing</title><link href="/2017/05/logging-vs-auditing.html" rel="alternate"></link><published>2017-05-02T00:00:00+02:00</published><updated>2017-05-02T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2017-05-02:/2017/05/logging-vs-auditing.html</id><summary type="html">&lt;p&gt;The difference between logging and auditing is a subtle yet important
distinction.&lt;/p&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Technical in nature. Deals with technical concerns, stacktraces or
    errors.&lt;/li&gt;
&lt;li&gt;Additional levels such as DEBUG, INFO, WARN, ERROR, FATAL for
    classification.&lt;/li&gt;
&lt;li&gt;Logging can be simple such as traditional stdout statements, or more
    complex with semantic/structured logging …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The difference between logging and auditing is a subtle yet important
distinction.&lt;/p&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Technical in nature. Deals with technical concerns, stacktraces or
    errors.&lt;/li&gt;
&lt;li&gt;Additional levels such as DEBUG, INFO, WARN, ERROR, FATAL for
    classification.&lt;/li&gt;
&lt;li&gt;Logging can be simple such as traditional stdout statements, or more
    complex with semantic/structured logging.&lt;/li&gt;
&lt;li&gt;Should not cause a runtime failure if logging is defective, fail
    silently.&lt;/li&gt;
&lt;li&gt;System should work with or without logging enabled from both a
    technical and system view.&lt;/li&gt;
&lt;li&gt;No need for automated testing, simply ensure this works afterwards.
    No need for interfaces or abstractions, use the logging library
    directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The primary users of logging should be the development team when
developing and testing. Additional the team should use logging for daily
monitoring and support. Effective log monitoring can produce trends or
highlight problem areas well before users report them as issues. The use
of a good monitoring system can also remove and reduce the need for
complex and unstable system tests, this will be the subject of a future
post.&lt;/p&gt;
&lt;h3&gt;Auditing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Domain specific. Deals with domain concerns for audit trails.&lt;/li&gt;
&lt;li&gt;Always one level, though context is important. Different audit roles
    for different actions, for example, user makes a payment. User logs
    in. User performs action. All three of these examples are unique and
    should be treated as such.&lt;/li&gt;
&lt;li&gt;Auditing is important, it must occur. Should cause a runtime failure
    if auditing is defective. Never fail silently.&lt;/li&gt;
&lt;li&gt;System cannot operate at 100% if auditing is not operating.&lt;/li&gt;
&lt;li&gt;Testable and should be considered a first class feature.
    Abstractions useful to provide different implementations and to aid
    testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auditing is a feature in itself. There is no point introducing this
additional complexity unless the system requires this. Other concerns
auditing introduces include where to store the data? For how long? And
what potentially sensitive data can be stored?&lt;/p&gt;
&lt;p&gt;The key lesson here is that logging and auditing are two very distinct
concepts and should be treated as such.&lt;/p&gt;</content><category term="summary"></category></entry><entry><title>The QA Test Matrix</title><link href="/2017/04/the-qa-test-matrix.html" rel="alternate"></link><published>2017-04-03T00:00:00+02:00</published><updated>2017-04-03T00:00:00+02:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2017-04-03:/2017/04/the-qa-test-matrix.html</id><summary type="html">&lt;p&gt;Historically teams I've worked with have taken a few varying approaches
when designing tests against acceptance criteria. One is to have the
business define the feature, while the team help define the acceptance
criteria. Ultimately the business gets the final say if they agree, and
further acceptance criteria is either …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Historically teams I've worked with have taken a few varying approaches
when designing tests against acceptance criteria. One is to have the
business define the feature, while the team help define the acceptance
criteria. Ultimately the business gets the final say if they agree, and
further acceptance criteria is either added or removed. The strength of
this approach is everyone is involved with the process so nothing is
missed or misunderstood. The biggest flaw with this style is that the
documentation produced is often verbose, using wordy Given-When-Then
scenarios. Using this plan a test plan is then created, mapping tests to
acceptance criteria.&lt;/p&gt;
&lt;p&gt;An alternative approach is have the business define both the feature and
acceptance criteria while the team come up with a corresponding test
strategy. This more technical approach allows for a separation of
testing activities and test categories. Finally the test plan is
replayed back to the business and correlated against acceptance
criteria. A negative of this approach is not everyone is involved with
the task at the same time. This means there can be some disconnect with
what the business is actually asking for. Both approaches work though
they can yield mixed results on a case by case basis.&lt;/p&gt;
&lt;h4&gt;The QA Matrix&lt;/h4&gt;
&lt;p&gt;I've recently been introduced to the concept of a testing/QA matrix,
which is a far more condensed and simplified solution. It has the
benefit of the whole team being engaged, while producing nothing more
than a simple table that can fit comfortably on a A4 page. The left hand
column includes each condition of acceptance, while the other columns
should have a mark to indicate the type of test that will cover this
functionality. An example is below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     Unit Integration Acceptance Contract Manual
COA   X
COA           X                             X
COA   X
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The beauty of this matrix is that at a glance you can see where you
testing efforts lie. If too much occurs on the right of the matrix you
may need to re-consider and question your approach. Is there a way to
limit the more expensive style of tests and still gain confidence? Other
questions can arise around test coverage and whether higher level tests
are needed.&lt;/p&gt;
&lt;p&gt;When producing this matrix the whole team including the business should
be involved. By having everyone together, decisions can be made quickly
with everyone in agreement. Additionally it allows debate and discussion
around how each feature should be tested.&lt;/p&gt;
&lt;p&gt;For higher level tests these can be directly translated into automated
tests. While the lower level tests need to confirmed at a later date
once the code is complete.&lt;/p&gt;
&lt;p&gt;Along side the QA matrix it may be worth while adding a simple diagram
of the components that will be involved such as web servers, databases
and so on. This can aid discussion and highlight hot spots for changes
or tests.&lt;/p&gt;
&lt;p&gt;Finally for demonstration to the business the matrix can be used as a
form contract for signing off functionality. Once the feature is
complete it is simply a case of finding the corresponding tests,
confirming their existence and making a note of the commit that included
them.&lt;/p&gt;</content><category term="testing"></category></entry><entry><title>Be Humble</title><link href="/2017/01/be-humble.html" rel="alternate"></link><published>2017-01-18T00:00:00+01:00</published><updated>2017-01-18T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2017-01-18:/2017/01/be-humble.html</id><summary type="html">&lt;p&gt;Some of the best developers I know treat everyone with mutual respect.
Not only this they are open about what they do know and what they don't
know. In fact they'll often proclaim “I don't know” and go about finding
out how they can answer your question or solve a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some of the best developers I know treat everyone with mutual respect.
Not only this they are open about what they do know and what they don't
know. In fact they'll often proclaim “I don't know” and go about finding
out how they can answer your question or solve a particular problem.&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;A past mentor of mine had a wealth of experience in both the domain and
software development itself. In contrast I had no domain experience and
very limited practical ability. Despite this gap I was treated as they
would treat an equal. No matter how stupid or basic my questions.&lt;/p&gt;
&lt;p&gt;However our roles switched one day when I explained about my background
in games programming. My mentor decided to have a go, a topic on which
he knew nothing. He was both humble and happy to be led and openly
admitted his shortcomings. In the end we were able to build a basic
game. Here I answered what I considered basic questions, while he gained
experience.&lt;/p&gt;
&lt;h4&gt;Opposite Example&lt;/h4&gt;
&lt;p&gt;On the other hand some of the worst developers I've worked with are the
opposite of the past example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They won't admit they don't know the answer.&lt;/li&gt;
&lt;li&gt;They won't ask for help.&lt;/li&gt;
&lt;li&gt;They won't treat others as equals.&lt;/li&gt;
&lt;li&gt;They won't admit they were wrong.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;p&gt;Software languages, tools and techniques rapidly change. You can't know
everything. You can be the expert of one topic one day, and the beginner
in another area the next day. Embrace this and learn as you go. Just be
humble about it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Admit it when you don't know the answer. Find out if you can.&lt;/li&gt;
&lt;li&gt;Ask for help.&lt;/li&gt;
&lt;li&gt;Treat everyone equally, as you would like to be treated yourself.&lt;/li&gt;
&lt;li&gt;Admit it when you are wrong.&lt;/li&gt;
&lt;/ul&gt;</content><category term="retro"></category></entry><entry><title>Convention Based Tests</title><link href="/2017/01/convention-based-tests.html" rel="alternate"></link><published>2017-01-11T00:00:00+01:00</published><updated>2017-01-11T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2017-01-11:/2017/01/convention-based-tests.html</id><summary type="html">&lt;p&gt;Most projects have some form of convention. Examples would include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attributes/Properties for REST API's&lt;/li&gt;
&lt;li&gt;Inheritance for third party base types&lt;/li&gt;
&lt;li&gt;Assemblies/Packages for third party code that is loaded dynamically&lt;/li&gt;
&lt;li&gt;Folder or namespace conventions&lt;/li&gt;
&lt;li&gt;And many other forms of conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a few of these examples static analysis can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most projects have some form of convention. Examples would include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attributes/Properties for REST API's&lt;/li&gt;
&lt;li&gt;Inheritance for third party base types&lt;/li&gt;
&lt;li&gt;Assemblies/Packages for third party code that is loaded dynamically&lt;/li&gt;
&lt;li&gt;Folder or namespace conventions&lt;/li&gt;
&lt;li&gt;And many other forms of conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a few of these examples static analysis can detect issues, but the
majority of these problems would resolve only at runtime.&lt;/p&gt;
&lt;p&gt;A technique I've used in the past to great success is the concept of
convention based tests (CBT). These are tests that ensure a particular
convention is followed. As a general practice CBT tend to be written
after the discovery of a problem as it is preferable to rely upon higher
level tests initially. The good news is that CBT ensure that such
problems never return and if a convention is broken you'll be notified
during your test run.&lt;/p&gt;
&lt;p&gt;In terms of quantity there will be a very small number of these tests,
and unlike typical tests that focus on behaviour rather than
implementation, these tests are focused on implementation.&lt;/p&gt;
&lt;h3&gt;Reflection&lt;/h3&gt;
&lt;p&gt;Tests generally should &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;favour readability and clarity over the removal
of
duplication&lt;/a&gt;.
Additionally the use of programming constructs such as loops or
conditionals within tests are usually a bad idea. Using reflection is
not recommended in most cases though the opposite is true for CBT.&lt;/p&gt;
&lt;p&gt;Reflection allows the previous examples to have tests written in a
fairly flexible and dynamic manner. Future changes would automatically
be tested.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tests to ensure particular types within a namespace have the correct
    attribute/property applied.&lt;/li&gt;
&lt;li&gt;Tests to ensure particular types within a namespace have the correct
    base class.&lt;/li&gt;
&lt;li&gt;Tests that assemblies/packages required at runtime are present
    within the bin directory.&lt;/li&gt;
&lt;li&gt;Tests that folders/namespaces match a team/project naming standard.&lt;/li&gt;
&lt;li&gt;And so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Simpler Tests&lt;/h3&gt;
&lt;p&gt;In some cases reflection is not a suitable tool for convention based
tools. In this scenarios a simpler style of test is required. These are
essentially convention based tests that ensure additional tests are
written. These simple tests act more as a prompt to the developer
reminding them to add a test for a particular convention.&lt;/p&gt;
&lt;p&gt;This test would first detect how many types exist within the namespace
and then detect how many tests have been written for those types. While
this style of test does nothing other than really count the number of
expected conventions versus the number of tests, the failure of this
test provides a hint to the developer that they have forgotten
something.&lt;/p&gt;
&lt;p&gt;The key with these simple detection tests is to provide a good failure
message that includes details on why the test failed, and more
importantly why and how a new test should be added.&lt;/p&gt;
&lt;p&gt;These simple CBT work when the use of reflection is difficult. While
they may seem primitive, they do provide value as simple reminders to
add future tests. Despite this it's worth remembering they provide no
guarantee of the quality of the additional tests that are written. Here
peer review is required.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add convention based tests if a convention cannot be detected by
    static analysis or you cannot detect issues with higher level tests.&lt;/li&gt;
&lt;li&gt;Reflection is a valid tool to write a single CBT that covers many
    areas.&lt;/li&gt;
&lt;li&gt;If a CBT is hard to write, use a test to prompt you to add further
    tests in the future.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category><category term="testing"></category></entry><entry><title>Finance For Software Developers</title><link href="/2017/01/finance-for-software-developers.html" rel="alternate"></link><published>2017-01-04T00:00:00+01:00</published><updated>2017-01-04T00:00:00+01:00</updated><author><name>Shaun Finglas</name></author><id>tag:None,2017-01-04:/2017/01/finance-for-software-developers.html</id><summary type="html">&lt;p&gt;Back at the start of 2016 I set about sorting my personal finances out,
inspired by &lt;a href="https://www.amazon.co.uk/d/Books/Soft-Skills-software-developers-manual/1617292397"&gt;Soft
Skills&lt;/a&gt;.
The book makes a point to consider passive income as a viable solution
to wealth building. The reason for this is simple, software developers
tend to get paid well if working professionally …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back at the start of 2016 I set about sorting my personal finances out,
inspired by &lt;a href="https://www.amazon.co.uk/d/Books/Soft-Skills-software-developers-manual/1617292397"&gt;Soft
Skills&lt;/a&gt;.
The book makes a point to consider passive income as a viable solution
to wealth building. The reason for this is simple, software developers
tend to get paid well if working professionally. Like most professionals
though, during school or university you won't be guided on how to handle
money until you are thrown into the deep end.&lt;/p&gt;
&lt;h3&gt;Assets and Liabilities&lt;/h3&gt;
&lt;p&gt;At the start of February we listed all our assets versus liabilities and
were rather shocked. Our net worth (assets minus liabilities) was
negative. Not only was it negative, it was negative by a rather large
number. This scary realisation forced us down the path of personal
finance. Most of this knowledge came from a handful of books and took no
more than a few months to really get to grips with the basics. For the
small cost of a few books and your time the return on this investment is
huge. In summary you want to maximize assets (things that give you
income) and reduce or eliminate liabilities (things that take your money
away) as much as possible.&lt;/p&gt;
&lt;h3&gt;Investing&lt;/h3&gt;
&lt;p&gt;Despite knowing nothing than the basics of the stock market and
investing, investing in stock (sometimes known as equities) is one of
the ways to maximise assets. Again a few simple &lt;a href="https://www.amazon.co.uk/Millionaire-Teacher-Andrew-Hallam/dp/0470830069"&gt;introductory
books&lt;/a&gt;
and some online research was all that was required. Having explored
individual stocks, we settled on low cost index funds as our main
investment solution. Before we could invest though we had to attack our
debt. Without eliminating the debt we were unable to maximize our
investments. Paying off debt is also considered a guaranteed return,
something you cannot get with investments, hence it should be your first
target.&lt;/p&gt;
&lt;h3&gt;Debt&lt;/h3&gt;
&lt;p&gt;Attacking debt took up the whole of 2016. Thankfully there was an easy
system to follow. The difficult part is sticking the course, though you
will quickly start to see benefits. The best solution we found is the
debt snowball, which is part of &lt;a href="http://www.daveramsey.com/baby-steps/"&gt;Dave Ramsey's Baby
Steps&lt;/a&gt;. Steps 1-3 must be
completed in order, sequentially. While steps 4, 5 and 6 can be
completed in parallel.&lt;/p&gt;
&lt;h4&gt;Baby Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Save £1,000 in an emergency fund.&lt;/li&gt;
&lt;li&gt;Pay debts down from smallest to largest using the debt snowball
    method.&lt;/li&gt;
&lt;li&gt;Save 3-6 months of living expenses for a fully-funded emergency
    fund.&lt;/li&gt;
&lt;li&gt;Invest 15% of income into retirement.&lt;/li&gt;
&lt;li&gt;Start funding higher education for children.&lt;/li&gt;
&lt;li&gt;Pay off the mortgage early!&lt;/li&gt;
&lt;li&gt;Build wealth and give!&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;You Need a Budget&lt;/h3&gt;
&lt;p&gt;I was actually advised to create a stick to a budget by a friend while
in university, however I ignored her wise advice. A budget is a crucial
tool to paying off debt and in turn staying out of debt. The best budget
to use with the baby steps is a zero based budget. In this case you run
your personal finances like you would a company such as a bank. At the
end of each month (or whenever you receive income) your balance should
be fully allocated to equal zero pounds available. All of your money is
either paying of debt or working hard in investments, while the rest is
allocated to expenses.&lt;/p&gt;
&lt;p&gt;A written monthly budget is single handedly the best piece of personal
finance I can recommend to others. Once you tell your money where to go,
and have a audit trail of where you are spending you have control. How
we lived prior to a monthly budget is a mystery, though it does explain
the shocking net worth we amassed. To be blunt, get and use a budget.
You need to.&lt;/p&gt;
&lt;h3&gt;Retirement&lt;/h3&gt;
&lt;p&gt;Previously I thought of retirement as something you do when you're old.
Think of your parents or grandparents. However this is not the case.
Retirement is simply being able to do what you want to do, whether or
not this includes work. Being able to wake up each day and do what you
want is a powerful thing.&lt;/p&gt;
&lt;p&gt;Another &lt;a href="http://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/"&gt;shock
discovery&lt;/a&gt;
was the fact that becoming financially independent in order to retire
can be done in ten years, instead of the traditional thirty of forty
year window. A &lt;a href="https://www.reddit.com/r/financialindependence/"&gt;whole community
exists&lt;/a&gt; that prove this
is the case - FIRE (Financially Independent - Retire Early). To
summarise this process, instead of doing what the norm do and investing
10% of your income, invest 50%-90% and you can shorten the process
dramatically. FIRE is a long term goal that requires minimized expenses
and a strict budget, but the pay off will be more than worth it.&lt;/p&gt;
&lt;h3&gt;2017&lt;/h3&gt;
&lt;p&gt;Our personal goals for 2017 include completing our six month emergency
fund, followed by aggressively paying off our mortgage, with the goal to
complete this within two and half years versus the remaining twenty year
window. Without the basic concepts above this would have not been
possible.&lt;/p&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Eliminate all debt, and stay out of debt.&lt;/li&gt;
&lt;li&gt;Create and use a monthly budget.&lt;/li&gt;
&lt;li&gt;Use the baby steps to get out of debt and build wealth.&lt;/li&gt;
&lt;li&gt;Low cost index funds are a recommended way of simple investing.&lt;/li&gt;
&lt;li&gt;Retirement isn't a thirty or forty year process.&lt;/li&gt;
&lt;li&gt;No one will teach you personal finance, it's up to yourself to get
    to grips with it.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tutorial"></category></entry></feed>