<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Shaun Finglas - Shaun Finglas</title><link>/</link><description>Agile software development &amp;amp; programming - one lesson at a time.</description><lastBuildDate>Tue, 08 Aug 2017 00:00:00 +0200</lastBuildDate><item><title>Code Smell: Time Span Embedded in Variable</title><link>/2017/01/code-smell-time-span-embedded-in-variable.html</link><description>&lt;p&gt;A common code smell that tends to go unnoticed is embedding a time span within a variable name. While developers recognize that embedding types into names is redundant they often fail to see this smell.&lt;/p&gt;
&lt;p&gt;You often need a variable to trigger on a set period, such as every fifteen …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 08 Aug 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2017-08-08:/2017/01/code-smell-time-span-embedded-in-variable.html</guid><category>code</category><category>tutorial</category></item><item><title>Testing your Composition Root</title><link>/2017/06/testing-your-composition-root.html</link><description>&lt;p&gt;Separating configuration from your code itself is a good practice. Unfortunately this can quite be
quite complex in itself. In fact it is fair to say that in many cases the use of
&lt;a href="/2014/11/dependency-injection-di-containers.html"&gt;DI containers&lt;/a&gt; to achieve this can be overkill
for a task that should be rather basic.&lt;/p&gt;
&lt;p&gt;Recently …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 27 Jun 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2017-06-27:/2017/06/testing-your-composition-root.html</guid><category>tutorial</category><category>testing</category></item><item><title>Logging vs Auditing</title><link>/2017/05/logging-vs-auditing.html</link><description>&lt;p&gt;The difference between logging and auditing is a subtle yet important
distinction.&lt;/p&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Technical in nature. Deals with technical concerns, stacktraces or
    errors.&lt;/li&gt;
&lt;li&gt;Additional levels such as DEBUG, INFO, WARN, ERROR, FATAL for
    classification.&lt;/li&gt;
&lt;li&gt;Logging can be simple such as traditional stdout statements, or more
    complex with semantic/structured logging …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 02 May 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2017-05-02:/2017/05/logging-vs-auditing.html</guid><category>summary</category></item><item><title>The QA Test Matrix</title><link>/2017/04/the-qa-test-matrix.html</link><description>&lt;p&gt;Historically teams I've worked with have taken a few varying approaches
when designing tests against acceptance criteria. One is to have the
business define the feature, while the team help define the acceptance
criteria. Ultimately the business gets the final say if they agree, and
further acceptance criteria is either …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 03 Apr 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2017-04-03:/2017/04/the-qa-test-matrix.html</guid><category>testing</category></item><item><title>Be Humble</title><link>/2017/01/be-humble.html</link><description>&lt;p&gt;Some of the best developers I know treat everyone with mutual respect.
Not only this they are open about what they do know and what they don't
know. In fact they'll often proclaim “I don't know” and go about finding
out how they can answer your question or solve a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 18 Jan 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2017-01-18:/2017/01/be-humble.html</guid><category>retro</category></item><item><title>Convention Based Tests</title><link>/2017/01/convention-based-tests.html</link><description>&lt;p&gt;Most projects have some form of convention. Examples would include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attributes/Properties for REST API's&lt;/li&gt;
&lt;li&gt;Inheritance for third party base types&lt;/li&gt;
&lt;li&gt;Assemblies/Packages for third party code that is loaded dynamically&lt;/li&gt;
&lt;li&gt;Folder or namespace conventions&lt;/li&gt;
&lt;li&gt;And many other forms of conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a few of these examples static analysis can …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 11 Jan 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2017-01-11:/2017/01/convention-based-tests.html</guid><category>tutorial</category><category>testing</category></item><item><title>Finance For Software Developers</title><link>/2017/01/finance-for-software-developers.html</link><description>&lt;p&gt;Back at the start of 2016 I set about sorting my personal finances out,
inspired by &lt;a href="https://www.amazon.co.uk/d/Books/Soft-Skills-software-developers-manual/1617292397"&gt;Soft
Skills&lt;/a&gt;.
The book makes a point to consider passive income as a viable solution
to wealth building. The reason for this is simple, software developers
tend to get paid well if working professionally …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 04 Jan 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2017-01-04:/2017/01/finance-for-software-developers.html</guid><category>tutorial</category></item><item><title>DDD - Events</title><link>/2016/11/ddd-events.html</link><description>&lt;p&gt;The act of something happening is one of the most crucial aspects of implementing Domain Driven Design (DDD). I missed the importance of domain events when first exploring DDD.&lt;/p&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;Most requirements come in the form &lt;q&gt;when something happens, do this&lt;/q&gt;. &lt;em&gt;Something&lt;/em&gt; in this case would be an action, and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-11-01:/2016/11/ddd-events.html</guid><category>tutorial</category></item><item><title>POODR Highlights Part 2</title><link>/2016/11/poodr-highlights-part-2.html</link><description>&lt;p&gt;Two other stand out topics from POODR were the use of tests and
inheritance. The first set of &lt;a href="https://blog.shaunfinglas.co.uk/2016/10/poodr-highlights-part-1.html"&gt;higlights covered dependencies and
arguments&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Tests&lt;/h4&gt;
&lt;p&gt;A conclusion that I agree with is that in general “most programmers
write too many tests.”. A great quote in the book sees “tests (as) the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-11-01:/2016/11/poodr-highlights-part-2.html</guid><category>highlight</category></item><item><title>Constant Object Anti Pattern</title><link>/2016/10/constant-object-anti-pattern.html</link><description>&lt;p&gt;Most constants are used to remove magic numbers or variables that lack
context. A classic example would be code littered with the number 7.
What does this refer to exactly? If this was replaced with DaysInWeek or
similar, much clarity is provided. You can determine that code
performing offsets would …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-10-01:/2016/10/constant-object-anti-pattern.html</guid><category>tutorial</category><category>programming</category></item><item><title>POODR Highlights Part 1</title><link>/2016/10/poodr-highlights-part-1.html</link><description>&lt;p&gt;&lt;a href="http://www.poodr.com/"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt; or
POODR is clearly a book about Ruby development, however the odd aspect
is much of the concepts apply to other languages. In fact I've taken
these ideas and used them both before and after reading the book in
other dynamic languages and even static …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-10-01:/2016/10/poodr-highlights-part-1.html</guid><category>highlight</category><category>code</category><category>programming</category></item><item><title>The New Guy</title><link>/2016/10/the-new-guy.html</link><description>&lt;p&gt;Everyone is new at some point. No matter your experience level. You're
either new to the team or new to the business. Being the “new person” is
both a blessing and a curse.&lt;/p&gt;
&lt;h3&gt;You're New&lt;/h3&gt;
&lt;p&gt;When you're new you come with no baggage. You're full of questions and
curiosity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-10-01:/2016/10/the-new-guy.html</guid><category>retro</category></item><item><title>New and Shiny Things</title><link>/2016/09/new-and-shiny-things.html</link><description>&lt;p&gt;There is risk with upgrading anything, be it language, framework,
library, OS or third parties.&lt;/p&gt;
&lt;p&gt;In the past I was rather gung-ho about upgrading. New version out? We
need it. In fact, this need is often a want. The new version often seems
better. Developers seem addicted to the latest …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Sep 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-09-01:/2016/09/new-and-shiny-things.html</guid><category>retro</category></item><item><title>Past Mistakes - ORMs and Bounded Contexts</title><link>/2016/08/past-mistakes-orms-and-bounded-contexts.html</link><description>&lt;p&gt;Sticking with the theme of documenting past mistakes, it's worth
expanding a real life scenario where I was unaware of the use of bounded
contexts and fully understanding the tools you use.&lt;/p&gt;
&lt;h4&gt;Ignoring a Bounded Context&lt;/h4&gt;
&lt;p&gt;A fellow developer set upon a quest to rid numerous projects of
duplicated records …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-08-01:/2016/08/past-mistakes-orms-and-bounded-contexts.html</guid><category>retro</category><category>past-mistakes-series</category></item><item><title>Test Your Live System using Live Service Tests</title><link>/2016/08/test-your-live-system-using-live.html</link><description>&lt;p&gt;Traditionally there are three categories of functional tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Unit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is often refereed to as the testing pyramid. Unit tests form the
bulk of your suite, followed by a smaller subset of integration tests.
Acceptance tests that cover features should be the tip of your testing
strategy, few …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-08-01:/2016/08/test-your-live-system-using-live.html</guid><category>testing</category></item><item><title>Why You Should Do Code Katas</title><link>/2016/08/why-you-should-do-code-katas.html</link><description>&lt;p&gt;&lt;a href="http://codekata.com/"&gt;Code katas&lt;/a&gt; are simple exercises that are meant
to be repeated. They are great for learning a new language or tool. The
goal is to learn something, not to complete them. In fact, if you don't
finish a kata that is perfectly normal as long as you take something
away …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-08-01:/2016/08/why-you-should-do-code-katas.html</guid><category>programming</category><category>retro</category></item><item><title>Notes on Building and Deploying Software</title><link>/2016/07/notes-on-building-and-deploying-software.html</link><description>&lt;h4&gt;Builds and Deploys&lt;/h4&gt;
&lt;p&gt;Ideally a build and deploy should be a single step, included within the
check out of the repository. Additionally the build should include and
install pre-requisites if missing. You can safely assume the target OS
is at least configured, but any missing packages should be installed as …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 10 Jul 2016 15:18:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-07-10:/2016/07/notes-on-building-and-deploying-software.html</guid><category>deployment</category></item><item><title>Ten Lessons from Rewriting Software</title><link>/2016/06/ten-lessons-from-rewriting-software.html</link><description>&lt;ol&gt;
&lt;li&gt;
&lt;h4&gt;It Will Take A Lot Longer Than Estimated&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Its navie to actually think this but if a system has been in
    production for say five years, expecting to reproduce it in five
    weeks is not possible. You may be able to get 80% of the core
    functionality done, but the …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-07-01:/2016/06/ten-lessons-from-rewriting-software.html</guid><category>retro</category></item><item><title>Anaemic Domain Models and Code Smells</title><link>/2016/07/anaemic-domain-models-and-code-smells.html</link><description>&lt;p&gt;An anaemic domain model (ADM) is considered a code smell in many cases.
An ADM is present when you have a entity representing your domain, but
void of any behaviour. Any logic is separate and operated upon in
isolation. Such domain models can be thought of as simple property bags …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-07-01:/2016/07/anaemic-domain-models-and-code-smells.html</guid><category>programming</category></item><item><title>I Need to Stop Misusing Divs</title><link>/2016/07/i-need-to-stop-misusing-divs.html</link><description>&lt;p&gt;I a certainly not a skilled or expert front end developer. While I'm
more than capable of creating pages I lack any design magic to make them
look half decent. Despite this one area where improvement can be made is
in my markup itself.&lt;/p&gt;
&lt;p&gt;Over the past few months I've …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-07-01:/2016/07/i-need-to-stop-misusing-divs.html</guid><category>retro</category></item><item><title>UI Composition Techniques for Services</title><link>/2016/07/ui-composition-techniques-for-services.html</link><description>&lt;p&gt;When using services be it SOA, microservices or some other hybrid
approach, at some point you will need to display an aggregation of data
onto a UI. This simple task can actually involve some complexity and
hidden pitfalls.&lt;/p&gt;
&lt;p&gt;As an example, this blog could be powered by three independent services …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-07-01:/2016/07/ui-composition-techniques-for-services.html</guid><category>microservices</category><category>SOA</category></item><item><title>DDD - Bounded Contexts</title><link>/2016/06/ddd-bounded-contexts.html</link><description>&lt;p&gt;A single domain can grow large when applying Domain Driven Design. It
can become very hard to contain a single model when using ubiquitous
language to model the domain. Classic examples prevalent in many domains
would be &lt;code&gt;Customer&lt;/code&gt; or &lt;code&gt;User&lt;/code&gt; models. A bounded context allows you to
break down a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 14 Jun 2016 07:25:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-06-14:/2016/06/ddd-bounded-contexts.html</guid><category>tutorial</category></item><item><title>Given When Then Scenarios vs Test Fixtures</title><link>/2016/06/given-when-then-scenarios-vs-test.html</link><description>&lt;p&gt;There are two common ways of writing automated tests which apply from
unit to acceptance tests. These are typically known as test fixtures and
Given-When-Then scenarios.&lt;/p&gt;
&lt;h4&gt;Test Fixture&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Traditional method of writing tests.&lt;/li&gt;
&lt;li&gt;The common JUnit/NUnit approach. Other languages have very similar
    concepts.&lt;/li&gt;
&lt;li&gt;Single test fixture with multiple tests …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-06-01:/2016/06/given-when-then-scenarios-vs-test.html</guid><category>testing</category><category>unit-testing</category><category>tutorial</category></item><item><title>Foreign Key Constraints and Microservices</title><link>/2016/05/foreign-key-constraints-and.html</link><description>&lt;p&gt;Database constraints when used in relational databases are great. They
ensure data integrity at the lowest level. No one would argue against
using them in practice. Essentially constraints can be thought of as
assertions against your database. Rules such as requirement, default
values and foreign key constraints double check your …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-05-01:/2016/05/foreign-key-constraints-and.html</guid><category>microservices</category><category>distributed-systems</category></item><item><title>Past Mistakes - Out of Process Commands</title><link>/2016/05/past-mistakes-out-of-process-commands.html</link><description>&lt;p&gt;Some of the best lessons you can learn are from failure. I figured a
series on mistakes I've made in the past would highlight where I went
wrong and more importantly what to remember going forward. These real
life examples vary from my early days of programming all the way …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-05-01:/2016/05/past-mistakes-out-of-process-commands.html</guid><category>retro</category><category>past-mistakes-series</category></item><item><title>You Rarely Need Custom Exceptions</title><link>/2016/05/you-rarely-need-custom-exceptions.html</link><description>&lt;p&gt;Implementing custom exceptions usually gives a hint as to why you rarely
need custom implementations. They are often nothing more than sub
classes where the only difference is the type name and containing
message.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/b7341379033d951aa88d2b7ed28aaba5.js"&gt;&lt;/script&gt;

&lt;p&gt;In this C# example there is a lot of code for &lt;em&gt;nothing&lt;/em&gt;. When checking
logs or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-05-01:/2016/05/you-rarely-need-custom-exceptions.html</guid><category>programming</category><category>tutorial</category></item><item><title>Your Job Isn't to Write Code</title><link>/2016/05/your-job-isnt-to-write-code.html</link><description>&lt;p&gt;Solving problems is the role of software developers first and foremost.
The most interesting aspect is that in many cases it is possible to
perform this role without writing a single line of code.&lt;/p&gt;
&lt;h4&gt;Low Tech&lt;/h4&gt;
&lt;p&gt;I once worked with a digital dashboard which monitored applications. One
of the yet …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-05-01:/2016/05/your-job-isnt-to-write-code.html</guid><category>developers</category><category>retro</category></item><item><title>Legacy Code is Just Code</title><link>/2016/04/legacy-code-is-just-code.html</link><description>&lt;p&gt;Try and define legacy code. &lt;a href="https://www.amazon.co.uk/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/275-5610177-1468962"&gt;Working Effectively With Legacy
Code&lt;/a&gt;
states it is simply code with no tests. This is an almost perfect
definition, however it is quite easy to have code that is covered by
automated tests, yet is still considered to be legacy. Poor quality, or
missing test …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 19 Apr 2016 16:23:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-04-19:/2016/04/legacy-code-is-just-code.html</guid><category>programming</category><category>retro</category></item><item><title>Dependency Injection for Common Global Dependencies</title><link>/2016/04/dependency-injection-for-common-global.html</link><description>&lt;p&gt;The use of &lt;a href="https://blog.shaunfinglas.co.uk/2016/03/singletons-and-singleton-lifestyle.html"&gt;singletons can often be replaced by simply adjusting scoping
of
objects&lt;/a&gt;.
The vast majority of dependencies fit this pattern, with a few
exceptions such as DateTime instances, or logging.&lt;/p&gt;
&lt;p&gt;Sometimes you just need these dependencies everywhere. You can find
yourself passing these dependencies down into the deep …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 13 Apr 2016 07:09:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-04-13:/2016/04/dependency-injection-for-common-global.html</guid><category>programming</category><category>tutorial</category></item><item><title>Singleton's and the Singleton Lifestyle</title><link>/2016/03/singletons-and-singleton-lifestyle.html</link><description>&lt;p&gt;&lt;a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/"&gt;The death of testability and the lack of
isolation&lt;/a&gt;
make the singleton pattern a relic of times gone by. Rarely have I had a
real need to code a singleton since my first year of university. Most
decisions to use a singleton boil down to scoping issues.&lt;/p&gt;
&lt;h4&gt;Singleton&lt;/h4&gt;
&lt;p&gt;Assume a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Apr 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-04-01:/2016/03/singletons-and-singleton-lifestyle.html</guid><category>programming</category><category>tutorial</category></item><item><title>Project Setup Tax</title><link>/2016/04/project-setup-tax.html</link><description>&lt;p&gt;With microservices gaining popularity, one consideration prior to
adoption is new project setup. In fact this statement holds true for any
new project that you decide to create.&lt;/p&gt;
&lt;p&gt;Each new project requires at a minimum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source control - somewhere to actually store the code.&lt;/li&gt;
&lt;li&gt;A project base - API, executable, library, application …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Apr 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-04-01:/2016/04/project-setup-tax.html</guid><category>microservices</category><category>retro</category></item><item><title>X% of Configuration is Never Used</title><link>/2016/04/x-of-configuration-is-never-used.html</link><description>&lt;p&gt;Code configuration is essentially for the likes of URLs, credentials or
other per deployable settings. Sadly configuration seems to fall into
examples where there is simply too much configuration, or the system has
so many configuration points the actual code becomes far too complex for
its own good.&lt;/p&gt;
&lt;h4&gt;Too Much …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Apr 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-04-01:/2016/04/x-of-configuration-is-never-used.html</guid><category>programming</category><category>code-quality</category></item><item><title>Pulling the Plug on Date Time Parsing</title><link>/2016/03/pulling-plug-on-date-time-parsing.html</link><description>&lt;p&gt;Date/time logic is hard. Throw in time zones along with daylight saving
and it's even harder. Recently a suite of tests that had happily been
running for months started failing. There were no code changes and all
the tests were somehow related to date/time ranges.&lt;/p&gt;
&lt;p&gt;Despite this the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 30 Mar 2016 06:49:00 +0200</pubDate><guid isPermaLink="false">tag:None,2016-03-30:/2016/03/pulling-plug-on-date-time-parsing.html</guid><category>testing</category><category>programming</category><category>unit-testing</category></item><item><title>Best of Breed</title><link>/2016/03/best-of-breed.html</link><description>&lt;p&gt;Spikes are one of the best ways to aid the design of software. In some
cases spike solutions can open more questions than they solve. The use
of a technique known as &lt;em&gt;Best of Breed&lt;/em&gt; can assist when this arises.&lt;/p&gt;
&lt;p&gt;Rather than producing a single spike, produce several. Either
individually …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-03-01:/2016/03/best-of-breed.html</guid><category>retro</category></item><item><title>Eating your own Dog Food</title><link>/2016/03/eating-your-own-dog-food.html</link><description>&lt;p&gt;Also known as &lt;em&gt;dog fooding&lt;/em&gt;. It's an odd term, &lt;a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food#Origin_of_the_term"&gt;with roots dating back
to 70's adverts and the even more
bizarre&lt;/a&gt;.
In software development the idea is simple. Use the software you produce
to make it better. This can be taken to the extreme with examples such
as Notepad++ being …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-03-01:/2016/03/eating-your-own-dog-food.html</guid><category>retro</category></item><item><title>Write Assertions First</title><link>/2016/03/write-assertions-first.html</link><description>&lt;p&gt;Writing a test as part of the TDD process is simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many individuals recommend the process be reversed. Write assertions
first. Then write the steps to perform the action. Followed by the
required setup to complete the action.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrange&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;li&gt;Assert&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Simplicity&lt;/h4&gt;
&lt;p&gt;You will write just enough …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-03-01:/2016/03/write-assertions-first.html</guid><category>testing</category><category>tdd</category><category>unit-testing</category></item><item><title>Gaining Ten Extra Hours a Week</title><link>/2016/02/gaining-ten-extra-hours-week.html</link><description>&lt;p&gt;For a long time my work life balance has gone through phases. Some weeks
I would spend hours after work writing code. This would exceed to well
beyond midnight in some cases. This phase was not sustainable but it
appeared to be the norm.&lt;/p&gt;
&lt;p&gt;My other hobbies such as reading …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-02-01:/2016/02/gaining-ten-extra-hours-week.html</guid><category>retro</category></item><item><title>Sproc vs ORM vs Inline vs Polyglot</title><link>/2016/02/sproc-vs-orm-vs-inline-vs-polyglot.html</link><description>&lt;p&gt;With relational databases the common data access patterns tend to fall
into three core options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct access via inline SQL&lt;/li&gt;
&lt;li&gt;Stored procedures using the standard library&lt;/li&gt;
&lt;li&gt;ORM frameworks or libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Individually these have both pros and cons, often leading to heated
debate and discussion.&lt;/p&gt;
&lt;h4&gt;Inline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Leaky abstractions.&lt;/li&gt;
&lt;li&gt;Dangerous in places …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-02-01:/2016/02/sproc-vs-orm-vs-inline-vs-polyglot.html</guid><category>retro</category></item><item><title>The N+1 Problem</title><link>/2016/02/the-n1-problem.html</link><description>&lt;p&gt;The N+1 problem is when multiple queries are executed against a
persistent store when a reduced amount could serve the same purpose.
This degrades performance, uses more memory and can cause complexity to
be added to the code that processes the results. Most sources of the
problem come from …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-02-01:/2016/02/the-n1-problem.html</guid><category>tutorial</category></item><item><title>Why you need a Developer Diary</title><link>/2016/02/why-you-need-developer-diary.html</link><description>&lt;p&gt;After eighteen months of use, I can safely claim &lt;a href="https://blog.shaunfinglas.co.uk/2014/09/developer-diaries.html"&gt;how useful a a
developer diary is, and why you should start using
one&lt;/a&gt; if
you don't already.&lt;/p&gt;
&lt;h4&gt;Changes&lt;/h4&gt;
&lt;p&gt;Using a single file grew too large as expected. Instead each grouping is
allocated an individual file. While some of these are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-02-01:/2016/02/why-you-need-developer-diary.html</guid><category>retro</category></item><item><title>Application Validation and Domain Validation</title><link>/2016/01/application-validation-and-domain.html</link><description>&lt;p&gt;There are two types of validation in an application - application
validation and domain validation. This applies whether or not you
practice DDD. One of my mistakes in the past has been confusing or
conflating these two responsibilities at the same time.&lt;/p&gt;
&lt;h4&gt;Application Validation&lt;/h4&gt;
&lt;p&gt;Application validation is anything technical or anything …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 13 Jan 2016 19:58:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-01-13:/2016/01/application-validation-and-domain.html</guid><category>tutorial</category></item><item><title>A Lotta Architecture - A Reply to "A Little Architecture"</title><link>/2016/01/a-lotta-architecture-reply-to-little.html</link><description>&lt;p&gt;A recent post about &lt;a href="http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html"&gt;architecture from Uncle
Bob&lt;/a&gt;
got me thinking and talking about a typical day in the life of a
developer. It's well worth a read. In fact at the time of writing this
reply there are 347 retweets and 288 likes - of which I was one of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Jan 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-01-01:/2016/01/a-lotta-architecture-reply-to-little.html</guid><category>reply</category><category>retro</category><category>architecture</category></item><item><title>Getting Things Done - For Software Developers</title><link>/2016/01/getting-things-done-for-software.html</link><description>&lt;p&gt;I have been using the incredibly simple techniques within &lt;a href="http://gettingthingsdone.com/"&gt;Getting
Things Done (GTD)&lt;/a&gt; to good effect over
the last twelve months.&lt;/p&gt;
&lt;h3&gt;The System&lt;/h3&gt;
&lt;p&gt;At a high level the system consists of buckets, grouping and a task
store. The actual implementation of GTD systems is down to personal
preference. Many find …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Jan 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-01-01:/2016/01/getting-things-done-for-software.html</guid><category>reading</category><category>retro</category></item><item><title>Validation is not a Cross Cutting Concern</title><link>/2016/01/validation-is-not-cross-cutting-concern.html</link><description>&lt;p&gt;Attributes in C# are also known as &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;decorators in
Python&lt;/a&gt; or &lt;a href="http://docs.oracle.com/javase/tutorial/java/annotations/"&gt;annotations
in Java&lt;/a&gt;.
Other languages may have similar constructs. This post will use
&lt;em&gt;attribute&lt;/em&gt; throughout but refers to the same concept.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;While attributes prove useful for cross cutting concerns such as
authorization or logging, they can be misused. Attributes …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Jan 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2016-01-01:/2016/01/validation-is-not-cross-cutting-concern.html</guid><category>programming</category><category>tutorial</category></item><item><title>ReactJS and JSHint</title><link>/2015/12/reactjs-and-jshint.html</link><description>&lt;p&gt;The &lt;a href="http://facebook.github.io/react/docs/getting-started.html"&gt;ReactJS Getting Started
Guide&lt;/a&gt; states
that the recommended way of using React is combined with npm.&lt;/p&gt;
&lt;p&gt;This is great but poses a problem when trying to use JSHint. The default
example outputs a single JS file containing both your code and the React
library. The end result is the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-12-01:/2015/12/reactjs-and-jshint.html</guid><category>programming</category><category>tutorial</category></item><item><title>Recommended Reading List 2015</title><link>/2015/12/recommended-reading-list-2015.html</link><description>&lt;p&gt;In a similar manner to
&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/recommended-reading-list-2014.html"&gt;previous&lt;/a&gt;
&lt;a href="https://blog.shaunfinglas.co.uk/2012/10/recommended-reading-2012.html"&gt;years&lt;/a&gt;
here is my recommended reading list for 2015. As before some of these
books have been released for a while, but these are some of my
highlights for various reasons.&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="http://www.amazon.co.uk/Dependency-Injection-NET-Mark-Seemann/dp/1935182501"&gt;Dependency Injection in .NET&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;I had put off reading this book for …&lt;/dd&gt;&lt;/dl&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-12-01:/2015/12/recommended-reading-list-2015.html</guid><category>reading</category></item><item><title>Reducing Conditional Logic to a Single Location</title><link>/2015/12/reducing-conditional-logic-to-single.html</link><description>&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2013/05/the-anti-if-campaign.html"&gt;My Anti If Campaign
post&lt;/a&gt;
still generates a lot of questions and discussion. In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conditional statements are not bad. They are a core programming
    construct.&lt;/li&gt;
&lt;li&gt;If you are working in an OO language, type checks are probably not
    the best solution to your problem. Rely on polymorphism.&lt;/li&gt;
&lt;li&gt;You need …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-12-01:/2015/12/reducing-conditional-logic-to-single.html</guid><category>programming</category><category>tutorial</category></item><item><title>Year in Review 2015</title><link>/2015/12/year-in-review-2015.html</link><description>&lt;h4&gt;January&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Started the year with reasons as to why &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/why-technical-blogging.html"&gt;technical blogging is
    useful and
    recommended&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kick started a series of posts themed around simplicity,
    recommending to &lt;a href="https://blog.shaunfinglas.co.uk/2015/01/abstract-data-use-not-data-access.html"&gt;abstract data use and not data
    access&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;February&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;series of posts on
    abstractions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The power of &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/value-object-refactoring.html"&gt;Value Objects as a key
    refactoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;March …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-12-01:/2015/12/year-in-review-2015.html</guid><category>year-in-review</category><category>retro</category></item><item><title>Don't Build a Thing</title><link>/2015/11/dont-build-thing.html</link><description>&lt;p&gt;Part two of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/throw-code-away.html"&gt;Throw Code
    Away&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Here is a real life example of where I treated a unknown project
incorrectly. Why I handled this is badly and how I should have handled
it if I could rewind …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-11-01:/2015/11/dont-build-thing.html</guid><category>architecture</category><category>agile-architecture-series</category></item><item><title>Pre Computation</title><link>/2015/11/pre-computation.html</link><description>&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/01/caching.html"&gt;Caching is a common
technique&lt;/a&gt;,
especially with HTTP as it is made so easy. However pre computation is
an alternative that can be used to reduce failures as well as speed up
processing and response times.&lt;/p&gt;
&lt;h4&gt;Caching Example&lt;/h4&gt;
&lt;p&gt;Assume a list of countries to be displayed on the UI. These …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-11-01:/2015/11/pre-computation.html</guid><category>architecture</category></item><item><title>Throw Code Away</title><link>/2015/11/throw-code-away.html</link><description>&lt;p&gt;The third and final part of my agile architecture series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;You Cannot Iterate upon
    Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/11/you-cannot-iterate-upon-architecture.html"&gt;Part
one&lt;/a&gt;
suggested walking skeletons for new features or projects. &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Part
two&lt;/a&gt;
suggested building the limited, smallest and simplest functionality
possible. However you do not always have …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-11-01:/2015/11/throw-code-away.html</guid><category>architecture</category><category>agile-architecture-series</category></item><item><title>You Cannot Iterate upon Architecture</title><link>/2015/11/you-cannot-iterate-upon-architecture.html</link><description>&lt;p&gt;This is the first part of a series of posts as to why gradual iteration,
doing the simplest thing that can possibly work over a software project
fails in many cases. This series will explain why this is the case, and
provide solutions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/11/dont-build-thing.html"&gt;Don't Build a
    Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-11-01:/2015/11/you-cannot-iterate-upon-architecture.html</guid><category>architecture</category><category>agile-architecture-series</category></item><item><title>Abstractions in Code, Details in Metadata</title><link>/2015/10/abstractions-in-code-details-in-metadata.html</link><description>&lt;p&gt;I've programmed many games - each one was special in its own way. One in
particular stands out early in my university studies, a top down
shooter. It was not graphics, gameplay, or sound that made it stand out
however. It was the lesson it taught me about software development.&lt;/p&gt;
&lt;h4&gt;Level …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Oct 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-10-01:/2015/10/abstractions-in-code-details-in-metadata.html</guid><category>programming</category><category>retro</category></item><item><title>Coding In the Real World</title><link>/2015/10/coding-in-real-world.html</link><description>&lt;p&gt;As a student when confronted with a problem, I would end up coding it
and thinking - &lt;em&gt;how do the professionals do this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For some reason I had the impression that once I entered the industry I
would find enlightenment. Discovering the one true way to write high
quality, professional code …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Oct 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-10-01:/2015/10/coding-in-real-world.html</guid><category>retro</category></item><item><title>Header Interfaces vs Role Interfaces</title><link>/2015/10/header-interfaces-vs-role-interfaces.html</link><description>&lt;p&gt;In some languages such as C++ you must define header interfaces. These
constructs define how a public type is exposed in terms of its public
interface. Other languages take a different route. C# or Java do not
require headers but they are still very much in circulation. This
unfortunately brings …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Oct 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-10-01:/2015/10/header-interfaces-vs-role-interfaces.html</guid><category>programming</category><category>code-quality</category><category>tutorial</category></item><item><title>Set Based Design</title><link>/2015/10/set-based-design.html</link><description>&lt;p&gt;Each morning newspapers hit the newstands without fail. Live broadcasts
are the same. Come show time they hit the air without fail. You can
probably think of more examples of deadlines that are constantly
achieved. So why does software development accept missed deadlines?
Software development not only encourages software to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Oct 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-10-01:/2015/10/set-based-design.html</guid><category>architecture</category></item><item><title>Release It - Highlights Part 1</title><link>/2015/09/release-it-highlights-part-1.html</link><description>&lt;p&gt;&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt; is one of the
most useful books I've read. The advice and suggestions inside certainly
change your perspective on how to write software. My key takeaway is
that software should be cynical. Expect the worst, expect failures and
put up boundaries. In the majority of cases these failures …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-09-01:/2015/09/release-it-highlights-part-1.html</guid><category>release-it-series</category></item><item><title>Release It - Highlights Part 2</title><link>/2015/09/release-it-highlights-part-2.html</link><description>&lt;p&gt;This is the second part of my collection of notes and snippets from
&lt;a href="https://pragprog.com/book/mnee/release-it"&gt;Release It!&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/09/release-it-highlights-part-1.html"&gt;Part 1 - Shared Resources, Responses, SLA, Databases and Circuit
    Breakers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - Caches, Testing, HTML, Pre-Computation and Logging (Future
    Post)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Caches&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Low memory conditions are a threat to both stability and capacity.&lt;/li&gt;
&lt;li&gt;You need to …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-09-01:/2015/09/release-it-highlights-part-2.html</guid><category>release-it-series</category></item><item><title>The Self Shunt - Test Doubles without a Framework</title><link>/2015/09/the-self-shunt-test-doubles-without.html</link><description>&lt;p&gt;Generally you should &lt;a href="https://blog.shaunfinglas.co.uk/2015/08/why-i-dont-like-mocking-frameworks.html"&gt;favour hand crafted stubs without a framework by
default&lt;/a&gt;.
Before you reach for a framework there is another bridging step that you
can take only pulling in a framework if complexity arises - the Self
Shunt.&lt;/p&gt;
&lt;p&gt;Assume a simple &lt;em&gt;Hello World&lt;/em&gt; subject under test where we can provide …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-09-01:/2015/09/the-self-shunt-test-doubles-without.html</guid><category>testing</category><category>unit-testing</category><category>tutorial</category></item><item><title>Types of Test Doubles</title><link>/2015/09/types-of-test-doubles.html</link><description>&lt;p&gt;&lt;em&gt;Mock&lt;/em&gt; is an overloaded term in software development. Sadly this leads
to developers answering with "&lt;em&gt;mock it&lt;/em&gt;" when a mock object may not be
the right solution. &lt;a href="http://xunitpatterns.com/Test%20Double.html"&gt;Test
Doubles&lt;/a&gt; are a more general
term. I should try to use this naming more than I do at present - a goal
I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-09-01:/2015/09/types-of-test-doubles.html</guid><category>testing</category><category>unit-testing</category></item><item><title>Waste: Write Less Code</title><link>/2015/09/waste-write-less-code.html</link><description>&lt;p&gt;One of the biggest &lt;a href="https://en.wikipedia.org/wiki/Lean_manufacturing#Types_of_waste"&gt;forms of
waste&lt;/a&gt;
is code. &lt;a href="http://www.amazon.co.uk/Implementing-Lean-Software-Development-Addison-Wesley-ebook/dp/B00HNB3VQE"&gt;An estimated 80% of features in a software project are never
or rarely
used&lt;/a&gt;.
This makes code the software development equivalent of inventory. Having
a warehouse full of inventory is not a benefit, neither is having a
repository full of code …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-09-01:/2015/09/waste-write-less-code.html</guid><category>retro</category></item><item><title>Loops vs Functional Programming Styles</title><link>/2015/08/loops-vs-functional-programming-styles.html</link><description>&lt;p&gt;The following examples are four of the most common functional
programming patterns that appear in mainstream languages though they may
be known under different names.&lt;/p&gt;
&lt;p&gt;Being a &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/cqrs-simplest-introduction.html"&gt;fan of CQS and
CQRS&lt;/a&gt;,
queries work great when coding using the functional style. While this is
completely subjective in terms of style …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-08-01:/2015/08/loops-vs-functional-programming-styles.html</guid><category>javascript</category><category>programming</category><category>tutorial</category></item><item><title>Production Code is Dirty</title><link>/2015/08/production-code-is-dirty.html</link><description>&lt;p&gt;Production code is dirty. &lt;em&gt;Dirty&lt;/em&gt; may be the wrong word however. Complex
could be more suitable. Unlike code that is not yet in production, it is
weathered, proven, and full of edge cases including numerous bug fixes.
After some time this build up of additions can cause the code to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-08-01:/2015/08/production-code-is-dirty.html</guid><category>retro</category><category>code-quality</category></item><item><title>Queue Centric Work Pattern</title><link>/2015/08/queue-centric-work-pattern.html</link><description>&lt;p&gt;The &lt;a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern"&gt;Queue Centric Work Pattern
(QCWP)&lt;/a&gt;
is simple. Send a message declaring the intent of the command,
acknowledge the message and proceed. All work takes place in a
background process so the user is not kept waiting for the request to
return. Acknowledgement usually takes the form of persistence to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-08-01:/2015/08/queue-centric-work-pattern.html</guid><category>microservices</category><category>distributed-systems</category><category>SOA</category></item><item><title>Why I Don't Like Mocking Frameworks</title><link>/2015/08/why-i-dont-like-mocking-frameworks.html</link><description>&lt;p&gt;Disclaimer: By &lt;em&gt;mocking&lt;/em&gt; framework I generalize anything that includes
support for stubs and mock objects.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The use of mocking frameworks was a difficult part of my TDD journey.
Not only are newcomers expected to get their head around the basics of
the practice there are now new tools to contend …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-08-01:/2015/08/why-i-dont-like-mocking-frameworks.html</guid><category>tdd</category><category>unit-testing</category></item><item><title>DRY vs Coupling in Production Code</title><link>/2015/06/dry-vs-coupling-in-production-code.html</link><description>&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;Duplication in tests can be a good
thing&lt;/a&gt;.
The same can be said for production code as well in some cases. No. I'm
not going mad. I probably wouldn't believe this if you showed me this
several years ago either. More experience has shown me that loose
coupling is often …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-07-01:/2015/06/dry-vs-coupling-in-production-code.html</guid><category>tutorial</category><category>programming</category></item><item><title>Integration Tests</title><link>/2015/07/integration-tests.html</link><description>&lt;p&gt;It is well documented you need a balance between different categories of
automated tests. The split is usually in the form.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;70% unit&lt;/li&gt;
&lt;li&gt;20% integration&lt;/li&gt;
&lt;li&gt;10% acceptance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While unit tests make up the majority of tests, there is a limit to
their effectiveness. As soon as you leave the system …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-07-01:/2015/07/integration-tests.html</guid><category>testing</category><category>unit-testing</category></item><item><title>Static Code</title><link>/2015/07/static-code.html</link><description>&lt;p&gt;Static code is considered a bad thing by developers. This is especially
true when working with legacy code. The use of static code is often seen
as a smell and should not be used.&lt;/p&gt;
&lt;p&gt;This is not as black and white as it first seems. Static code can be
problematic …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-07-01:/2015/07/static-code.html</guid><category>programming</category><category>code-quality</category></item><item><title>The Benefits of Contract Testing</title><link>/2015/07/the-benefits-of-contract-testing.html</link><description>&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;I previously claimed that you need some integrated tests but as few as
possible&lt;/a&gt;.
There are huge benefits to this approach, but there is a problem. How do
you stop your test doubles falling out of line with the real
implementations? The answer is to use Contract Tests.&lt;/p&gt;
&lt;h4&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Create …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-07-01:/2015/07/the-benefits-of-contract-testing.html</guid><category>testing</category><category>contracts</category><category>unit-testing</category></item><item><title>You Still Need Manual Tests</title><link>/2015/07/you-still-need-manual-tests.html</link><description>&lt;p&gt;This blog has numerous examples of why unit,
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/integration-tests.html"&gt;integration&lt;/a&gt;and
&lt;a href="https://blog.shaunfinglas.co.uk/2015/07/the-benefits-of-contract-testing.html"&gt;contract&lt;/a&gt;testing
is essential. However you still need manual tests. It is foolish to
believe that all testing can be covered by automated tests despite the
bias in this area.&lt;/p&gt;
&lt;h4&gt;Why?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Manual tests can catch anything you may have missed …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-07-01:/2015/07/you-still-need-manual-tests.html</guid><category>acceptance-testing</category><category>unit-testing</category></item><item><title>Branch by Abstraction</title><link>/2015/06/branch-by-abstraction.html</link><description>&lt;p&gt;Feature toggles are great for new features or features that are either
enabled or disabled. Branch by Abstraction offers the &lt;a href="https://blog.shaunfinglas.co.uk/2015/06/feature-toggles.html"&gt;same benefits as
feature
toggles&lt;/a&gt;
but the seam to introduce the change is the abstraction itself. Unlike
Feature Toggles, the use of Branch by Abstraction allows a gradual
transition to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-06-01:/2015/06/branch-by-abstraction.html</guid><category>tutorial</category><category>programming</category></item><item><title>Do you really need a Microservice?</title><link>/2015/06/do-you-really-need-microservice.html</link><description>&lt;p&gt;Lately there has been two sets of advice around the use of
Microservices. &lt;a href="http://martinfowler.com/bliki/MonolithFirst.html"&gt;Some advise that Microservices should be built after the
fact&lt;/a&gt;. &lt;a href="http://www.martinfowler.com/articles/dont-start-monolith.html"&gt;Others advise
the opposite
solution&lt;/a&gt;.
In conjunction there is a third option that deserves more attention. Do
you even need a Microservice at all? A &lt;a href="https://twitter.com/natpryce/status/593763168977088513"&gt;recent
tweet …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-06-01:/2015/06/do-you-really-need-microservice.html</guid><category>microservices</category><category>retro</category></item><item><title>Feature Toggles</title><link>/2015/06/feature-toggles.html</link><description>&lt;p&gt;I'm a fan of regular releasing. My background and experience leads me to
release as regularly as possible. There are numerous benefits to regular
releases; limited risk, slicker release processes and the ability to
change as requirements evolve.&lt;/p&gt;
&lt;p&gt;The problem with this concept is how can you release when features …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-06-01:/2015/06/feature-toggles.html</guid><category>tutorial</category><category>releasing</category></item><item><title>FirstOrDefault in LINQ</title><link>/2015/06/firstordefault-in-linq.html</link><description>&lt;p&gt;Explicit null checking is a code smell in most cases. It should be
limited where possible, or pushed to the edge of the system. A common
anti pattern I've noticed is the incorrect use of &lt;code&gt;First()&lt;/code&gt; in LINQ,
which I have used myself on many occasions in this manner.&lt;/p&gt;
&lt;p&gt;Assuming …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-06-01:/2015/06/firstordefault-in-linq.html</guid><category>programming</category><category>tutorial</category></item><item><title>Mob Programming</title><link>/2015/05/mob-programming.html</link><description>&lt;p&gt;I first saw this video of &lt;a href="http://mobprogramming.org/mob-programming-time-lapse-video-a-day-of-mob-programming/"&gt;Mob
Programming&lt;/a&gt;
a couple of years back. Mob Programming is pair programming taken one
step further, the whole team is based around a single machine. The
developers rotate regularly and those who are not driving can add
feedback, make suggestions or simply watch and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 May 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-05-01:/2015/05/mob-programming.html</guid><category>development</category><category>team</category></item><item><title>Tasking in Software Development</title><link>/2015/05/tasking-in-software-development.html</link><description>&lt;p&gt;Tasking is core part of XP, Kanban, Scrum and other software development
methodologies. It is required when more than one developer is working on
a feature. I consider it to be the most wasteful part of the development
process as practiced in the mainstream.&lt;/p&gt;
&lt;p&gt;Tasking typically involves the team sitting …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 May 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-05-01:/2015/05/tasking-in-software-development.html</guid><category>retro</category><category>team</category></item><item><title>Testing Private Code</title><link>/2015/05/testing-private-code.html</link><description>&lt;p&gt;A common problem many people ask is - should you test private code? In
short, you shouldn't. You should always test the public api of your code
where possible. This is not always easy. Based on the context of the
code in question there are a few options available.&lt;/p&gt;
&lt;h5&gt;Don't Test …&lt;/h5&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 May 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-05-01:/2015/05/testing-private-code.html</guid><category>testing</category><category>tdd</category><category>unit-testing</category></item><item><title>Walking Skeleton</title><link>/2015/05/walking-skeleton.html</link><description>&lt;p&gt;&lt;a href="http://alistair.cockburn.us/Walking+skeleton"&gt;A Walking Skeleton is the thinnest possible slice of new functionality
that can be delivered end to
end&lt;/a&gt;. The term "&lt;em&gt;walking&lt;/em&gt;"
refers to the ability for the feature to "&lt;em&gt;stand on its own&lt;/em&gt;". You
should be able to deploy a Walking Skeleton and demonstrate it. Just
like a human skeleton …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 May 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-05-01:/2015/05/walking-skeleton.html</guid><category>development</category><category>team</category></item><item><title>Abstractions</title><link>/2015/02/abstractions.html</link><description>&lt;p&gt;This is the first part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Coupling is one of the enemies of a healthy code base. One way to combat
high coupling is to introduce abstractions.&lt;/p&gt;
&lt;p&gt;Too few abstractions is bad. Your code can become …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-04-01:/2015/02/abstractions.html</guid><category>abstractions-series</category><category>code-quality</category></item><item><title>Cool URI's Don't Change</title><link>/2015/04/cool-uris-dont-change.html</link><description>&lt;p&gt;I switched domains back in June 2013. This was out of my control. A lot
of links were lost despite an attempt to backlink in order to keep the
traffic from the old links and new links crossing over. The previous
domain also broke content without consideration, there are links …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-04-01:/2015/04/cool-uris-dont-change.html</guid><category>blogging</category></item><item><title>CQRS - The Simplest Introduction</title><link>/2015/04/cqrs-simplest-introduction.html</link><description>&lt;p&gt;&lt;a href="http://martinfowler.com/bliki/CQRS.html"&gt;CQRS or Command Query Responsibility
Separation&lt;/a&gt; is easy to
understand but it can become complex due to various levels to which
developers take the principle behind it. Simply - &lt;a href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;CQRS is two models,
where the used to be
one&lt;/a&gt;.
Nothing more at its heart.&lt;/p&gt;
&lt;p&gt;Take the Customer aggregate below. This exposes …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-04-01:/2015/04/cqrs-simplest-introduction.html</guid><category>programming</category><category>SOA</category><category>tutorial</category></item><item><title>DRY vs DAMP in Tests</title><link>/2015/04/dry-vs-damp-in-tests.html</link><description>&lt;p&gt;In the &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/randomly-generated-values-in-tests.html"&gt;previous post I mentioned that duplication in tests is not
always
bad&lt;/a&gt;.
Sometimes duplication becomes a problem. Tests can become large or
virtually identically excluding a few lines. Changes to these tests can
take a while and increase the maintenance overhead. At this point, DRY
violations need to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-04-01:/2015/04/dry-vs-damp-in-tests.html</guid><category>programming</category><category>unit-testing</category><category>tutorial</category></item><item><title>Getters and Setters are Evil - Redux</title><link>/2015/04/getters-and-setters-are-evil-redux.html</link><description>&lt;p&gt;Back in early 2011 I wrote one of my &lt;a href="https://blog.shaunfinglas.co.uk/2011/04/getters-and-setters-are-evil.html"&gt;most viewed and commented posts at
the time - Getters and Setters are
Evil&lt;/a&gt;.
Four years later it's time to review this.&lt;/p&gt;
&lt;p&gt;The feedback within the team was generally positive. Production code was
written in this style to great success. The core …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-04-01:/2015/04/getters-and-setters-are-evil-redux.html</guid><category>programming</category><category>tutorial</category></item><item><title>Randomly Generated Values in Tests</title><link>/2015/04/randomly-generated-values-in-tests.html</link><description>&lt;p&gt;The use of randomly generated test data seems like a good thing at first
glance. Having worked with several teams that have used this concept I
generally discourage the practice. Consider a simple method that joins
together two strings. A test using random values may look like this.&lt;/p&gt;
&lt;script src="https://gist.github.com/Finglas/a52ff8867d6af0757059.js"&gt;&lt;/script&gt;

&lt;h4&gt;Problems&lt;/h4&gt;
&lt;h5&gt;Harder …&lt;/h5&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2015-04-01:/2015/04/randomly-generated-values-in-tests.html</guid><category>testing</category><category>tdd</category><category>unit-testing</category><category>tutorial</category></item><item><title>Dependency Elimination Principle</title><link>/2015/03/dependency-elimination-principle.html</link><description>&lt;p&gt;This is the third, and final part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/reused-abstraction-principle.html"&gt;Reused Abstraction
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I've wrote about what &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;good dependencies are before, and the benefits if
you can limit and remove them where
possible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can take this idea further though, by applying concepts …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Mar 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-03-01:/2015/03/dependency-elimination-principle.html</guid><category>abstractions-series</category><category>tutorial</category></item><item><title>Remote Meetings - Balancing the Act</title><link>/2015/03/remote-meetings-balancing-act.html</link><description>&lt;p&gt;Meetings are hard when some team members are remote and are physically
based in the same location.&lt;/p&gt;
&lt;p&gt;It is easy for the remote user to feel second class in terms of the
meeting. Remote workers can find it hard to add to the meeting without
interrupting or getting left behind …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Mar 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-03-01:/2015/03/remote-meetings-balancing-act.html</guid><category>retro</category></item><item><title>Reused Abstraction Principle</title><link>/2015/03/reused-abstraction-principle.html</link><description>&lt;p&gt;This is the second part of my series on abstractions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 -
    &lt;a href="https://blog.shaunfinglas.co.uk/2015/02/abstractions.html"&gt;Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2015/03/dependency-elimination-principle.html"&gt;Dependency Elimination
    Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The Reused Abstraction Principle is a simple in concept in practice, but
oddly rarely followed in typical enterprise development. I myself have
been incredibly guilty of this in the past.&lt;/p&gt;
&lt;p&gt;Most code …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Mar 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-03-01:/2015/03/reused-abstraction-principle.html</guid><category>abstractions-series</category><category>code-quality</category><category>tutorial</category></item><item><title>Acceptance Testing need not use the Full Stack</title><link>/2014/08/acceptance-testing-need-not-use-full.html</link><description>&lt;ul&gt;
&lt;li&gt;Joined a team with thousands of unit tests (\~10k)&lt;/li&gt;
&lt;li&gt;But bugs still got through our QA process&lt;/li&gt;
&lt;li&gt;How could this be?&lt;/li&gt;
&lt;li&gt;Team had a small number of full end to end live service tests&lt;/li&gt;
&lt;li&gt;So my answer was to just increase the number of these&lt;/li&gt;
&lt;li&gt;Surely this would solve our …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 10 Feb 2015 20:15:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-02-10:/2014/08/acceptance-testing-need-not-use-full.html</guid><category>testing</category><category>retro</category></item><item><title>Value Object Refactoring</title><link>/2015/02/value-object-refactoring.html</link><description>&lt;p&gt;After extract method or extract class introducing a value object is one
of the most powerful refactorings available. A value object encapsulates
a value or concept within your domain. While the term is more formally
known from Domain Driven Design, DDD is not a pre-requresite for use.
Introducing a value …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 03 Feb 2015 20:36:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-02-03:/2015/02/value-object-refactoring.html</guid><category>programming</category><category>tutorial</category></item><item><title>Consistency</title><link>/2015/02/consistency.html</link><description>&lt;p&gt;Striving for consistency within a codebase is a &lt;strong&gt;good thing&lt;/strong&gt;. I'm very
much someone who believes in applying a consistent formatting style,
patterns and practices. However there are two sides to this view.&lt;/p&gt;
&lt;p&gt;One colleague used to hate different apps that used different
frameworks, styles and conventions. This is a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-02-01:/2015/02/consistency.html</guid><category>retro</category></item><item><title>Guard Clauses and Assertions</title><link>/2015/02/guard-clauses-and-assertions.html</link><description>&lt;p&gt;Two simple techniques to increase code quality, resilience, and ease
debugging scenarios is to use guard clauses effectively and ensure that
assertions are used liberally.&lt;/p&gt;
&lt;h4&gt;Guard Clauses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Any public method should perform guard clauses to ensure pre
    conditions are met.&lt;/li&gt;
&lt;li&gt;Ensures the code's invariants are not broken.&lt;/li&gt;
&lt;li&gt;Throw exceptions, because …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-02-01:/2015/02/guard-clauses-and-assertions.html</guid><category>code-quality</category><category>tutorial</category></item><item><title>Abstract Data Use Not Data Access</title><link>/2015/01/abstract-data-use-not-data-access.html</link><description>&lt;p&gt;Common data access abstractions I've come across and been guilty of
implementing myself are the likes of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IDatabase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPersistentStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDataStore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IRepository&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is, these are not really abstractions. If anything they add
an extra layer of indirection. One such benefit of this level of
indirection is each concrete …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Jan 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-01-01:/2015/01/abstract-data-use-not-data-access.html</guid><category>programming</category><category>tutorial</category></item><item><title>Caching</title><link>/2015/01/caching.html</link><description>&lt;p&gt;The naive approach to implement caching is to just store everything in
an in memory collection such as a hashtable. After all it works on my
machine.&lt;/p&gt;
&lt;p&gt;I've worked on systems in the past that used this technique but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bring in two processes and this falls apart&lt;/li&gt;
&lt;li&gt;No Time to …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Jan 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-01-01:/2015/01/caching.html</guid><category>programming</category></item><item><title>Recommended Reading List 2014</title><link>/2015/01/recommended-reading-list-2014.html</link><description>&lt;p&gt;I've read some great books in the last twelve months, here they are in
no particular order.&lt;/p&gt;
&lt;h4&gt;Process&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity/dp/0749922648/"&gt;Getting Things
    Done&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/ReWork-Change-Way-Work-Forever/dp/0091929784"&gt;Rework - Change the Way You Work
    Forever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Soft-Skills-software-developers-manual/dp/1617292397"&gt;Soft Skills - The Software Developer's Life
    Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Release-It-Production-Ready-Pragmatic-Programmers/dp/0978739213"&gt;Release
    It!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577"&gt;Implementing Domain Driven
    Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829"&gt;REST in
    Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742"&gt;Javascript the Good
    Parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Core-HTML5-Canvas-Animation-Development/dp/0132761610"&gt;Core …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Jan 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-01-01:/2015/01/recommended-reading-list-2014.html</guid><category>reading</category></item><item><title>Why Technical Blogging?</title><link>/2015/01/why-technical-blogging.html</link><description>&lt;p&gt;Given this is my fifth year of blogging I figured it would be worth
while answering "&lt;em&gt;Why bother with technical blogging?&lt;/em&gt;".&lt;/p&gt;
&lt;h4&gt;Get Writing&lt;/h4&gt;
&lt;p&gt;Write about anything. Just get started, providing it fits your core
focus. This blog focuses on programming and software development related
topics, so anything that falls within …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Jan 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2015-01-01:/2015/01/why-technical-blogging.html</guid><category>blogging</category><category>retro</category></item><item><title>A Unit is Not Always a Method or Class</title><link>/2014/12/a-unit-is-not-always-method-or-class.html</link><description>&lt;p&gt;Part three of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via TDD
series&lt;/a&gt;.
The most important concept when coupled with the previous two points -
not every unit will relate to a method or class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Stop Making Everything
    Public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;Limit the Amount of Dependencies you
    Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Most introductions …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Dec 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-12-01:/2014/12/a-unit-is-not-always-method-or-class.html</guid><category>3-steps-code-quality</category><category>tdd</category></item><item><title>Factory Obsession</title><link>/2014/12/factory-obsession.html</link><description>&lt;p&gt;I have noticed a pattern over the years with developers of which I will
refer to as factory obsession. Everything is a factory or builder
object. To some, the use of &lt;code&gt;new&lt;/code&gt; is &lt;strong&gt;banned&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Consider a object that is responsible for some business logic and
finally saves the result to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Dec 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-12-01:/2014/12/factory-obsession.html</guid><category>unit-testing</category><category>tutorial</category></item><item><title>Limit the Amount of Dependencies you Use</title><link>/2014/12/limit-amount-of-dependencies-you-use.html</link><description>&lt;p&gt;Part two of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via
TDD&lt;/a&gt;
series and ties very closely into step one, limiting the visibility of
your classes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/stop-making-everything-public.html"&gt;Stop Making Everything
    Public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;A Unit is Not Always a Method or
    Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The more dependencies you use the more your …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Dec 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-12-01:/2014/12/limit-amount-of-dependencies-you-use.html</guid><category>3-steps-code-quality</category><category>tdd</category></item><item><title>Pair Programming vs Pairing</title><link>/2014/12/pair-programming-vs-pairing.html</link><description>&lt;p&gt;I'm a fan of pair programming. I owe a lot of this practice to my
improvement early on in my career. I define pair programming as two
developers working on a task using one or more machines at the same
time.&lt;/p&gt;
&lt;p&gt;I have had some excellent pair programming sessions. I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Dec 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-12-01:/2014/12/pair-programming-vs-pairing.html</guid><category>developers</category><category>retro</category></item><item><title>Stop Making Everything Public</title><link>/2014/12/stop-making-everything-public.html</link><description>&lt;p&gt;Part one of my &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/three-steps-to-code-quality-via-tdd.html"&gt;Three Steps to Code Quality via TDD
series&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 2 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/limit-amount-of-dependencies-you-use.html"&gt;Limit the Amount of Dependencies you
    Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href="https://blog.shaunfinglas.co.uk/2014/12/a-unit-is-not-always-method-or-class.html"&gt;A Unit is Not Always a Method or
    Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;We always default to public class when creating a new class. Why? The
concept of visibility in OO …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Dec 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-12-01:/2014/12/stop-making-everything-public.html</guid><category>3-steps-code-quality</category><category>tdd</category></item><item><title>Three Steps to Code Quality via TDD</title><link>/2014/12/three-steps-to-code-quality-via-tdd.html</link><description>&lt;p&gt;Common complaints and problems that I've both encountered and hear other
developers raise when it comes to the practice of Test Driven
Development are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impossible to refactor without all the tests breaking&lt;/li&gt;
&lt;li&gt;Minor changes require hours of changes to test code&lt;/li&gt;
&lt;li&gt;Test setup is huge, slow to write and difficult …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Dec 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-12-01:/2014/12/three-steps-to-code-quality-via-tdd.html</guid><category>3-steps-code-quality</category><category>tdd</category></item><item><title>Dependency Injection (DI) Containers</title><link>/2014/11/dependency-injection-di-containers.html</link><description>&lt;h2&gt;Strengths&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;One place for configuration&lt;/dt&gt;
&lt;dd&gt;Rather than scattered through out the system. Most DI containers
have some sort of "module" system where you group associated
components together.&lt;/dd&gt;
&lt;dt&gt;Scoping&lt;/dt&gt;
&lt;dd&gt;Different types of lifestyle can be achieved. Per request, per
thread, singleton and others. Usually other frameworks have the
ability to plug …&lt;/dd&gt;&lt;/dl&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Nov 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-11-01:/2014/11/dependency-injection-di-containers.html</guid><category>programming</category></item><item><title>Ratcheting</title><link>/2014/11/ratcheting.html</link><description>&lt;p&gt;Some tasks in software development are mundane such as formatting and
code conventions. Where possible tooling should take away some of this
pain, however sometimes you need a developer to take on a task that
requires a great deal of time and/or effort to complete. Tooling will
only get …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Nov 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-11-01:/2014/11/ratcheting.html</guid><category>testing</category><category>programming</category></item><item><title>Characterization Tests</title><link>/2014/10/characterization-tests.html</link><description>&lt;p&gt;Having worked with some truly awful codebases a common problem tends to
arise every now and then. You need to make a change within some legacy
component that most likely has limited or no automated tests around.
This can be a scary process.&lt;/p&gt;
&lt;p&gt;There are a few techniques you can …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Oct 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-10-01:/2014/10/characterization-tests.html</guid><category>testing</category><category>programming</category></item><item><title>Do it right - violate YAGNI</title><link>/2014/10/do-it-right-violate-yagni.html</link><description>&lt;p&gt;You Ain't Gonna Need It or YAGNI is about not writing code that is not
needed. I've gone on to realise how important this is when it comes to
&lt;a href="https://blog.shaunfinglas.co.uk/2014/08/program-for-change.html"&gt;programming for
change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of my biggest pet peeves that I have experienced working on agile
teams is the excuse of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Oct 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-10-01:/2014/10/do-it-right-violate-yagni.html</guid><category>retro</category></item><item><title>Practice, Practice, Practice</title><link>/2014/10/practice-practice-practice.html</link><description>&lt;p&gt;The final part of my "&lt;a href="https://blog.shaunfinglas.co.uk/2013/04/3-years-at-codeweavers.html"&gt;4 years as a Dev
series&lt;/a&gt;"
has the same conclusion as the &lt;a href="https://blog.shaunfinglas.co.uk/2011/08/ten-things-graduate-will-experience.html"&gt;last set of retrospective
posts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Continuous learning, practice and improvement is required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Books&lt;/li&gt;
&lt;li&gt;Blogs&lt;/li&gt;
&lt;li&gt;Videos&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;Conferences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these mediums help, but as I've said before, practice, practice,
practice.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Oct 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-10-01:/2014/10/practice-practice-practice.html</guid><category>retro</category></item><item><title>Reinvent the Wheel, Often</title><link>/2014/10/reinvent-wheel-often.html</link><description>&lt;p&gt;We are often never told to reinvent the wheel. In other words, if your
job is solve problems within Domain X you shouldn't spend your time
recreating or solving problems that fall outside of this domain.&lt;/p&gt;
&lt;p&gt;For production code, this I agree with this statement fully. Software
development is hard …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Oct 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-10-01:/2014/10/reinvent-wheel-often.html</guid><category>retro</category></item><item><title>DDD Validation</title><link>/2014/09/ddd-validation.html</link><description>&lt;p&gt;Validation within an application (specifically in terms of &lt;a href="http://en.wikipedia.org/wiki/Domain-driven_design"&gt;Domain
Driven Design - DDD&lt;/a&gt;)
can be solved in a variety of ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A validate method on the entity/value type in question&lt;/li&gt;
&lt;li&gt;An IsValid property/accessor on the entity/value type in question&lt;/li&gt;
&lt;li&gt;A separate service could be used&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Validate Method&lt;/h4&gt;
&lt;p&gt;Adding …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Sep 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-09-01:/2014/09/ddd-validation.html</guid><category>programming</category><category>tutorial</category></item><item><title>Developer Diaries</title><link>/2014/09/developer-diaries.html</link><description>&lt;p&gt;A few weeks back I stumbled across a tweet which I unfortunately cannot
find to give credit to. It talked about the benefit of keeping a
developer diary.&lt;/p&gt;
&lt;p&gt;At the same time I was reading &lt;a href="http://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity/dp/0749922648"&gt;Getting Things Done
(GTD)&lt;/a&gt;.
I felt inspired to take note of everything related to development …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Sep 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-09-01:/2014/09/developer-diaries.html</guid><category>retro</category><category>tutorial</category></item><item><title>Program for Change</title><link>/2014/08/program-for-change.html</link><description>&lt;p&gt;We should program for change AKA the &lt;a href="http://en.wikipedia.org/wiki/Open/closed_principle"&gt;Open/Closed
Principle&lt;/a&gt;. In my
opinion, the OCP is one of the lesser respected SOLID principles. One of
my biggest, and earliest failures fresh out of university was ignoring
this concept.&lt;/p&gt;
&lt;p&gt;At the time I was applying
&lt;a href="http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt; to some
code myself and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Aug 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-08-01:/2014/08/program-for-change.html</guid><category>retro</category></item><item><title>Stop.Mocking.EVERYTHING</title><link>/2014/08/stopmockingeverything.html</link><description>&lt;p&gt;I've flip flopped on how to use mock objects since 2008. It's took me
nearly five years to finally claim to have a solid, practical answer on
what is in my opinion, their correct use.&lt;/p&gt;
&lt;h4&gt;Mock Everything&lt;/h4&gt;
&lt;p&gt;Some developers told me to mock everything. Every. Single. Collaborator.
I wasn't sure …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Aug 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-08-01:/2014/08/stopmockingeverything.html</guid><category>programming</category><category>retro</category><category>tdd</category></item><item><title>Dont Tie Yourself to a Framework</title><link>/2014/07/dont-tie-yourself-to-framework.html</link><description>&lt;ul&gt;
&lt;li&gt;
Programming is great

&lt;/li&gt;
&lt;li&gt;
Software development is the crap bit. You'll spend more time
configuring, integrating and faffing rather than writing logic most of
the time.

&lt;/li&gt;
&lt;li&gt;
Test Driven Development makes development easier as it forces you to
decouple your code.

-   Your core logic should be pure, dependency free C\#, Java, Python …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 22 Jul 2014 19:19:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-07-22:/2014/07/dont-tie-yourself-to-framework.html</guid><category>programming</category></item><item><title>I Need to Stop Misusing Namespaces</title><link>/2014/07/i-need-to-stop-misusing-namespaces.html</link><description>&lt;p&gt;At the recent &lt;a href="https://skillsmatter.com/conferences/6198-nsbcon"&gt;NSBCon&lt;/a&gt;
one interesting question that came about was how to structure a project.
The panel consisting of various speakers had no answer, after all this
is dependant upon the project in question. Therefore there is no right
or wrong answer.&lt;/p&gt;
&lt;p&gt;However one point they were in unison …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-07-01:/2014/07/i-need-to-stop-misusing-namespaces.html</guid><category>programming</category><category>tutorial</category></item><item><title>SOA Done Badly vs SOA Done Right</title><link>/2014/07/soa-done-badly-vs-soa-done-right.html</link><description>&lt;p&gt;I was under the assumption I had been doing SOA for over 3 years.
Previously I have had services which did stuff, these talked to other
services which did other stuff and so on. We would group services around
functionality.&lt;/p&gt;
&lt;p&gt;We would break these services down if they got too …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-07-01:/2014/07/soa-done-badly-vs-soa-done-right.html</guid><category>architecture</category><category>programming</category></item><item><title>The Importance of Tools</title><link>/2014/07/the-importance-of-tools-one-of-most.html</link><description>&lt;p&gt;One of the most influential books I've read on software development has
been &lt;a href="http://www.amazon.co.uk/gp/product/020161622X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=020161622X&amp;amp;linkCode=as2&amp;amp;tag=bloshafin-21"&gt;The Pragmatic
Programmer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the key points raised within the book is that of automation and
tooling. For example, automating the build process is a very worthwhile
undertaking. You should be able to check out some …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-07-01:/2014/07/the-importance-of-tools-one-of-most.html</guid><category>retro</category></item><item><title>Flexible Selenium Tests via Page Objects</title><link>/2014/05/flexible-selenium-tests-via-page-objects.html</link><description>&lt;p&gt;A fast, automated suite of unit and integration tests are not enough. At
some point you'll need to test your presentation logic. Ideally your
domain/business/game logic is stubbed so all you'll need to do at this
point is check that the presentation is complete. For example, does view …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 May 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-05-01:/2014/05/flexible-selenium-tests-via-page-objects.html</guid><category>testing</category></item><item><title>Learning Tests</title><link>/2014/05/learning-tests.html</link><description>&lt;p&gt;At the last &lt;a href="http://www.agilestaffordshire.org/"&gt;Agile Staffordshire&lt;/a&gt; I
attended &lt;a href="http://www.agilestaffordshire.org/agile/january-2014-kata-with-constraints/"&gt;the task was to complete the string calculator with
constraints&lt;/a&gt;.
The group worked in pairs and everything was running smoothly. Until I
heard a few guys behind struggling with something.&lt;/p&gt;
&lt;p&gt;I'd worked with one of the developers previously, so they called me over …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 May 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-05-01:/2014/05/learning-tests.html</guid><category>testing</category><category>tdd</category></item><item><title>Design is Important</title><link>/2014/04/design-is-important.html</link><description>&lt;p&gt;When I was a student I used to cheat. Not in exams or practical
assignments, but I used to cheat when it came to my process to develop
code. Early on I noticed a common pattern. After receiving an assignment
I would perform some analysis, figure out a basic design …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Apr 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2014-04-01:/2014/04/design-is-important.html</guid><category>programming</category></item><item><title>TDD is a Tool</title><link>/2014/02/tdd-is-tool.html</link><description>&lt;p&gt;I remember being introduced to Test Driven Development (TDD) very well.
This is because it had such an &lt;strong&gt;overwhelming change on how I write code
day to day&lt;/strong&gt;. It was incredibly alien, difficult, yet rewarding. On this
journey for the last five years I've changed my style, learned how not …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Feb 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-02-01:/2014/02/tdd-is-tool.html</guid><category>programming</category><category>tdd</category></item><item><title>The Correct Way to use var in C#</title><link>/2014/02/the-correct-way-to-use-var-in-c.html</link><description>&lt;p&gt;The .NET community is not widely controversial, though there is a strong
topic that appears to come up time and time again when I pair with other
developers - how to use &lt;code&gt;var&lt;/code&gt; in C#.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword was introduced in .NET 3.5. Unlike other languages
this is &lt;strong&gt;still a …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Feb 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-02-01:/2014/02/the-correct-way-to-use-var-in-c.html</guid><category>programming</category><category>tutorial</category></item><item><title>Top Down vs Bottom Up</title><link>/2014/02/top-down-vs-bottom-up.html</link><description>&lt;p&gt;&lt;strong&gt;Top down development&lt;/strong&gt; has you starting at the highest point in the
application that you can. From here you code down until there is nothing
else left to develop. Once you reach this point you should be code
complete. Along the way you may need to stub out areas that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Feb 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2014-02-01:/2014/02/top-down-vs-bottom-up.html</guid><category>retro</category><category>tutorial</category></item><item><title>The Anti If Campaign</title><link>/2013/05/the-anti-if-campaign.html</link><description>&lt;p&gt;Firstly if you are unaware of what the &lt;a href="http://www.antiifcampaign.com/"&gt;Anti If
Campaign&lt;/a&gt; is, I advise you to take look
before coming back. My first impression a few years ago was the site
must have been some sort of spoof. Programming without "if" statements,
this was crazy nonsense. After all the "if …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 May 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2013-05-01:/2013/05/the-anti-if-campaign.html</guid><category>programming</category></item><item><title>3 Years at Codeweavers</title><link>/2013/04/3-years-at-codeweavers.html</link><description>&lt;p&gt;Having wrote about the &lt;a href="https://blog.shaunfinglas.co.uk/2011/08/ten-things-graduate-will-experience.html"&gt;top ten things I discovered in my first year at
Codeweavers&lt;/a&gt;,
I figured it would be time for a follow up after the past two years. In
no particular order, a collection of the biggest lessons I have
experienced.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2013/04/why-are-you-not-using-design-by-contract.html"&gt;Design by
    Contract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2014/02/tdd-is-tool.html"&gt;Test Driven Development (TDD …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Apr 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2013-04-01:/2013/04/3-years-at-codeweavers.html</guid><category>retro</category></item><item><title>Why are you not using Design by Contract?</title><link>/2013/04/why-are-you-not-using-design-by-contract.html</link><description>&lt;p&gt;When learning to program I distinctly remember coming across the concept
of placing asserts within your code. Assert statements are primarily
used for "&lt;em&gt;things that cannot happen&lt;/em&gt;", but in my early days I was too
focused on the stuff that was supposed to happen!&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;Defensive programming&lt;/em&gt;" was also introduced. Principles …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Apr 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2013-04-01:/2013/04/why-are-you-not-using-design-by-contract.html</guid><category>programming</category></item><item><title>Object Calisthenics</title><link>/2013/01/object-calisthenics.html</link><description>&lt;p&gt;Recently I ran a session on &lt;a href="http://www.markhneedham.com/blog/2008/11/06/object-calisthenics-first-thoughts/"&gt;Object
Calisthenics&lt;/a&gt;.
I was first exposed to this challenge a few years ago and personally
found it a fun, yet difficult experience. This is intentional as the
challenge is designed to push the boundaries of best practices. The
instructions are simple, there are nine …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Jan 2013 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2013-01-01:/2013/01/object-calisthenics.html</guid><category>programming</category></item><item><title>Object Discovery</title><link>/2012/12/object-discovery.html</link><description>&lt;p&gt;Recently we had &lt;a href="https://twitter.com/kevinrutherford"&gt;@kevinrutherford&lt;/a&gt;
in to talk about object discovery. While TDD is a great tool, it is no
excuse for some sort of design process. If you don't, you'll most
&lt;a href="http://devgrind.com/2007/04/25/how-to-not-solve-a-sudoku/"&gt;likely end up with a
mess&lt;/a&gt;. This
session was based around this principle.&lt;/p&gt;
&lt;p&gt;One point that was discussed what …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Dec 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2012-12-01:/2012/12/object-discovery.html</guid><category>programming</category></item><item><title>Codeweavers Code Retreat</title><link>/2012/10/codeweavers-code-retreat.html</link><description>&lt;p&gt;Last week we had &lt;a href="https://twitter.com/kevinrutherford"&gt;@kevinrutherford&lt;/a&gt;
in to run a coderetreat. It was the first retreat I've taken part in
personally, the same applying to much of the team. The day was to focus
on one challenge - &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Conway's Game of
Life&lt;/a&gt;&lt;/strong&gt; though
each iteration would introduce new constraints.&lt;/p&gt;
&lt;h2&gt;Iteration 1&lt;/h2&gt;
&lt;p&gt;The …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Oct 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2012-10-01:/2012/10/codeweavers-code-retreat.html</guid><category>programming</category></item><item><title>MVC is Broken</title><link>/2012/10/mvc-is-broken.html</link><description>&lt;p&gt;If you look up the definition of &lt;a href="http://en.wikipedia.org/wiki/Model_view_controller"&gt;MVC or Model View
Controller&lt;/a&gt;, it will
hail the definition as being able to change your front end without
affecting other parts of the application and vice versa. This sounds
great in theory, however this claim is nothing more than a &lt;em&gt;blatant
lie …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Oct 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2012-10-01:/2012/10/mvc-is-broken.html</guid><category>retro</category></item><item><title>Recommended Reading 2012</title><link>/2012/10/recommended-reading-2012.html</link><description>&lt;p&gt;Here is my updated reading list for 2012. We might have missed something
so if you think we should be reading it, let us know.&lt;/p&gt;
&lt;h2&gt;Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0071392319?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0071392319"&gt;The Toyota
    Way&lt;/a&gt; -
    Jeffrey Liker&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0566086654?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0566086654"&gt;The
    Goal&lt;/a&gt; -
    Eli Goldratt&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/gp/product/0321278658?ie=UTF8&amp;amp;tag=philipmead-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=19450&amp;amp;creativeASIN=0321278658"&gt;XP
    Explained&lt;/a&gt;-
    Kent Beck&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X"&gt;The Pragmatic
    Programmer&lt;/a&gt;-
    Andrew Hunt and David Thomas&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/The-Clean-Coder-Professional-ebook/dp/B0050JLC9Y"&gt;The Clean
    Coder …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Oct 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2012-10-01:/2012/10/recommended-reading-2012.html</guid><category>reading</category></item><item><title>The Problem with Auto Updating Browsers</title><link>/2012/06/the-problem-with-auto-updating-browsers.html</link><description>&lt;p&gt;At the time of writing the latest version of Firefox (version 13) has
just been released. Bear in mind that a week ago I updated our Selenium
bindings so that we could use Firefox 9+ for running our browser tests.&lt;/p&gt;
&lt;p&gt;The latest release is another great release for the Firefox …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Jun 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2012-06-01:/2012/06/the-problem-with-auto-updating-browsers.html</guid><category>testing</category></item><item><title>Achieving more Isolated Unit Testing</title><link>/2012/05/achieving-more-isolated-unit-testing.html</link><description>&lt;p&gt;&lt;em&gt;Good&lt;/em&gt; unit tests should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fast&lt;/li&gt;
&lt;li&gt;independent&lt;/li&gt;
&lt;li&gt;well focused&lt;/li&gt;
&lt;li&gt;&lt;em&gt;isolated&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your unit tests are slow, you're not gonna run them as often as you
should. Therefore one of the main benefits of unit testing is lost - the
lack of instant feedback.&lt;/p&gt;
&lt;p&gt;Each of your unit tests should be independent …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 May 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2012-05-01:/2012/05/achieving-more-isolated-unit-testing.html</guid><category>tdd</category><category>unit-testing</category></item><item><title>Recursively Building a Web Service using the same Web Service</title><link>/2012/03/recursively-building-web-service-using.html</link><description>&lt;p&gt;Back during the later part of 2011 there was a common theme occurring in
our retrospectives each week. How can we replicate our live environment
as close as possible?&lt;/p&gt;
&lt;p&gt;We took steps to achieve this goal by creating a single machine image to
ensure all our machines were configured correctly …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Mar 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2012-03-01:/2012/03/recursively-building-web-service-using.html</guid><category>testing</category></item><item><title>Warnings as Errors</title><link>/2012/02/warnings-as-errors.html</link><description>&lt;p&gt;One thing that annoyed me when starting at Codeweavers was the amounts
of warnings that would occur during a build of any of our projects.
Seeing the build progress only to spew out a screenful of text was
something that did not sit right with me. I was not the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Feb 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2012-02-01:/2012/02/warnings-as-errors.html</guid><category>programming</category></item><item><title>Log Everything</title><link>/2012/01/log-everything.html</link><description>&lt;p&gt;&lt;em&gt;This post was originally conceived back in mid 2011, starting a new
project made me think back to this event, hence the post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Any developer worth their salt will know what logging is. You could
argue there are two types of logging, either developer logging or
auditing. Developer logging would …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Jan 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2012-01-01:/2012/01/log-everything.html</guid><category>programming</category></item><item><title>Write Unit Tests? Start deleting them</title><link>/2012/01/write-unit-tests-start-deleting-them.html</link><description>&lt;p&gt;A recent &lt;a href="http://blog.steveklabnik.com/posts/2011-09-22-extracting-domain-models-a-practical-example"&gt;blog post by Steve
Klabnik&lt;/a&gt;
concluded with a statement about tossing unit tests if you have end to
end tests covering the code in question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't be afraid to change the tests! As soon as you've verified that
you've transcribed the code correctly, don't be afraid to just …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 Jan 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2012-01-01:/2012/01/write-unit-tests-start-deleting-them.html</guid><category>programming</category><category>tdd</category><category>unit-testing</category></item><item><title>6 Ways to Speed Up Selenium Tests</title><link>/2011/12/6-ways-to-speed-up-selenium-tests.html</link><description>&lt;p&gt;&lt;a href="https://blog.shaunfinglas.co.uk/2011/12/how-to-achieve-more-stable-end-to-end.html"&gt;Having finally achieved more stable end to end
tests&lt;/a&gt;
via Selenium, we figured it would be worth while sharing how we achieved
this. The following are six steps we've found that you can do to make
Selenium tests more stable.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turn off automatic updates for your browser/plugins&lt;/li&gt;
&lt;li&gt;Set your …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Dec 2011 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2011-12-01:/2011/12/6-ways-to-speed-up-selenium-tests.html</guid><category>tutorial</category><category>testing</category></item><item><title>How to Achieve More Stable End to End Tests</title><link>/2011/12/how-to-achieve-more-stable-end-to-end.html</link><description>&lt;p&gt;Recently myself and another colleague wrote an &lt;a href="http://en.wikipedia.org/wiki/Acceptance_testing"&gt;acceptance
test&lt;/a&gt; for a feature
that had yet to be implemented. For this end to end test we used
&lt;a href="http://seleniumhq.org/"&gt;Selenium&lt;/a&gt;, after all we wanted to test the
whole feature so this made sense. Our test performed some simple user
input, performed a calculation …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Thu, 01 Dec 2011 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2011-12-01:/2011/12/how-to-achieve-more-stable-end-to-end.html</guid><category>tutorial</category><category>testing</category></item><item><title>Smalltalk Conversion mapped to C#</title><link>/2011/10/smalltalk-conversion-mapped-to-c.html</link><description>&lt;p&gt;Lately the team has been making some rather drastic changes and
re-designs to our codebase in an attempt to minimise friction to change.
In other words, we've identified areas that are painful or tedious to
work in and have hopefully rectified them by re-writing the code. The
proof of this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Oct 2011 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2011-10-01:/2011/10/smalltalk-conversion-mapped-to-c.html</guid><category>programming</category></item><item><title>The Best Code is Written Twice</title><link>/2011/10/the-best-code-is-written-twice.html</link><description>&lt;p&gt;Recently myself and two colleges completed a new feature in an
afternoon's programming session. Despite this we ended up binning the
feature after all agreeing it was horribly complicated and in turn would
cause far more problems down the road than it would solve.&lt;/p&gt;
&lt;p&gt;We decided to rewrite the feature …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sat, 01 Oct 2011 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2011-10-01:/2011/10/the-best-code-is-written-twice.html</guid><category>programming</category><category>retro</category></item><item><title>Ten Things a graduate will experience during their first year at Codeweavers</title><link>/2011/08/ten-things-graduate-will-experience.html</link><description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kanban&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The importance of value and flow are the heart of day to day running
at Codeweavers. During my time I've read books such as &lt;a href="http://www.amazon.co.uk/Goal-Process-Ongoing-Improvement/dp/0566086654"&gt;The
Goal&lt;/a&gt;
and &lt;a href="http://www.amazon.co.uk/Toyota-Way-Management-Principles-Manufacturer/dp/0071392319"&gt;The Toyota
Way&lt;/a&gt;
in which the likes of the &lt;a href="http://en.wikipedia.org/wiki/Theory_of_Constraints"&gt;Theory of
Constraints&lt;/a&gt; and
the &lt;a href="http://en.wikipedia.org/wiki/Toyota_Production_System"&gt;Toyota Production
System&lt;/a&gt; are
discussed. I was also …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Mon, 01 Aug 2011 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2011-08-01:/2011/08/ten-things-graduate-will-experience.html</guid><category>retro</category></item><item><title>Mapping Objects via TDD</title><link>/2011/06/mapping-objects-via-tdd.html</link><description>&lt;h3&gt;Why we map?&lt;/h3&gt;
&lt;p&gt;Many times at Codeweavers we often have tasks which involve mapping
between various objects. It is no secret that I dislike such tasks. The
reason we map between objects though is actually a good thing as pointed
out by several developers. Mapping means our components are less …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Jun 2011 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2011-06-01:/2011/06/mapping-objects-via-tdd.html</guid><category>programming</category></item><item><title>Unit Testing C# attributes</title><link>/2011/05/unit-testing-c-attributes.html</link><description>&lt;p&gt;For a recent coding session I needed to handle an exception being thrown
when some Json was incorrectly bound to a view model. With the framework
we were using (&lt;a href="http://www.asp.net/mvc" title="ASP.NET MVC2"&gt;ASP.NET&lt;/a&gt; MVC2) I
was unable to handle the exception at the controller level, nor could I
handle it at the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Sun, 01 May 2011 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2011-05-01:/2011/05/unit-testing-c-attributes.html</guid><category>testing</category></item><item><title>Getters and Setters are Evil</title><link>/2011/04/getters-and-setters-are-evil.html</link><description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: There is a &lt;a href="https://blog.shaunfinglas.co.uk/2015/04/getters-and-setters-are-evil-redux.html"&gt;new
version&lt;/a&gt;
of this post.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I've been programming with OO languages since I was seventeen yet in the
last week I've had what is without doubt one of the biggest learning
experiences since I've started.&lt;/p&gt;
&lt;p&gt;Numerous developers that I've worked with claimed that we aren't doing …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Fri, 01 Apr 2011 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2011-04-01:/2011/04/getters-and-setters-are-evil.html</guid><category>programming</category></item><item><title>MBUnit to NUnit</title><link>/2011/03/mbunit-to-nunit.html</link><description>&lt;p&gt;Over the last few weeks we've ported our tests from
&lt;a href="http://www.mbunit.com/"&gt;MBUnit&lt;/a&gt; to &lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;. This
was done as after a quick spike it was seen that NUnit tests run almost
fifty percent quicker. For example our common projects' test time went
from around &lt;strong&gt;40s&lt;/strong&gt; to around &lt;strong&gt;20s&lt;/strong&gt; on average.&lt;/p&gt;
&lt;p&gt;This whole …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Mar 2011 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2011-03-01:/2011/03/mbunit-to-nunit.html</guid><category>testing</category><category>programming</category></item><item><title>Mock Roles not Types</title><link>/2011/03/mock-roles-not-types.html</link><description>&lt;blockquote&gt;
&lt;p&gt;"if it feels wrong, it probably is" - numerous Codeweavers' developers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The framework we use at Codeweavers is the excellent
&lt;a href="http://code.google.com/p/moq/"&gt;Moq&lt;/a&gt;, therefore when something is
difficult to mock we are forced by the framework to write an adapter. We
use an interface for testing, then create a concrete type which simply …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Tue, 01 Mar 2011 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2011-03-01:/2011/03/mock-roles-not-types.html</guid><category>testing</category><category>programming</category></item><item><title>Lists or Objects</title><link>/2010/12/lists-or-objects.html</link><description>&lt;blockquote&gt;
&lt;p&gt;"Our rule of thumb is that we try to limit passing around types with
generics (the types closed in angle brackets). Particularly when
applied to collections, we view it as a form of duplication. It's a
hint that there's a domain concept that should be extracted into a
type." [&lt;a href="http://www.growing-object-oriented-software.com/"&gt;Growing …&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Finglas</dc:creator><pubDate>Wed, 01 Dec 2010 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2010-12-01:/2010/12/lists-or-objects.html</guid><category>code-quality</category><category>programming</category></item></channel></rss>